#include <iostream>
#include <map>
#include <cmath>
#include "glob.h"

#include "GATDataSet.hh"

using namespace std;

// ======================================================================
// Contents:
//
// FindDataSet - Returns the DS number of a given run.
// GetDataSetSequences - Returns a map of all the sub-ranges in a DS.
// GetDSRunAndStartTimes - Start time and run time of each DS
// LoadDataSet - Contains run ranges for all DS's, updates a GATDataSet.
// LoadDetectorList - Gives a list of the detector names for each module.
// GetTotalActiveMass - Total active mass for each dataset.
//                      This could be calculated instead of hardcoded in the future.
// LoadActiveMasses - Returns a map of all active masses.
// LoadActiveMassUncertainties - Returns a map of all active mass uncertainties.
// LoadBadDetectorMap - Returns a map of bad (i.e. not biased, unusuable) detectors.
// LoadVetoDetectorMap - Returns a map of veto-only detectors.
// GetChannelSelectionPath - Returns a string with the path to the highest
//                          version of the channel selection files.
// LoadEnrNatMap - quick way to tell if a given detID is enriched (1) or natural (0).
// CheckModule - Given a detector ID, look up which module it lives in.
// GetVetoActiveMass - Modifies total mass to not include veto-only detectors.
// GetENFC - Parameters for corrected trapENFCal
// GetENMC - Parameters for corrected trapENMCal
// GetAvsE - AvsE parameters
// GetDCR* - DCR parameters
// LoadDS4MuonList - Static muon list for DS-4, calculated manually
//                   by $GATDIR/mjd-veto/skim-veto.cc
// GetLNRunCoverage - Given a run and DS number, verify that this run is covered
//                    by the most recent LN Fill Tag.
// LoadLNFillTimes1 - Returns a vector of M1 LN fills.
// LoadLNFillTimes2 - Returns a vector of M2 LN fills.
//
// ======================================================================

// When LoadDataSet is updated, this must be updated as well.
int FindDataSet(int run)
{
  if (run >= 2361 && run <= 7635)   return 0;
  if (run >= 9034 && run <= 14502)  return 1;
  if (run >= 14503 && run <= 15892) return 2;
  if (run >= 16797 && run <= 18351) return 3;
  if (run >= 60000791 && run <= 60001926) return 4;
  if (run >= 18623 && run <= 25671) return 5;
  if (run >= 25672 && run <= 100000) return 6;
  cout << "Error: Can't find a dataset for run " << run << endl;
  return -1;
}


// When LoadDataSet is updated, this must be updated as well.
int GetDataSetSequences(int dsNum)
{
  map<int,int> dsMap = {{0,75},{1,51},{2,7},{3,24},{4,18},{5,112},{6,5}};
  return dsMap[dsNum];
}


void GetDSRunAndStartTimes(int dsNum, double &runTime_s, double &startTime0)
{
  // Values found using the GATDataSet method option in $GATDIR/Apps/ds_livetime.cc

  runTime_s = 0, startTime0 = 0;
  if(dsNum == 0) {
    runTime_s = 3967363;
    startTime0 = 1435687000; // start time of run 2580
  }
  else if(dsNum == 1) {
    runTime_s = 5077520; //was 4728790; before blinding
    startTime0 = 1452643100; // start time of run 9422
  }
  else if (dsNum == 2) {
    runTime_s =  827346;
    startTime0 = 1464956900; // start time of run 14775
  }
  else if(dsNum == 3) {
    runTime_s = 2581517;//1549710;
    startTime0 = 1472169600; // start time of run 16797
  }
  else if(dsNum == 4) {
    // runTime_s = 2047670;//1460390;
    runTime_s = 1654247;
    startTime0 = 1472169600; // start time of run 60000802
  }
  else if (dsNum == 5) {
    runTime_s = 10461454;
    startTime0 = 1476396800; // start time of run 18623
  }
  else if (dsNum == 6) {
    runTime_s = 654631;
    startTime0 = 1494535900; // start time of run 25704
  }
  else cout << "Error: GetDSRunAndStartTimes(): Unknown dataset number: " << dsNum << endl;
}


void LoadDataSet(GATDataSet& ds, int dsNum, int subNum=-1)
{
  map<int, vector<int> > runRanges;

  // DS0 (P3JDY)
  if (dsNum == 0) runRanges = {
    // format: { {subRange, {range1_lo,range1_hi, range2_lo,range2_hi ...}} }
    {0, {2580,2580, 2582,2612}},
    {1, {2614,2629, 2644,2649, 2658,2673}},
    {2, {2689,2715}},
    {3, {2717,2750}},
    {4, {2751,2757, 2759,2784}},
    {5, {2785,2820}},
    {6, {2821,2855}},
    {7, {2856,2890}},
    {8, {2891,2907, 2909,2920}},
    {9, {3137,3166}},
    {10, {3167,3196}},
    {11, {3197,3199, 3201,3226}},
    {12, {3227,3256}},
    {13, {3257,3271, 3293,3310}},
    {14, {3311,3340}},
    {15, {3341,3370}},
    {16, {3371,3372, 3374,3400}},
    {17, {3401,3424, 3426,3428, 3431,3432}},
    {18, {3461,3462, 3464,3500}},
    {19, {3501,3530}},
    {20, {3531,3560}},
    {21, {3561,3580, 3596,3610}},
    {22, {3611,3644}},
    {23, {4034,4035, 4038,4039, 4045,4074}},
    {24, {4075,4104}},
    {25, {4105,4133}},
    {26, {4239,4245, 4248,4254, 4256,4268}},
    {27, {4270,4271, 4273,4283}},
    {28, {4285,4311}},
    {29, {4313,4318, 4320,4320, 4322,4326, 4328,4336}},
    {30, {4338,4361}},
    {31, {4363,4382}},
    {32, {4384,4401}},
    {33, {4403,4409, 4411,4427}},
    {34, {4436,4454}},
    {35, {4457,4457, 4459,4489}},
    {36, {4491,4493, 4573,4573, 4575,4590}},
    {37, {4591,4609, 4611,4624}},
    {38, {4625,4635, 4637,4654}},
    {39, {4655,4684}},
    {40, {4685,4714}},
    {41, {4715,4744}},
    {42, {4745,4777}},
    {43, {4789,4797, 4800,4823, 4825,4831}},
    {44, {4854,4872}},
    {45, {4874,4883, 4885,4907}},
    {46, {4938,4945, 4947,4959}},
    {47, {4962,4962, 4964,4964, 4966,4968, 4970,4980}},
    {48, {5007,5038}},
    {49, {5040,5053, 5055,5056, 5058,5061}},
    {50, {5090,5117}},
    {51, {5125,5154}},
    {52, {5155,5184}},
    {53, {5185,5224}},
    {54, {5225,5251}},
    {55, {5277,5284, 5286,5300}},
    {56, {5301,5330}},
    {57, {5372,5376, 5378,5392, 5405,5414}},
    {58, {5449,5458, 5461,5479}},
    {59, {5480,5496, 5498,5501, 5525,5526, 5531,5534}},
    {60, {5555,5589}},
    {61, {5591,5608}},
    {62, {5610,5639}},
    {63, {5640,5669}},
    {64, {5670,5699}},
    {65, {5701,5729}},
    {66, {5730,5751, 5753,5764}},
    {67, {5766,5795}},
    {68, {5796,5822}},
    {69, {5826,5850}},
    {70, {5889,5890, 5894,5895}},
    {71, {6553,6575, 6577,6577, 6775,6775}},
    {72, {6776,6782, 6784,6809}},
    {73, {6811,6830}},
    {74, {6834,6853}},
    {75, {6887,6903, 6957,6963}}
    };

  // DS1 (P3KJR)
  else if (dsNum == 1) runRanges = {
    {0, {9422,9440}},
    {1, {9471,9487, 9492, 9492}},
    {2, {9536,9565}},
    {3, {9638,9647, 9650, 9668}},
    {4, {9674,9676, 9678, 9678, 9711, 9727}},
    {5, {9763,9780}},
    {6, {9815,9821, 9823, 9832, 9848, 9849, 9851, 9854}},
    {7, {9856,9912}},
    // {8, {9856,9912, 9928,9928}},
    {8, {9928,9928}},
    {9, {9952,9966, 10019, 10035}},
    {10, {10074,10090, 10114, 10125}},
    {11, {10129,10149}},
    {12, {10150,10171}},
    {13, {10173,10203}},
    {14, {10204,10231}},
    {15, {10262,10278, 10298,10299, 10301,10301, 10304,10308}},
    {16, {10312,10342}},
    {17, {10344,10350, 10378,10394, 10552,10558}},
    {18, {10608,10648}},
    {19, {10651,10677}},
    {20, {10679,10717}},
    {21, {10745,10761, 10788,10803}},
    {22, {10830,10845, 10963,10976}},
    {23, {11002,11008, 11010,11019, 11046,11066}},
    {24, {11083,11113}},
    {25, {11114,11144}},
    {26, {11145,11175}},
    {27, {11176,11200, 11403,11410}},
    {28, {11414,11417, 11419,11426, 11428,11432, 11434,11444, 11446,11451}},
    {29, {11453,11453, 11455,11458, 11466,11476, 11477,11483}},
    {30, {12521,12522, 12525,12526, 12528,12537, 12539,12539, 12541,12543, 12545,12547, 12549,12550}},
    {31, {12551,12551, 12553,12560, 12562,12575, 12577,12578, 12580,12580}},
    {32, {12607,12625, 12636,12647, 12652,12653}},
    {33, {12664,12675}},
    {34, {12677,12695, 12697,12724}},
    {35, {12736,12765}},
    {36, {12766,12798}},
    {37, {12816,12816, 12819,12819, 12824,12824, 12827,12827, 12829,12831, 12834,12838, 12842,12842, 12843,12861, 12875,12875}},
    {38, {13000,13003, 13005,13028}},
    {39, {13029,13053, 13055,13056}},
    {40, {13066,13070, 13076,13092, 13094,13096}},
    {41, {13100,13115, 13117,13119, 13123,13137}},
    {42, {13148,13150, 13154,13156, 13186,13189, 13191,13204, 13206,13211}},
    {43, {13212,13242}},
    {44, {13243,13275}},
    {45, {13276,13287, 13306,13311, 13313,13325}},
    {46, {13326,13350, 13362,13368}},
    {47, {13369,13383, 13396,13411}},
    {48, {13519,13548}},
    {49, {13699,13704, 13715,13719}},
    {50, {14010,14040, 14041,14041}},
    {51, {14342,14372, 14386,14387}}
  };

  // DS2 (P3KJR)
  else if (dsNum == 2) runRanges = {
    {0, {14775,14786, 14788,14805}},
    {1, {14908,14925, 14936,14941, 14943,14948}},
    {2, {15043,15052, 15062,15083}},
    {3, {15188,15188, 15190,15193, 15195,15218}},
    {4, {15324,15326, 15338,15338, 15343,15364}},
    {5, {15471,15483, 15511,15519, 15613,15621, 15625,15625}},
    {6, {15635,15657}},
    {7, {15763,15767, 15769,15787, 15797,15803}}
  };

  // DS3 (P3KJR)
  else if (dsNum == 3) runRanges = {
    {0, {16797,16826, 16827,16835}},
    {1, {16857,16886}},
    {2, {16887,16910, 16931,16935, 16947,16952}},
    {3, {16957,16959, 16970,16999}},
    {4, {17000,17009, 17035,17057}},
    {5, {17060,17090}},
    {6, {17091,17121}},
    {7, {17122,17127, 17129,17131, 17138,17156}},
    {8, {17159,17181, 17305,17318}},
    {9, {17322,17343}},
    {10, {17351,17381}},
    {11, {17382,17412, 17413,17422}},
    {12, {17448,17477}},
    {13, {17478,17493}},
    {14, {17500,17519}},
    {15, {17531,17553, 17555,17559}},
    {16, {17567,17597}},
    {17, {17598,17628}},
    {18, {17629,17659}},
    {19, {17660,17686}},
    {20, {17703,17717, 17720,17721}},
    {21, {17852,17882}},
    {22, {17883,17913}},
    {23, {17914,17944}},
    {24, {17945,17948, 17967,17980}}
  };

  // DS4 (P3LQG)
  else if(dsNum == 4) runRanges = {
    {0, {60000802,60000821, 60000823,60000823, 60000827,60000828, 60000830,60000830}},
    {1, {60000970,60001000}},
    {2, {60001001,60001010}},
    {3, {60001033,60001054, 60001056,60001062}},
    {4, {60001063,60001086}},
    {5, {60001088,60001093}},
    {6, {60001094,60001124}},
    {7, {60001125,60001125, 60001163,60001181, 60001183,60001185}},
    {8, {60001187,60001205, 60001309,60001319}},
    {9, {60001331,60001350, 60001380,60001382}},
    {10, {60001384,60001414}},
    {11, {60001415,60001441}},
    {12, {60001463,60001489}},
    {13, {60001491,60001506}},
    {14, {60001523,60001542}},
    {15, {60001597,60001624}},
    {16, {60001625,60001655}},
    {17, {60001656,60001686}},
    {18, {60001687,60001714}},
    /*
    {19, {60001756,60001786}},
    {20, {60001787,60001817}},
    {21, {60001818,60001848, 60001849,60001853}},
    {22, {60001874,60001888}}
    */
  };

  // DS5 (P3LQK)
  else if(dsNum == 5) runRanges = {
    {0, {18623,18624, 18628,18629, 18645,18652}},
    {1, {18654,18685}},
    {2, {18686,18703, 18707,18707}},
    {3, {18761,18783}},
    {4, {18808,18834}},
    {5, {18835,18838, 18844,18844, 18883,18914}},
    {6, {18915,18918, 18920,18951, 18952,18957}},
    {7, {19240,19240, 19264,19280, 19305,19318}},
    {8, {19320,19351}},
    {9, {19352,19383}},
    {10, {19384,19385, 19387,19415}},
    {11, {19416,19425, 19428,19430, 19436,19445}},
    {12, {19481,19496, 19502,19515}},
    {13, {19613,19644}},
    {14, {19645,19676}},
    {15, {19677,19677, 19696,19697, 19707,19722}},
    {16, {19733,19747, 19771,19773}},
    {17, {19775,19801, 19806,19806}},
    {18, {19832,19860}},
    {19, {19862,19893}},
    {20, {19894,19899, 19901,19907}},
    {21, {19968,19998}},
    {22, {19999,19999, 20021,20040}},
    {23, {20074,20105}},
    {24, {20106,20130, 20132,20134}},
    {25, {20136,20167}},
    {26, {20168,20199}},
    {27, {20218,20237}},
    {28, {20239,20270}},
    {29, {20271,20286, 20311,20316, 20319,20332}},
    {30, {20335,20365}},
    {31, {20366,20375, 20377,20397}},
    {32, {20398,20415}},
    {33, {20417,20445}},
    {34, {20483,20487, 20489,20491, 20494,20509}},
    {35, {20522,20537}},
    {36, {20611,20629, 20686,20691}},
    {37, {20755,20756, 20758,20786}},
    {38, {20787,20795, 20797,20828}},
    {39, {20829,20860}},
    {40, {20861,20876, 20877,20882}},
    {41, {20884,20915}},
    {42, {20916,20927, 20929,20957}},
    {43, {20964,20995}},
    {44, {20996,21012}},
    {45, {21014,21045}},
    {46, {21046,21058}},
    {47, {21060,21091}},
    {48, {21092,21104}},
    {49, {21106,21136}},
    {50, {21158,21167, 21169,21178, 21201,21201}},
    {51, {21217,21248}},
    {52, {21249,21278}},
    {53, {21280,21311}},
    {54, {21312,21343}},
    {55, {21344,21375}},
    {56, {21376,21389, 21391,21407}},
    {57, {21408,21424, 21426,21435, 21452,21453}},
    {58, {21469,21499}},
    {59, {21501,21532}},
    {60, {21533,21564}},
    {61, {21565,21585, 21587,21587}},
    {62, {21595,21614, 21617,21618, 21622,21628}},
    {63, {21630,21661}},
    {64, {21662,21674, 21691,21692, 21694,21705}},
    {65, {21747,21776}},
    {66, {21778,21800, 21833,21837}},
    {67, {21839,21853, 21856,21857, 21862,21879}},
    {68, {21891,21893, 21895,21908, 21922,21937}},
    {69, {21940,21940, 21953,21968}},
    {70, {22001,22032}},
    {71, {22033,22064}},
    {72, {22065,22095}},
    {73, {22097,22100, 22102,22122}},
    {74, {22127,22142}},
    {75, {22147,22171, 22173,22176}},
    {76, {22180,22213}},
    {77, {22214,22247}},
    {78, {22248,22250, 22266,22280, 22304,22304, 22316,22333}},
    {79, {22340,22356, 22369,22392}},
    {80, {22400,22428}},
    {81, {22430,22463}},
    {82, {22464,22488}},
    {83, {22490,22512, 22636,22644, 22647,22650}},
    {84, {22652,22653, 22655,22670, 22673,22674}},
    {85, {22678,22711}},
    {86, {22712,22742}},
    {87, {22744,22750, 22753,22755, 22760,22763, 22765,22777, 22814,22815}},
    {88, {22817,22834, 22838,22838, 22840,22840, 22853,22853, 22867,22867}},
    {89, {22876,22909}},
    {90, {22910,22943}},
    {91, {22944,22946, 22952,22952, 22954,22954, 22959,22982, 22984,22986}},
    {92, {22993,22996, 23085, 23101}},
    {93, {23111,23144}},
    {94, {23145,23175, 23211,23212}},
    {95, {23218,23232 ,23246,23260, 23262,23262}},
    {96, {23282,23306}},
    {97, {23308,23334}},
    {98, {23338,23370}},
    {99, {23372,23405}},
    {100, {23406,23433}},
    {101, {23440,23458, 23461,23462, 23469,23480}},
    {102, {23511,23513, 23520,23521, 23525,23542, 23548,23548}},
    {103, {23551,23584}},
    {104, {23585,23618}},
    {105, {23619,23642}},
    {106, {23645,23668, 23675,23690}},
    {107, {23704,23715, 23718,23719, 23721,23721}},
    {108, {23725,23758}},
    {109, {23759,23792}},
    {110, {23793,23826}},
    {111, {23827,23849, 23851,23867}},
    {112, {23869,23881, 23939,23940, 23942,23958}}
  };

  // DS6 (P3LTP)
  else if(dsNum == 6) runRanges = {
    {0, {25704,25737}},
    {1, {25738,25771}},
    {2, {25772,25792}},
    {3, {25794,25827}},
    {4, {25828,25832, 25936,25936, 26022,26022, 26023,26038, 26052,26066}},
    {5, {26163,26169, 26171,26177, 26179,26190}}
  };

  else {
    cout << "Error: LoadDataSet(): Unknown dataset: " << dsNum << endl;
    return;
  }

  // Now add the runs to the GATDataSet object
  // Increment by 2, always assume pairwise
  // If subDS number is <0, add all subDSs in the DS
  if(subNum<0)
    for(auto& subDS : runRanges)
      for (size_t i = 0; i < subDS.second.size(); i+=2)
	ds.AddRunRange(subDS.second[i], subDS.second[i+1]);
  else
    for (size_t i = 0; i < runRanges[subNum].size(); i+=2)
      ds.AddRunRange(runRanges[subNum][i], runRanges[subNum][i+1]);
}


vector<int> LoadDetectorList(int module)
{
  vector<int> detectorList;
  if (module==1) detectorList = {
    1426981, 1425750, 1426612, 1425380, 28474, 1426640, 1426650, 1426622,
    28480, 1426980, 1425381, 1425730, 28455, 28470, 28463, 28465, 28469,
    28477, 1425751, 1426610, 1425731, 1425742, 1426611, 1425740, 1426620,
    28482, 1425741, 1426621, 1425370
    };
  else if (module==2) detectorList = {
    28459, 1426641, 1427481, 1427480, 28481, 28576, 28594, 28595, 28461, 1427490,
    1427491, 1428530, 28607, 28456, 28621, 28466, 28473, 28487, 1426651, 1428531,
    1427120, 1235170, 1429091, 1429092, 1426652, 28619, 1427121, 1429090, 28717
    };
  return detectorList;
}


void GetTotalActiveMass(int dsNum, double& m1Total, double& m1Enr, double& m1Nat,
  double& m2Total, double& m2Enr, double& m2Nat)
{
  m1Total=0, m1Enr=0, m1Nat=0, m2Total=0, m2Enr=0, m2Nat=0;

  if (dsNum == 0)      { m1Total = 14.60;  m1Enr = 10.69;  m1Nat = 3.91; }
  else if (dsNum == 1) { m1Total = 13.02;  m1Enr = 11.90;  m1Nat = 1.12; }
  else if (dsNum == 2) { m1Total = 12.43;  m1Enr = 11.31;  m1Nat = 1.12; }
  else if (dsNum == 3) { m1Total = 15.41;  m1Enr = 12.63;  m1Nat = 2.78; }
  else if (dsNum == 4) { m2Total = 9.421;  m2Enr = 5.471;  m2Nat = 3.95; }
  else if (dsNum == 5) { m1Total = 16.54;  m1Enr = 12.63;  m1Nat = 3.91;
                         m2Total = 10.90;  m2Enr = 5.81;   m2Nat = 5.09; }
  else if (dsNum == 6) { m1Total = 15.98;  m1Enr = 12.63;  m1Nat = 3.35;
                         m2Total = 10.90;  m2Enr = 5.81;   m2Nat = 5.09; }
  else cout << "Error: GetTotalActiveMass(): Unknown dataset: " << dsNum << endl;
}


map<int,double> LoadActiveMasses(int dsNum)
{
  map<int,double> activeMassForDetID_g;
  if (dsNum==0 || dsNum==1 || dsNum==2 || dsNum==3) {
    activeMassForDetID_g = {
      {1426981, 510}, {1425750, 979}, {1426612, 811}, {1425380, 968},
      {28474, 560}, {1426640, 723}, {1426650, 659}, {1426622, 689},
      {28480, 551}, {1426980, 886}, {1425381, 949}, {1425730, 1024},
      {28455, 558}, {28470, 564}, {28463, 567}, {28465, 545}, {28469, 557},
      {28477, 553}, {1425751, 730}, {1426610, 632}, {1425731, 982},
      {1425742, 732}, {1426611, 675}, {1425740, 701}, {1426620, 572.2},
      {28482, 561}, {1425741, 710}, {1426621, 590.8}, {1425370, 964} };
  }
  else if (dsNum == 4) {
    activeMassForDetID_g = {
      {28459, 556}, {1426641, 576}, {1427481, 903}, {1427480, 917},
      {28481, 581}, {28576, 562}, {28594, 559}, {28595, 558}, {28461, 577},
      {1427490, 872}, {1427491, 852}, {1428530, 996}, {28607, 558},
      {28456, 579}, {28621, 565}, {28466, 566}, {28473, 562}, {28487, 557},
      {1426651, 591}, {1428531, 1031}, {1427120, 802}, {1235170, 462.2},
      {1429091, 775}, {1429092, 821}, {1426652, 778}, {28619, 566},
      {1427121, 968}, {1429090, 562}, {28717, 567} };
  }
  else if (dsNum == 5 || dsNum == 6) {
    activeMassForDetID_g = {
      // M1
      {1426981, 510}, {1425750, 979}, {1426612, 811}, {1425380, 968},
      {28474, 560}, {1426640, 723}, {1426650, 659}, {1426622, 689},
      {28480, 551}, {1426980, 886}, {1425381, 949}, {1425730, 1024},
      {28455, 558}, {28470, 564}, {28463, 567}, {28465, 545}, {28469, 557},
      {28477, 553}, {1425751, 730}, {1426610, 632}, {1425731, 982},
      {1425742, 732}, {1426611, 675}, {1425740, 701}, {1426620, 572.2},
      {28482, 561}, {1425741, 710}, {1426621, 590.8}, {1425370, 964},
      // M2
      {28459, 556}, {1426641, 576}, {1427481, 903},{1427480, 917},
      {28481, 581}, {28576, 562}, {28594, 559}, {28595, 558}, {28461, 577},
      {1427490, 872}, {1427491, 852}, {1428530, 996}, {28607, 558},
      {28456, 579}, {28621, 565}, {28466, 566}, {28473, 562}, {28487, 557},
      {1426651, 591}, {1428531, 1031}, {1427120, 802}, {1235170, 462.2},
      {1429091, 775}, {1429092, 821}, {1426652, 778}, {28619, 566},
      {1427121, 968}, {1429090, 562}, {28717, 567} };
  }
  else cout << "Error: LoadActiveMasses(): unknown dataset number: " << dsNum << endl;

  return activeMassForDetID_g;
}


map<int,double> LoadActiveMassUncertainties(int dsNum)
{
  map<int,double> activeMassUncForDetID_g;
  if (dsNum==0 || dsNum==1 || dsNum==2 || dsNum==3) {
    activeMassUncForDetID_g = {
      {1426981, 10}, {1425750, 13}, {1426612, 12}, {1425380, 13},       // C1P1
      {28474, 13}, {1426640, 11}, {1426650, 11}, {1426622, 10},         // C1P2
      {28480, 13}, {1426980, 12}, {1425381, 13}, {1425730, 14},         // C1P3
      {28455, 13}, {28470, 13}, {28463, 13}, {28465, 12}, {28469, 13},  // C1P4
      {28477, 13}, {1425751, 11}, {1426610, 11}, {1425731, 13},         // C1P5
      {1425742, 11}, {1426611, 12}, {1425740, 11}, {1426620, 9.4},      // C1P6
      {28482, 13}, {1425741, 11}, {1426621, 9}, {1425370, 13} };        // C1P7
  }
  else if (dsNum == 4) {
    activeMassUncForDetID_g = {
      {28459, 13}, {1426641, 9}, {1427481, 12}, {1427480, 12},          // C2P1
      {28481, 13}, {28576, 13}, {28594, 13}, {28595, 13}, {28461, 13},  // C2P2
      {1427490, 12}, {1427491, 11}, {1428530, 12},                      // C2P3
      {28607, 13}, {28456, 13}, {28621, 13}, {28466, 13}, {28473, 13},  // C2P4
      {28487, 13}, {1426651, 10}, {1428531, 13}, {1427120, 11},         // C2P5
      {1235170, 8.4}, {1429091, 12}, {1429092, 11}, {1426652, 11},      // C2P6
      {28619, 13}, {1427121, 12}, {1429090, 10}, {28717, 13} };         // C2P7
  }
  else if (dsNum == 5 || dsNum == 6) {
    activeMassUncForDetID_g = {
      // M1
      {1426981, 10}, {1425750, 13}, {1426612, 12}, {1425380, 13},       // C1P1
      {28474, 13}, {1426640, 11}, {1426650, 11}, {1426622, 10},         // C1P2
      {28480, 13}, {1426980, 12}, {1425381, 13}, {1425730, 14},         // C1P3
      {28455, 13}, {28470, 13}, {28463, 13}, {28465, 12}, {28469, 13},  // C1P4
      {28477, 13}, {1425751, 11}, {1426610, 11}, {1425731, 13},         // C1P5
      {1425742, 11}, {1426611, 12}, {1425740, 11}, {1426620, 9.4},      // C1P6
      {28482, 13}, {1425741, 11}, {1426621, 9}, {1425370, 13},        // C1P7
      // M2
      {28459, 13}, {1426641, 9}, {1427481, 12}, {1427480, 12},          // C2P1
      {28481, 13}, {28576, 13}, {28594, 13}, {28595, 13}, {28461, 13},  // C2P2
      {1427490, 12}, {1427491, 11}, {1428530, 12},                      // C2P3
      {28607, 13}, {28456, 13}, {28621, 13}, {28466, 13}, {28473, 13},  // C2P4
      {28487, 13}, {1426651, 10}, {1428531, 13}, {1427120, 11},         // C2P5
      {1235170, 8.4}, {1429091, 12}, {1429092, 11}, {1426652, 11},      // C2P6
      {28619, 13}, {1427121, 12}, {1429090, 10}, {28717, 13}            // C2P7
    };
  }
  else cout << "Error: LoadActiveMassUncertainties(): unknown dataset number: " << dsNum << endl;

  return activeMassUncForDetID_g;
}


map<int, bool> LoadBadDetectorMap(int dsNum)
{
  map<int,bool> detIDIsBad;
  if(dsNum == 0)
    detIDIsBad = { {28474,1},   {1426622,1}, {28480,1},      // 1 is true
                   {1426980,1}, {1426620,1}, {1425370,1} };

  else if(dsNum == 1)
    detIDIsBad = { {1426981,1}, {1426622,1}, {28455,1},
                   {28470,1},   {28463,1},   {28465,1},
                   {28469,1},   {28477,1},   {1425751,1},
                   {1425731,1}, {1426611,1} };

  else if (dsNum == 2)
    detIDIsBad = { {1426981,1}, {1426622,1}, {28455,1},
                   {28470,1},   {28463,1},   {28465,1},
                   {28469,1},   {28477,1},   {1425731,1},
                   {1426611,1} };

  else if (dsNum == 3)
    detIDIsBad = { {1426981,1}, {1426622,1}, {28477,1},
                   {1425731,1}, {1426611,1} };

  else if (dsNum == 4)
    detIDIsBad = { {28595,1},   {28461,1},   {1428530,1},
                   {28621,1},   {28473,1},   {1426651,1},
                   {1429092,1}, {1426652,1}, {28619,1} };

  else if (dsNum == 5)
    detIDIsBad = { {1426981,1}, {1426622,1}, {28477,1},
		               {1425731,1}, {1426611,1}, {28595,1},
		               {28461,1},   {1428530,1}, {28621,1},
		               {28473,1},   {1426651,1}, {1429092,1},
		               {1426652,1}, {28619,1},   {1427121,1} };

  else if (dsNum == 6)
    detIDIsBad = { {1426981,1}, {28474,1}, {1426622,1},
		   {28477,1}, {1425731,1}, {1426611,1},
 		   {28595,1}, {28461,1}, {1428530,1},
		   {28621,1}, {28473,1}, {1426651,1},
		   {1429092,1}, {1426652,1}, {28619,1},
		   {1427121,1}};

  else cout << "Error: LoadBadDetectorMap(): Unknown dataset number: " << dsNum << endl;
  return detIDIsBad;
}


map<int,bool> LoadVetoDetectorMap(int dsNum)
{
  map<int,bool> detIDIsVetoOnly;
  if (dsNum == 0)      detIDIsVetoOnly = { {1425381,1}, {1425742,1} };
  else if (dsNum == 1) detIDIsVetoOnly = { {28480,1} };
  else if (dsNum == 2) detIDIsVetoOnly = { {28480,1},   {1425751,1}, {1426621,1} };
  else if (dsNum == 3) detIDIsVetoOnly = { {28480,1},   {28470,1},   {28463,1} };
  else if (dsNum == 4) detIDIsVetoOnly = { {28459,1},   {1426641,1}, {1427481,1},
                                           {28456,1},   {1427120,1}, {1427121,1} };
  else if (dsNum == 5) detIDIsVetoOnly = { {28480,1},   {1426641,1}, {1427481,1},
					   {1235170,1} };
  else if (dsNum == 6) detIDIsVetoOnly = { {28480,1},   {1426641,1}, {1427481,1},
					   {1235170,1} };
  else cout << "Error: LoadVetoDetectorMap(): Unknown dataset number: " << dsNum << endl;
  return detIDIsVetoOnly;
}


std::string GetChannelSelectionPath(int dsNum, int officialVersion = -1){

    //First, check whether an official version has been requested.
    //Official versions start at 1, and get a version tag of the form
    //v_00000001-<officialVersion, with leading zeros to a total of 5 digits>
    //e.g. v_00000001-00001 for the first official version.
    //They are stored in $MJDDATADIR/surfmjd/analysis/channelselection,
    //using the same directory structure as current versions.  This way the
    //official record is kept in the official place, and if development
    //versions are also being put there in the future, the automatic "most
    //recent version" check will not clash with the existence of official
    //versions.  Furthermore, v_00000000 series versions can be reserved for
    //testing purposes.
    //=======================================================================
    //Log which official version corresponds to which final analysis here.
    //=======================================================================
    //v_00000001-00001: 2017 neutrinoless double beta decay paper
    //-----------------------------------------------------------------------
    if(officialVersion > 0){

        char const* tmpPath = std::getenv("MJDDATADIR");

        //If MJDDATADIR is somehow not set, default to looking at the most
        //recent version.
        if(tmpPath == NULL){
            std::cout << "ERROR: Environment variable MJDDATADIR not set, so cannot find official channel selection version." << std::endl;
            std::cout << "Defaulting to most recent version of channel selection." << std::endl;
        }

        //Otherwise, built the correct path to the files, and return that.
        else{

            std::string pathToFiles(tmpPath);
            std::string verString = std::to_string(officialVersion);
            std::string fullVerString = std::string(5-verString.length(),'0') + verString;
            pathToFiles += "/surfmjd/analysis/channelselection/DS" + std::to_string(dsNum) + "/v_00000001-" + fullVerString;

            //We now have the full path to the files for this dataset.  Return
            //it.
            return pathToFiles;
        }


    }

    //Where the channel selection information is stored.
    std::string baseDir("/global/projecta/projectdirs/majorana/users/jwmyslik/analysis/channelselection/");

    //Next, get everything in that directory.
    glob_t dirGlob;

    glob((baseDir + "DS" + std::to_string(dsNum) + "/*").c_str(), GLOB_TILDE, NULL, &dirGlob);

    std::vector<std::string> dirList;
    for(unsigned int i =0; i < dirGlob.gl_pathc; i++){

        dirList.push_back(dirGlob.gl_pathv[i]);
    }

    //Free the structure.
    if(dirGlob.gl_pathc > 0){
        globfree(&dirGlob);
    }

    //Now, loop through the directory list, and find the largest version
    //number.
    int newestDate = 0;
    int newestVersion = 0;
    int currentDate = 0;
    int currentVersion = 0;

    unsigned int bestIndex = 0;

    for(unsigned int i = 0; i < dirList.size(); i++){

        //Get the date and version number from the path. Since the end of the
        //string will always be YYYYMMDD-VVVVV, this will always separate out
        //date and version.
        std::string dateString = dirList[i].substr(dirList[i].length() - 14, 8);
        std::string verString = dirList[i].substr(dirList[i].length() - 5, 5);

        currentDate = atoi(dateString.c_str());
        currentVersion = atoi(verString.c_str());

        //If it's a newer date, reset newestDate and newestVersion
        if(currentDate > newestDate){
            newestDate = currentDate;
            newestVersion = currentVersion;
            bestIndex = i;
        }

        //If it's the same date, but a newer version, just change the version.
        else if(currentDate == newestDate){

            if(currentVersion > newestVersion){
                newestVersion = currentVersion;
                bestIndex = i;
            }
        }
    }

    //If there's nothing in dirList (because glob didn't find any directory
    //candidates) just return the base directory.  File loading will then
    //proceed to fail as gracefully as possible.
    if(dirList.size() < 1){
        return baseDir;
    }
    else{
        return dirList[bestIndex];
    }
}


map<int, bool> LoadEnrNatMap()
{
  // "1" denotes enriched, "0" denotes natural.
  map<int,bool> EnrNatMap = {
    // M1
    {1426981, 1}, {1425750, 1}, {1426612, 1}, {1425380, 1},
    {28474, 0}, {1426640, 1}, {1426650, 1}, {1426622, 1},
    {28480, 0}, {1426980, 1}, {1425381, 1}, {1425730, 1},
    {28455, 0}, {28470, 0}, {28463, 0}, {28465, 0}, {28469, 0},
    {28477, 0}, {1425751, 1}, {1426610, 1}, {1425731, 1},
    {1425742, 1}, {1426611, 1}, {1425740, 1}, {1426620, 1},
    {28482, 0}, {1425741, 1}, {1426621, 1}, {1425370, 1},
    // M2
    {28459, 0}, {1426641, 1}, {1427481, 1},{1427480, 1},
    {28481, 0}, {28576, 0}, {28594, 0}, {28595, 0}, {28461, 0},
    {1427490, 1}, {1427491, 1}, {1428530, 1}, {28607, 0},
    {28456, 0}, {28621, 0}, {28466, 0}, {28473, 0}, {28487, 0},
    {1426651, 1}, {1428531, 1}, {1427120, 1}, {1235170, 1},
    {1429091, 1}, {1429092, 1}, {1426652, 1}, {28619, 0},
    {1427121, 1}, {1429090, 1}, {28717, 0}
  };
  return EnrNatMap;
}


int CheckModule(int detID)
{
  vector<int> m1 = LoadDetectorList(1);
  vector<int> m2 = LoadDetectorList(2);

  bool isM1=false, isM2=false;
  isM1 = (find(m1.begin(), m1.end(), detID) != m1.end());
  if (!isM1) isM2 = (find(m2.begin(), m2.end(), detID) != m2.end());

  if (isM1) return 1;
  else if (isM2) return 2;
  else return 0;
}


void GetVetoActiveMass(map<int,double> actM4Det_g, map<int,bool> detIDIsVetoOnly,
  double &mVeto_M1Total_kg, double &mVeto_M2Total_kg)
{
  // Assumes you have ALREADY loaded the DS-appropriate list into the two maps,
  // using LoadVetoDetectorMap(dsNum) and LoadActiveMasses(dsNum);
  // Loops over the veto-only detector map, finds this detector's home,
  // and adds to the appropriate mass variable.
  for (auto const& x : detIDIsVetoOnly) {
    int detID = x.first;
    double detMass_kg = actM4Det_g[detID]/1000;
    int module = CheckModule(detID);
    // cout << detID << "  " << detMass_kg << "  " << module << endl;
    if (module==1) mVeto_M1Total_kg += detMass_kg;
    else if (module==2) mVeto_M2Total_kg += detMass_kg;
    else {
      cout << "Error: GetVetoActiveMass():  Unknown detector ID " << detID << endl;
      return;
    }
  }
}


double GetENFC(int chan, int dsNum, double trapENF, int run)
{
  map<int, vector<double> > calPars;
  if (dsNum == 0) {
    calPars = {
    {692, {0.0320538, 1.00002}},
    {693, {0.0427945, 0.999949}},
    {690, {0.128246, 0.999961}},
    {691, {0.0375652, 1.00001}},
    {688, {0.201028, 0.999761}},
    {689, {0.583077, 0.999786}},
    {640, {0.203801, 0.999857}},
    {641, {0.232093, 0.999821}},
    {584, {0, 1}},
    {585, {0, 1}},
    {674, {0.159422, 0.99993}},
    {675, {0.548353, 0.999614}},
    {576, {0.0120585, 1.00017}},
    {577, {0.0531825, 1.00006}},
    {680, {0, 1}},
    {681, {0, 1}},
    {676, {0, 1}},
    {677, {0, 1}},
    {616, {0, 1}},
    {617, {0, 1}},
    {614, {0, 1}},
    {615, {0, 1}},
    {610, {0.0769096, 1.00004}},
    {611, {0.321497, 0.99984}},
    {608, {0.160438, 0.999754}},
    {609, {0.216336, 0.999687}},
    {598, {0.193552, 0.99981}},
    {599, {0.275468, 0.999603}},
    {600, {0.201133, 0.999669}},
    {601, {0.394874, 0.9994}},
    {594, {0.174296, 0.999779}},
    {595, {0.169833, 0.99971}},
    {592, {0.184312, 0.999811}},
    {593, {0.185877, 0.999881}},
    {664, {0.264481, 0.999618}},
    {665, {0.384402, 0.999521}},
    {662, {0.158778, 0.999923}},
    {663, {0.326837, 0.999561}},
    {656, {0, 1}},
    {657, {0, 1}},
    {696, {0.115181, 0.999965}},
    {697, {0.316811, 0.999866}},
    {628, {0, 1}},
    {629, {0, 1}},
    {626, {0.0885345, 0.999971}},
    {627, {0.107155, 1.00002}},
    {624, {0.0926588, 0.999871}},
    {625, {0.0866656, 0.999882}},
    {632, {0, 1}},
    {633, {0, 1}},
    {646, {0.112019, 0.99984}},
    {647, {0.0908081, 0.9998}},
    {644, {0.0539654, 1.00005}},
    {645, {0.203424, 0.999918}},
    {642, {-0.00283525, 1.00019}},
    {643, {-0.00926344, 1.00028}},
    {630, {0, 1}},
    {631, {0, 1}}
    };
  }
  else if (dsNum == 1) {
    calPars = {
    {584, {0, 1}},
    {585, {0, 1}},
    {582, {0.0692192, 1.00001}},
    {583, {0, 1}},
    {580, {0.256116, 0.999628}},
    {581, {0.255528, 0.99963}},
    {578, {0.104705, 0.999925}},
    {579, {0.769919, 0.999264}},
    {692, {0.16044, 0.999753}},
    {693, {0.205654, 0.999664}},
    {648, {0.169936, 0.999909}},
    {649, {0.228451, 0.999956}},
    {640, {0.111161, 1}},
    {641, {0.127649, 0.999977}},
    {642, {0, 1}},
    {643, {0, 1}},
    {616, {0, 1}},
    {617, {0, 1}},
    {610, {-0.0111851, 0.999935}},
    {611, {0.227559, 0.99967}},
    {608, {0.238825, 0.999855}},
    {609, {0.593699, 0.999553}},
    {664, {0.221149, 0.999867}},
    {665, {0.415651, 0.999722}},
    {624, {0, 1}},
    {625, {0, 1}},
    {628, {0, 1}},
    {629, {0, 1}},
    {688, {0, 1}},
    {689, {0, 1}},
    {694, {0, 1}},
    {695, {0, 1}},
    {614, {0, 1}},
    {615, {0, 1}},
    {680, {0, 1}},
    {681, {0, 1}},
    {678, {0, 1}},
    {679, {0, 1}},
    {672, {0.0578913, 0.999928}},
    {673, {0.0127141, 0.999952}},
    {696, {0, 1}},
    {697, {0, 1}},
    {632, {0.0847604, 1.00006}},
    {633, {0.168663, 0.999974}},
    {630, {0, 1}},
    {631, {0, 1}},
    {626, {0.0232126, 0.999838}},
    {627, {0.362639, 0.99953}},
    {690, {0.116423, 0.999818}},
    {691, {0.0836658, 0.999855}},
    {600, {0.109693, 0.999843}},
    {601, {0.00960901, 0.999784}},
    {598, {0.157919, 0.999867}},
    {599, {0.103593, 0.99996}},
    {594, {0.121784, 0.999973}},
    {595, {0, 1}},
    {592, {0.226872, 0.999897}},
    {593, {0.350193, 0.999844}},
    };
  }
  else if (dsNum == 2) {
    calPars = {
    {584, {0, 1}},
    {585, {0, 1}},
    {582, {0.137717, 0.999947}},
    {583, {0, 1}},
    {580, {0.274488, 0.99959}},
    {581, {0.351362, 0.999553}},
    {578, {0.114315, 0.999959}},
    {579, {0.820523, 0.999425}},
    {692, {0.171477, 0.999773}},
    {693, {0.164027, 0.999684}},
    {648, {0.175393, 0.999917}},
    {649, {0.225951, 0.999945}},
    {640, {0.114086, 1.00003}},
    {641, {0.136414, 0.999964}},
    {642, {0, 1}},
    {643, {0, 1}},
    {616, {0, 1}},
    {617, {0, 1}},
    {610, {-0.00332502, 0.99994}},
    {611, {0.299493, 0.999627}},
    {608, {0.258006, 0.99983}},
    {609, {0.581654, 0.999558}},
    {664, {0.236161, 0.999863}},
    {665, {0.408645, 0.999755}},
    {624, {0, 1}},
    {625, {0, 1}},
    {628, {0, 1}},
    {629, {0, 1}},
    {688, {0, 1}},
    {689, {0, 1}},
    {694, {0, 1}},
    {695, {0, 1}},
    {614, {0, 1}},
    {615, {0, 1}},
    {680, {0, 1}},
    {681, {0, 1}},
    {678, {0, 1}},
    {679, {0, 1}},
    {672, {0.0489969, 0.999939}},
    {673, {0.0642795, 0.999889}},
    {696, {0, 1}},
    {697, {0, 1}},
    {632, {0.0292551, 1.00013}},
    {633, {0.160856, 0.999939}},
    {630, {0, 1}},
    {631, {0, 1}},
    {626, {0.00858564, 0.999896}},
    {627, {0.336842, 0.999348}},
    {690, {0.151934, 0.999723}},
    {691, {0.114298, 0.99985}},
    {600, {0.133535, 0.999789}},
    {601, {0.231477, 0.999348}},
    {598, {0.094142, 0.999942}},
    {599, {0.187471, 0.99992}},
    {594, {0.123212, 0.999873}},
    {595, {0, 1}},
    {592, {0.231513, 0.999858}},
    {593, {0.425084, 0.999768}},
    };
  }
  else if (dsNum == 3) {
    calPars = {
    {584, {0, 1}},
    {585, {0, 1}},
    {582, {0.0824061, 0.99999}},
    {583, {0, 1}},
    {580, {0.280904, 0.999527}},
    {581, {0.293833, 0.999596}},
    {578, {0.0944534, 0.999945}},
    {579, {0.785058, 0.99942}},
    {692, {0.143012, 0.99984}},
    {693, {0.134962, 0.999704}},
    {648, {0.202578, 0.999808}},
    {649, {0.247635, 0.999909}},
    {640, {0.107693, 0.999943}},
    {641, {0.110002, 0.999976}},
    {642, {0, 1}},
    {643, {0, 1}},
    {616, {0, 1}},
    {617, {0, 1}},
    {610, {0.0195341, 0.99992}},
    {611, {0.249633, 0.9997}},
    {608, {0.227452, 0.999874}},
    {609, {0.559968, 0.999578}},
    {664, {0.235335, 0.999857}},
    {665, {0.398, 0.999769}},
    {624, {0.126908, 0.999828}},
    {625, {0.196658, 0.999738}},
    {628, {0.127671, 0.999818}},
    {629, {0.223934, 0.999765}},
    {688, {0.242602, 0.999397}},
    {689, {0.346718, 0.999353}},
    {694, {0.19814, 0.999695}},
    {695, {0.176077, 0.99966}},
    {614, {0.185446, 0.999797}},
    {615, {0.44403, 0.999162}},
    {680, {0, 1}},
    {681, {0, 1}},
    {678, {0.226838, 0.999824}},
    {679, {0.224563, 0.99986}},
    {672, {0.0432904, 0.999969}},
    {673, {0.0751804, 0.99988}},
    {696, {0, 1}},
    {697, {0, 1}},
    {632, {0.0723055, 1.00001}},
    {633, {0.170188, 1.00005}},
    {630, {0, 1}},
    {631, {0, 1}},
    {626, {0.0137395, 0.999923}},
    {627, {0.350495, 0.999527}},
    {690, {0.109113, 0.999776}},
    {691, {0.10175, 0.999859}},
    {600, {0.117406, 0.999855}},
    {601, {0.196519, 0.999461}},
    {598, {0.0217008, 0.999969}},
    {599, {0.167413, 0.999964}},
    {594, {0.11974, 0.999851}},
    {595, {0, 1}},
    {592, {0.25538, 0.999888}},
    {593, {0.48569, 0.999774}}
    };
  }
  else if (dsNum == 4) {
    calPars = {
    {1140, {0.226971, 0.999839}},
    {1141, {0.327113, 0.999328}},
    {1142, {0.0918498, 0.999891}},
    {1143, {0.101249, 0.99996}},
    {1110, {0.0430465, 0.999697}},
    {1111, {-0.133398, 1.00014}},
    {1204, {0.0631427, 0.999934}},
    {1205, {0.0428715, 0.999734}},
    {1174, {0.0697171, 0.999847}},
    {1175, {-0.0225664, 0.999978}},
    {1144, {-0.070324, 1.00011}},
    {1145, {0.0241721, 0.999998}},
    {1106, {0.238358, 0.999615}},
    {1107, {0.259474, 0.999515}},
    {1108, {0, 1}},
    {1109, {0, 1}},
    {1138, {0, 1}},
    {1139, {0, 1}},
    {1176, {-0.177926, 1.00027}},
    {1177, {0.0693798, 0.999842}},
    {1172, {-0.000696706, 0.999836}},
    {1173, {0.102279, 0.999885}},
    {1202, {0, 1}},
    {1203, {0, 1}},
    {1170, {0.0606835, 0.99994}},
    {1171, {0.141782, 0.999827}},
    {1208, {0.105873, 0.999896}},
    {1209, {0.0408018, 0.999749}},
    {1206, {0, 1}},
    {1207, {0, 1}},
    {1136, {0.0118195, 0.999971}},
    {1137, {0.0696923, 0.999902}},
    {1168, {0, 1}},
    {1169, {0, 1}},
    {1330, {0.137842, 1}},
    {1331, {-0.00434627, 1.00013}},
    {1304, {0, 1}},
    {1305, {0, 1}},
    {1332, {0.153872, 0.999973}},
    {1333, {0.252765, 0.999969}},
    {1302, {0.139577, 0.999796}},
    {1303, {0.00480351, 0.99991}},
    {1296, {0.0341857, 0.999981}},
    {1297, {-0.0891311, 1.00023}},
    {1298, {0.0246312, 0.999976}},
    {1299, {-0.0238409, 0.999989}},
    {1328, {0, 1}},
    {1329, {0, 1}},
    {1234, {0, 1}},
    {1235, {0, 1}},
    {1268, {0, 1}},
    {1269, {0, 1}},
    {1238, {-0.00726507, 1.00026}},
    {1239, {0.122672, 0.999887}},
    {1236, {0.0149775, 0.999953}},
    {1237, {-0.109178, 1.00013}},
    {1232, {0.142708, 0.999785}},
    {1233, {0.10234, 0.99982}}
    };
  }
  else if (dsNum == 5) {
    calPars = {
    {664, {0, 1}},
    {665, {0, 1}},
    {662, {0.142604290285508, 0.999937529300463}},
    {663, {0.0145305969206611, 1.00006597944244}},
    {660, {0.277287362697455, 0.999953516262783}},
    {661, {0.252788922872904, 0.999906565466397}},
    {658, {0.0939857568276282, 0.99999207652651}},
    {659, {0.0580281149440099, 0.999914582340967}},
    {692, {0, 1}},
    {693, {0, 1}},
    {648, {0.229907795488028, 0.999948954408288}},
    {649, {0.317720263193481, 0.999880778825805}},
    {640, {0.125161583607562, 1.00001905666594}},
    {641, {0.144345397348915, 1.00000014786633}},
    {642, {0, 1}},
    {643, {0, 1}},
    {616, {0, 1}},
    {617, {0, 1}},
    {610, {0.0352781406267948, 1.00027324176036}},
    {611, {0.234499403484437, 1.00000324090865}},
    {608, {0.259073758851371, 0.999954488178394}},
    {609, {0.587761009796478, 0.999697159078401}},
    {584, {0.160295334998821, 0.999974968397189}},
    {585, {0.194505719570723, 0.999887568577697}},
    {624, {0.093763668186679, 0.999867494766538}},
    {625, {0.102348876794769, 0.999888940590452}},
    {628, {0.0995966070080619, 0.999874038277502}},
    {629, {0.176269035351339, 0.999912151785197}},
    {688, {0.1768413367911, 0.999674355055368}},
    {689, {0.253875141284802, 0.999509130608907}},
    {694, {0.156833473953897, 0.999749240881715}},
    {695, {0.178440189642792, 0.999518479177045}},
    {614, {0.184228974883923, 0.999781048251563}},
    {615, {0.340533329797417, 0.999434188280207}},
    {600, {0, 1}},
    {601, {0, 1}},
    {598, {0.123761025512423, 0.999972228957617}},
    {599, {0.273803423983667, 0.999720952244227}},
    {592, {0.0581842193836713, 0.999958309858522}},
    {593, {0.0948378283902035, 0.999810008498672}},
    {696, {0, 1}},
    {697, {0, 1}},
    {632, {0.0601629558571453, 1.00012669031585}},
    {633, {0.154888110103187, 1.0000505571678}},
    {630, {0, 1}},
    {631, {0, 1}},
    {626, {0.0216654742531851, 1.00004045431355}},
    {627, {0.25507653452225, 0.999606418946267}},
    {690, {0.104686219153093, 0.999891802777434}},
    {691, {0.0687605335248717, 0.99971897595141}},
    {680, {0.112648889770426, 0.999794816077674}},
    {681, {0.0487074267275051, 0.999879606858913}},
    {678, {0.093985137421183, 0.999997228964317}},
    {679, {0.155476533315972 , 0.99982612493865}},
    {674, {0.0300222300776473, 1.00005264371949}},
    {675, {0.216245995224279, 0.999829154439339}},
    {672, {0.192289849870524, 0.999938610968492}},
    {673, {0.398241344714477, 0.999773179604133}},
    {1124, {0.317009508500166, 0.999392839978865}},
    {1125, {0.267097056117026, 0.999419012028597}},
    {1126, {0.116871874191839, 0.99981129891061}},
    {1127, {0.153327190583031, 0.99974949696287}},
    {1110, {0.0527489053040752, 0.999861003935189}},
    {1111, {-0.0949469822738119, 1.00002881562785}},
    {1204, {0.0904649861243295, 0.999862028113318}},
    {1205, {-0.0318356541563287, 0.999967710423291}},
    {1174, {0.117267562959623, 0.999842248116454}},
    {1175, {0.00969510741822328, 0.999872915830017}},
    {1128, {0.149776764530427, 0.999628878842151}},
    {1129, {0.13518577662765, 0.999452477485993}},
    {1106, {0.307839517187398, 0.999431443609644}},
    {1107, {0.0763595043827763, 0.99978290493965}},
    {1108, {0, 1}},
    {1109, {0, 1}},
    {1122, {0, 1}},
    {1123, {0, 1}},
    {1176, {0.0408966429318517, 0.999966048097911}},
    {1177, {0.0671319834232154, 0.999898849752232}},
    {1172, {0.275844490657941, 0.999571469128757}},
    {1173, {0.13667606719069, 0.999486525308043}},
    {1202, {0, 1}},
    {1203, {0, 1}},
    {1170, {0.155102959410089, 0.999637764781532}},
    {1171, {0.0451958922185578, 0.999647926792573}},
    {1208, {0.12904320089132, 0.999805789952379}},
    {1209, {0.0749623789218048, 0.999743052977035}},
    {1206, {0, 1}},
    {1207, {0, 1}},
    {1120, {0.217871391277986, 0.999717417359177}},
    {1121, {0.181539861006023, 0.999706916743699}},
    {1168, {0, 1}},
    {1169, {0, 1}},
    {1330, {0.0793644315781014, 0.999856930196264}},
    {1331, {-0.103665551597626, 0.99989268480908}},
    {1304, {0, 1}},
    {1305, {0, 1}},
    {1332, {0.169905900901357, 0.999957990345314}},
    {1333, {0.147941350954604, 0.999940515237288}},
    {1302, {0.10954465351141, 0.999814443344179}},
    {1303, {-0.0842931569369, 0.999893027919817}},
    {1296, {0.146161763819631, 0.999835258829234}},
    {1297, {-0.0852864007486358, 1.0000967155201}},
    {1298, {0.0164790025285359, 0.999880844523238}},
    {1299, {-0.110101094723615, 0.999990944061758}},
    {1328, {0, 1}},
    {1329, {0, 1}},
    {1234, {0, 1}},
    {1235, {0, 1}},
    {1268, {0, 1}},
    {1269, {0, 1}},
    {1238, {0, 1}},
    {1239, {0, 1}},
    {1236, {0.0199923558696952, 0.999897616034896}},
    {1237, {-0.134673568020886, 1.00012817158688}},
    {1232, {0.047805823654257, 0.999914798657215}},
    {1233, {0.0434715257494394, 0.999855502827961}}
    };
    if (run > 22392) {
      calPars = {
      {664, {0, 1}},
      {665, {0, 1}},
      {662, {0.180386543650014, 0.999897228657513}},
      {663, {-0.0544145849295635, 1.00013586434517}},
      {660, {0.265538366148011, 0.999969110951683}},
      {661, {0.296775406874106, 0.99988267306932}},
      {658, {0.0934098356017874, 0.999960394731515}},
      {659, {0.0300455711785457, 0.999956551004975}},
      {692, {0, 1}},
      {693, {0, 1}},
      {648, {0.214582838762003, 0.999900761314439}},
      {649, {0.309854509618929, 0.999810044986209}},
      {640, {0.133729583125543, 1.00002126410003}},
      {641, {0.118571695330723, 1.00009633143488}},
      {642, {0, 1}},
      {643, {0, 1}},
      {616, {0, 1}},
      {617, {0, 1}},
      {610, {0.0261273298430477, 0.999989046070071}},
      {611, {0.242707365569388, 0.999718902416137}},
      {608, {0.231090370705334, 0.99988187761701}},
      {609, {0.590821265540749, 0.99961807305526}},
      {584, {0.180474676172615, 0.999914230699449}},
      {585, {0.209647466774025, 0.999898705090925}},
      {624, {0.121681903993819, 0.999839212697473}},
      {625, {0.088839029323897, 0.999897156474079}},
      {628, {0.107004688191092, 0.99986711455743}},
      {629, {0.167307221771466, 0.999880339639956}},
      {688, {0.215397422059314, 0.999757106010012}},
      {689, {0.170973285712847, 0.999558687714302}},
      {694, {0.186633614442797, 0.999700903618868}},
      {695, {0.202208732579907, 0.999533854487397}},
      {614, {0.239281694428209, 0.999873853923686}},
      {615, {0.394783230031241, 0.999203380051758}},
      {600, {0, 1}},
      {601, {0, 1}},
      {598, {0.176685484662368, 0.999903309569281}},
      {599, {0.30478915547053, 0.99976513230203}},
      {592, {0.0552031371142697, 0.99992755505131}},
      {593, {0.12009000606677, 0.999707949470757}},
      {696, {0, 1}},
      {697, {0, 1}},
      {632, {0.0534198458512857, 1.00004910891077}},
      {633, {0.162762859036752, 1.00001361025097}},
      {630, {0, 1}},
      {631, {0, 1}},
      {626, {0.0361012117635465, 0.99986552753556}},
      {627, {0.322176574883024, 0.99946130385112}},
      {690, {0.1124784900157, 0.999847127643755}},
      {691, {0.0526697586706348, 0.999873978869956}},
      {680, {0.152985262075749, 0.999922836221618}},
      {681, {0.0655804760763534, 0.999892939368802}},
      {678, {0.112321257361844, 1.00004891553529}},
      {679, {0.129431852991074, 0.999804349364599}},
      {674, {0.0577374698059124, 1.00001436724277}},
      {675, {0.221349824999183, 0.999897167234292}},
      {672, {0.186329149583828, 1.00003049415728}},
      {673, {0.405073243079866, 0.999831923871411}},
      {1124, {0.364609777087804, 0.999281672560823}},
      {1125, {0.32555301640084, 0.999363486619015}},
      {1126, {0.112313727189412, 0.999742721083538}},
      {1127, {0.192016365206893, 0.999760875146749}},
      {1110, {0.0631359683732035, 0.999917316896991}},
      {1111, {-0.0822394576247398, 1.00003323645413}},
      {1204, {0.216050395997379, 0.999344797307605}},
      {1205, {-0.0185154129721854, 0.999761377778998}},
      {1174, {0.146942183468957, 0.999676889814531}},
      {1175, {0.0308256255851451, 0.999782337101621}},
      {1128, {0.141940987325298, 0.999642216412396}},
      {1129, {0.116749188832304, 0.999830997210295}},
      {1106, {0.362672751020218, 0.999305270473702}},
      {1107, {0.284743734837621, 0.999492260701264}},
      {1108, {0, 1}},
      {1109, {0, 1}},
      {1122, {0, 1}},
      {1123, {0, 1}},
      {1176, {0.0327595262173337, 0.999787871906909}},
      {1177, {0.0237997606941532, 0.999985512451663}},
      {1172, {0.316315169147913, 0.999680476198697}},
      {1173, {0.184577644366196, 0.999386958407241}},
      {1202, {0, 1}},
      {1203, {0, 1}},
      {1170, {0.192049406829622, 0.999663911670487}},
      {1171, {0.092791139213712, 0.999639155865561}},
      {1208, {0.123305334678755, 0.999844779345287}},
      {1209, {0.132078244036975, 0.999529674841068}},
      {1206, {0, 1}},
      {1207, {0, 1}},
      {1120, {0.214568635868496, 0.999637017241042}},
      {1121, {0.229214540836712, 0.999482044457222}},
      {1168, {0, 1}},
      {1169, {0, 1}},
      {1330, {0.125327047492906, 0.999986195922701}},
      {1331, {-0.0479849996308672, 1.00008735480352}},
      {1304, {0, 1}},
      {1305, {0, 1}},
      {1332, {0.22864033813914, 0.999911598808958}},
      {1333, {0.179513163175649, 0.999938047593281}},
      {1302, {0.138618421796568, 0.999858776537946}},
      {1303, {-0.0324452602998485, 0.999908985659581}},
      {1296, {0.0240248665433954, 0.999927597447352}},
      {1297, {-0.137448056348629, 1.00012493518285}},
      {1298, {0.000596054126359445, 0.999983137151482}},
      {1299, {-0.0666975573954429, 0.999903787855816}},
      {1328, {0, 1}},
      {1329, {0, 1}},
      {1234, {0, 1}},
      {1235, {0, 1}},
      {1268, {0, 1}},
      {1269, {0, 1}},
      {1238, {0, 1}},
      {1239, {0, 1}},
      {1236, {-0.0184401715881151, 1.00002306020675}},
      {1237, {0.0401992100900396, 1.00000167383495}},
      {1232, {0.0492582555075082, 0.999922344914107}},
      {1233, {0.107996452538824, 0.999798367451877}}
      };
    }
  }
  else if (dsNum == 6) {
    return trapENF;
  }
  else return 0;
  if (calPars.find(chan) == calPars.end()) return 0.0;
  double result = trapENF * calPars[chan][1] + calPars[chan][0];
  return result;
}


double GetENMC(int chan, int dsNum, double trapENM, int run)
{
  map<int, vector<double> > calPars;
  if (dsNum == 0) {
    calPars = {
    {692, {0.0725279, 0.999578}},
    {693, {-0.0591719, 1.00014}},
    {690, {0.0865662, 0.999791}},
    {691, {0.0559577, 0.999739}},
    {688, {0.234182, 0.999495}},
    {689, {-0.196996, 1}},
    {640, {0.161128, 0.999818}},
    {641, {0.0968246, 0.999964}},
    {584, {0, 1}},
    {585, {0, 1}},
    {674, {-0.0595725, 1.00016}},
    {675, {0.107036, 0.99986}},
    {576, {0.00592649, 1.00028}},
    {577, {0.199329, 1.00018}},
    {680, {0, 1}},
    {681, {0, 1}},
    {676, {0, 1}},
    {677, {0, 1}},
    {616, {0, 1}},
    {617, {0, 1}},
    {614, {0, 1}},
    {615, {0, 1}},
    {610, {0.0403682, 1.00014}},
    {611, {0.169531, 0.999929}},
    {608, {0.161406, 0.999632}},
    {609, {-0.0294944, 0.999984}},
    {598, {0.186911, 0.999625}},
    {599, {-0.133681, 1.00009}},
    {600, {0.185196, 0.999707}},
    {601, {-0.102946, 1.00005}},
    {594, {0.227791, 0.999509}},
    {595, {0.08921, 0.999737}},
    {592, {0.139655, 0.999716}},
    {593, {0.0853719, 0.999958}},
    {664, {0.25306, 0.999428}},
    {665, {-0.104028, 1.00001}},
    {662, {-0.0403296, 1.00001}},
    {663, {0.20075, 0.999318}},
    {656, {0, 1}},
    {657, {0, 1}},
    {696, {0.185226, 0.999609}},
    {697, {-0.0422115, 1.0001}},
    {628, {0, 1}},
    {629, {0, 1}},
    {626, {0.00778678, 0.99983}},
    {627, {-0.0409388, 0.999968}},
    {624, {0.0883829, 0.999531}},
    {625, {-0.0754634, 1.0002}},
    {632, {0, 1}},
    {633, {0, 1}},
    {646, {0.0834665, 0.999842}},
    {647, {0.0390311, 0.999955}},
    {644, {0.0132505, 0.999963}},
    {645, {0.0409945, 1.00003}},
    {642, {0.0250672, 0.999989}},
    {643, {-0.0212042, 1.00011}},
    {630, {0, 1}},
    {631, {0, 1}}
    };
  }
  else if (dsNum == 1) {
    calPars = {
    {584, {0, 1}},
    {585, {0, 1}},
    {582, {0.00857657, 0.999884}},
    {583, {0, 1}},
    {580, {0.204394, 0.999204}},
    {581, {0.0501838, 0.999617}},
    {578, {0.062171, 0.999925}},
    {579, {0.338202, 0.998938}},
    {692, {0.137032, 0.99965}},
    {693, {0.131175, 0.999744}},
    {648, {-0.0321653, 1.00009}},
    {649, {0.168521, 0.999692}},
    {640, {0.107611, 1.00009}},
    {641, {-0.0316668, 1.00018}},
    {642, {0, 1}},
    {643, {0, 1}},
    {616, {0, 1}},
    {617, {0, 1}},
    {610, {-0.111439, 0.999958}},
    {611, {0.0476757, 0.999612}},
    {608, {0.122217, 1.00046}},
    {609, {0.201986, 1.00028}},
    {664, {0.166222, 0.999787}},
    {665, {0.308444, 0.999555}},
    {624, {0, 1}},
    {625, {0, 1}},
    {628, {0, 1}},
    {629, {0, 1}},
    {688, {0, 1}},
    {689, {0, 1}},
    {694, {0, 1}},
    {695, {0, 1}},
    {614, {0, 1}},
    {615, {0, 1}},
    {680, {0, 1}},
    {681, {0, 1}},
    {678, {0, 1}},
    {679, {0, 1}},
    {672, {0.105236, 0.999671}},
    {673, {-0.0190277, 1.00001}},
    {696, {0, 1}},
    {697, {0, 1}},
    {632, {-0.044733, 1.00039}},
    {633, {0.289113, 1.00005}},
    {630, {0, 1}},
    {631, {0, 1}},
    {626, {0.00748613, 0.999731}},
    {627, {0.233111, 0.999151}},
    {690, {0.112841, 0.999542}},
    {691, {0.192577, 0.999607}},
    {600, {0.0441729, 0.999909}},
    {601, {0.112729, 0.999829}},
    {598, {0.0844419, 0.999649}},
    {599, {-0.036816, 0.999865}},
    {594, {0.170266, 0.999537}},
    {595, {0, 1}},
    {592, {0.133377, 0.999722}},
    {593, {0.111846, 0.99969}}
    };
  }
  else if (dsNum == 2) {
    calPars = {
    {584, {0, 1}},
    {585, {0, 1}},
    {582, {0.0146421, 0.999846}},
    {583, {0, 1}},
    {580, {0.238583, 0.999046}},
    {581, {0.0988482, 0.999485}},
    {578, {0.0783577, 0.999873}},
    {579, {0.364638, 0.998934}},
    {692, {0.146952, 0.999602}},
    {693, {0.140929, 0.999768}},
    {648, {-0.0289565, 1.00001}},
    {649, {0.151306, 0.999616}},
    {640, {0.11008, 1.0001}},
    {641, {-0.0124544, 1.00016}},
    {642, {0, 1}},
    {643, {0, 1}},
    {616, {0, 1}},
    {617, {0, 1}},
    {610, {-0.0916548, 0.999938}},
    {611, {0.0613673, 0.999589}},
    {608, {0.160196, 1.0003}},
    {609, {0.21871, 1.00023}},
    {664, {0.191852, 0.999771}},
    {665, {0.309304, 0.999575}},
    {624, {0, 1}},
    {625, {0, 1}},
    {628, {0, 1}},
    {629, {0, 1}},
    {688, {0, 1}},
    {689, {0, 1}},
    {694, {0, 1}},
    {695, {0, 1}},
    {614, {0, 1}},
    {615, {0, 1}},
    {680, {0, 1}},
    {681, {0, 1}},
    {678, {0, 1}},
    {679, {0, 1}},
    {672, {0.0821478, 0.999639}},
    {673, {-0.00657526, 0.999759}},
    {696, {0, 1}},
    {697, {0, 1}},
    {632, {-0.0782052, 1.00016}},
    {633, {0.297631, 0.999937}},
    {630, {0, 1}},
    {631, {0, 1}},
    {626, {0.00451734, 0.999713}},
    {627, {0.268257, 0.999147}},
    {690, {0.154515, 0.999487}},
    {691, {0.190389, 0.999641}},
    {600, {0.0707518, 0.999873}},
    {601, {0.19691, 0.99966}},
    {598, {0.0309141, 0.999769}},
    {599, {0.0779166, 0.999732}},
    {594, {0.17138, 0.999487}},
    {595, {0, 1}},
    {592, {0.175443, 0.999606}},
    {593, {0.167963, 0.999619}}
    };
  }
  else if (dsNum == 3) {
    calPars = {
    {584, {0, 1}},
    {585, {0, 1}},
    {582, {0.0109203, 0.9998}},
    {583, {0, 1}},
    {580, {0.225087, 0.999229}},
    {581, {0.0781537, 0.999458}},
    {578, {0.0672015, 0.999906}},
    {579, {0.355947, 0.999062}},
    {692, {0.12426, 0.999711}},
    {693, {0.112969, 0.999789}},
    {648, {0.0231724, 0.999944}},
    {649, {0.182139, 0.999651}},
    {640, {0.107444, 1.00006}},
    {641, {-0.0356435, 1.00016}},
    {642, {0, 1}},
    {643, {0, 1}},
    {616, {0, 1}},
    {617, {0, 1}},
    {610, {-0.062205, 0.99992}},
    {611, {0.047531, 0.999638}},
    {608, {0.113913, 1.00027}},
    {609, {0.167505, 1.00018}},
    {664, {0.182492, 0.999785}},
    {665, {0.289898, 0.999581}},
    {624, {0.0376416, 0.999924}},
    {625, {0.0263891, 0.99998}},
    {628, {0.0642868, 0.99987}},
    {629, {0.0890229, 0.999927}},
    {688, {-0.0176685, 0.999961}},
    {689, {-0.126046, 1.00007}},
    {694, {0.041038, 0.999876}},
    {695, {0.100494, 0.999838}},
    {614, {-0.0291199, 1.00009}},
    {615, {-0.056652, 1.00015}},
    {680, {0, 1}},
    {681, {0, 1}},
    {678, {0.135722, 0.999657}},
    {679, {0.0653641, 0.99967}},
    {672, {0.0542686, 0.999715}},
    {673, {0.00680454, 0.999821}},
    {696, {0, 1}},
    {697, {0, 1}},
    {632, {-0.0412551, 1.00029}},
    {633, {0.229072, 1.00005}},
    {630, {0, 1}},
    {631, {0, 1}},
    {626, {-0.0103929, 0.999945}},
    {627, {0.244556, 0.999311}},
    {690, {0.0847979, 0.999584}},
    {691, {0.254292, 0.999462}},
    {600, {0.0409888, 0.999937}},
    {601, {0.159687, 0.999736}},
    {598, {0.00527384, 0.999811}},
    {599, {0.0355303, 0.999631}},
    {594, {0.125709, 0.999561}},
    {595, {0, 1}},
    {592, {0.16537, 0.999535}},
    {593, {0.146612, 0.999683}}
    };
  }
  else if (dsNum == 4) {
    calPars = {
    {1140, {0.0656504, 0.999808}},
    {1141, {0.0623844, 0.999782}},
    {1142, {0.076969, 0.999733}},
    {1143, {0.084768, 0.999742}},
    {1110, {0.215292, 0.999704}},
    {1111, {0.215071, 0.999491}},
    {1204, {0.238477, 0.999548}},
    {1205, {0.181946, 0.999486}},
    {1174, {0.1038, 0.999711}},
    {1175, {0.0815067, 0.999835}},
    {1144, {0.00404314, 0.999948}},
    {1145, {0.0168324, 0.999898}},
    {1106, {0.0736098, 0.999662}},
    {1107, {-0.052995, 1.00007}},
    {1108, {0, 1}},
    {1109, {0, 1}},
    {1138, {0, 1}},
    {1139, {0, 1}},
    {1176, {0.0268188, 0.999915}},
    {1177, {0.0499779, 0.999867}},
    {1172, {0.0119835, 0.999565}},
    {1173, {-0.0241898, 0.999595}},
    {1202, {0, 1}},
    {1203, {0, 1}},
    {1170, {0.0805674, 0.999693}},
    {1171, {0.0736973, 0.999672}},
    {1208, {0.140714, 0.999575}},
    {1209, {0.028356, 0.99994}},
    {1206, {0, 1}},
    {1207, {0, 1}},
    {1136, {0.105158, 0.999667}},
    {1137, {0.0765999, 0.999797}},
    {1168, {0, 1}},
    {1169, {0, 1}},
    {1330, {0.00531052, 1.00003}},
    {1331, {0.153495, 0.999959}},
    {1304, {0, 1}},
    {1305, {0, 1}},
    {1332, {0.208018, 0.99998}},
    {1333, {0.0417627, 1.00026}},
    {1302, {0.113636, 0.999614}},
    {1303, {0.121522, 0.999497}},
    {1296, {0.00124792, 0.99995}},
    {1297, {0.0278856, 0.99981}},
    {1298, {0.0345384, 0.999926}},
    {1299, {-0.0235014, 0.999802}},
    {1328, {0, 1}},
    {1329, {0, 1}},
    {1234, {0, 1}},
    {1235, {0, 1}},
    {1268, {0, 1}},
    {1269, {0, 1}},
    {1238, {0.0704525, 0.999625}},
    {1239, {0.179626, 0.999671}},
    {1236, {0.0366128, 0.999954}},
    {1237, {0.0532853, 0.999913}},
    {1232, {0.0244745, 0.999889}},
    {1233, {0.0304868, 0.999888}}
    };
  }
  else if (dsNum == 5) {
    calPars = {
    {664, {0, 1}},
    {665, {0, 1}},
    {662, {0.159484045258887, 1.00017884576934}},
    {663, {0.0794802798785363, 1.00042886497079}},
    {660, {0.0105009040061061, 0.999669426468072}},
    {661, {-0.050019710377637, 1.00037978071327}},
    {658, {0.0810547946865319, 0.999962936751273}},
    {659, {0.15076552878971, 0.99981969098867}},
    {692, {0, 1}},
    {693, {0, 1}},
    {648, {0.447685089520089, 1.00031454135013}},
    {649, {0.511500563039752, 1.00021992596183}},
    {640, {0.108768755091577, 1.00021242919156}},
    {641, {0.151786817881357, 1.00007606447127}},
    {642, {0, 1}},
    {643, {0, 1}},
    {616, {0, 1}},
    {617, {0, 1}},
    {610, {0.0753098632026175, 1.00020995724404}},
    {611, {0.0885357131951851, 1.0000992010851}},
    {608, {0.563640278599681, 1.000082589775}},
    {609, {0.549718612023285, 1.0001867577906}},
    {584, {0.170489235188941, 0.999920916856291}},
    {585, {0.200138353532921, 0.999694642917561}},
    {624, {0.0524196771008942, 0.999848338299675}},
    {625, {-0.00181844085178816, 1.00009997070026}},
    {628, {0.097674752757752, 0.999838369126709}},
    {629, {0.0968785592254818, 1.00012487929373}},
    {688, {0.0438655192305106, 0.999905050185807}},
    {689, {0.0806154425834706, 0.999764292618992}},
    {694, {0.111337239398731, 0.999740777066928}},
    {695, {0.206918931769537, 0.999390250437358}},
    {614, {0.0645742331507159, 1.00000476751828}},
    {615, {0.0563068730677645, 1.00008873057982}},
    {600, {0, 1}},
    {601, {0, 1}},
    {598, {0.16660694286911, 0.999622591124256}},
    {599, {0.216394592539011, 0.999532263275177}},
    {592, {0.0459965602467247, 0.999970177168364}},
    {593, {0.0480045306357087, 0.999871656625192}},
    {696, {0, 1}},
    {697, {0, 1}},
    {632, {0.165114121788876, 1.00028714723253}},
    {633, {0.161517163477331, 1.00056938952602}},
    {630, {0, 1}},
    {631, {0, 1}},
    {626, {0.0399597684747189, 0.999864596098361}},
    {627, {0.0178127712415478, 1.00008777762075}},
    {690, {0.0755029401661202, 0.999876095869421}},
    {691, {0.0469428154366683, 0.999748584471367}},
    {680, {-0.0213766219766691, 1.00008070027922}},
    {681, {-0.0280130210853939, 1.00016188536644}},
    {678, {0.0417956685666389, 0.999991995912639}},
    {679, {0.102895826532112, 0.999820829990122}},
    {674, {0.123529988311052, 0.999848699958647}},
    {675, {0.0786039892224676, 0.999855099395274}},
    {672, {0.0579874550412561, 0.999750236610478}},
    {673, {0.178110796202961, 0.999485062090153}},
    {1124, {0.109594985434287, 0.999725165913281}},
    {1125, {0.135152067598322, 0.999649777238863}},
    {1126, {0.173735061153065, 0.999313687329799}},
    {1127, {0.199650259177874, 0.999214951702583}},
    {1110, {0.0816798665518084, 0.999775499736954}},
    {1111, {0.13421792185213, 0.999639105696772}},
    {1204, {0.0552283272768756, 0.999795900062224}},
    {1205, {0.105304310279676, 0.999673778810253}},
    {1174, {0.0622574335426021, 0.999830722902222}},
    {1175, {0.112092972360862, 0.999667413468304}},
    {1128, {0.0668927428790534, 0.999913993784837}},
    {1129, {0.148877549498965, 0.999694053341817}},
    {1106, {0.0921995370653352, 0.99975565054748}},
    {1107, {0.142515752609658, 0.999554013241039}},
    {1108, {0, 1}},
    {1109, {0, 1}},
    {1122, {0, 1}},
    {1123, {0, 1}},
    {1176, {0.0998909352805511, 0.999903301171378}},
    {1177, {0.0464149016285359, 1.00012010891716}},
    {1172, {0.134039066867701, 0.999808891429687}},
    {1173, {0.163622252341104, 0.999923044410444}},
    {1202, {0, 1}},
    {1203, {0, 1}},
    {1170, {0.0926342826837711, 0.999764069290821}},
    {1171, {0.121938651422092, 0.999506552445932}},
    {1208, {0.10299149200364, 0.999858542448339}},
    {1209, {0.086814313283795, 0.999944971313795}},
    {1206, {0, 1}},
    {1207, {0, 1}},
    {1120, {0.123151890171914, 0.999721239704018}},
    {1121, {0.150477656703993, 0.99965177662165}},
    {1168, {0, 1}},
    {1169, {0, 1}},
    {1330, {0.00270437995221105, 0.999926387701485}},
    {1331, {0.008178386272994, 0.999835295186186}},
    {1304, {0, 1}},
    {1305, {0, 1}},
    {1332, {0.221611341294529, 0.999977774346372}},
    {1333, {0.193966817064751, 0.999853724336022}},
    {1302, {0.0640717997411736, 0.999831068245807}},
    {1303, {0.134003340671684, 0.999585821280909}},
    {1296, {0.0375086706834242, 0.999949295418506}},
    {1297, {0.000800757634231585, 0.999990487465459}},
    {1298, {0.0227736618335805, 0.99993297380552}},
    {1299, {0.024723758637985, 0.999976765206468}},
    {1328, {0, 1}},
    {1329, {0, 1}},
    {1234, {0, 1}},
    {1235, {0, 1}},
    {1268, {0, 1}},
    {1269, {0, 1}},
    {1238, {0, 1}},
    {1239, {0, 1}},
    {1236, {0.0336380172489189, 0.999972918308967}},
    {1237, {0.0870852921100329, 0.999778319540895}},
    {1232, {0.0262989562053065, 0.999921159093836}},
    {1233, {-0.0045620306074764, 1.00006345504263}}
    };
    if (run > 22392) {
      calPars = {
      {664, {0, 1}},
      {665, {0, 1}},
      {662, {0.0841898863667406, 0.999854396105453}},
      {663, {0.0521179809318979, 0.999925441127997}},
      {660, {0.0986142265416056, 0.999756461188024}},
      {661, {0.111372121633171, 0.999720066310807}},
      {658, {0.117500752089163, 0.999974039997499}},
      {659, {0.120201779780387, 0.999905672185296}},
      {692, {0, 1}},
      {693, {0, 1}},
      {648, {0.536560618839138, 0.999348514663142}},
      {649, {0.541047480673556, 0.999313956951476}},
      {640, {0.109778694768917, 1.00013314583522}},
      {641, {0.141391576377621, 1.00008093361909}},
      {642, {0, 1}},
      {643, {0, 1}},
      {616, {0, 1}},
      {617, {0, 1}},
      {610, {0.0925338309702543, 0.999798446038341}},
      {611, {0.133508567321363, 0.999670077796608}},
      {608, {0.475928030245687, 1.00009870728026}},
      {609, {0.603762615024697, 0.999920636883801}},
      {584, {0.237545833556953, 0.999841748982147}},
      {585, {0.230552317236518, 0.999785429004004}},
      {624, {0.063797771331415, 0.999874444503562}},
      {625, {0.116534564839182, 0.999934818317995}},
      {628, {0.0978443754430344, 0.999860522899551}},
      {629, {0.117580129091411, 1.00013577754494}},
      {688, {0.112879554062851, 0.999846371952894}},
      {689, {0.148111510885629, 0.999677189791493}},
      {694, {0.1664935242493, 0.999664263619423}},
      {695, {0.170644387090152, 0.999396327840028}},
      {614, {0.129376213204255, 0.99981600727264}},
      {615, {0.103961321106086, 1.00004294726521}},
      {600, {0, 1}},
      {601, {0, 1}},
      {598, {0.229937945811412, 0.999478304861085}},
      {599, {0.185610329804294, 0.99964826166658}},
      {592, {0.00220691411914444, 0.999896598549113}},
      {593, {-0.0297686814128372, 0.999815431819749}},
      {696, {0, 1}},
      {697, {0, 1}},
      {632, {0.115122937965439, 1.00021569330701}},
      {633, {0.180532133501964, 1.00044087615089}},
      {630, {0, 1}},
      {631, {0, 1}},
      {626, {0.0959593801715341, 0.999733177547431}},
      {627, {0.0333917863942897, 0.999944901637458}},
      {690, {0.0220942413146436, 0.999907727226373}},
      {691, {-0.0598152900130545, 0.999955193567101}},
      {680, {0.0567888463451115, 0.999958993129974}},
      {681, {0.20185580089298, 0.99986169519456}},
      {678, {0.0890672822257841, 1.00006422071467}},
      {679, {0.10279148103012, 0.999717483512034}},
      {674, {0.083241018806809, 1.0000535623449}},
      {675, {0.0809185017954202, 1.00014020009518}},
      {672, {0.297044655068059, 0.999289093120953}},
      {673, {0.461612971292836, 0.999253254100429}},
      {1124, {0.0313994470672229, 1.00006194115539}},
      {1125, {0.286849165757556, 0.999787988201879}},
      {1126, {0.0414811129374004, 0.999682475156236}},
      {1127, {0.0771766870081804, 0.999457522461219}},
      {1110, {0.097793305014579, 0.999682001293084}},
      {1111, {0.0982868870370003, 0.999774347059587}},
      {1204, {0.114822942973375, 0.99951001051488}},
      {1205, {0.10140044882034, 0.999619879164246}},
      {1174, {0.0370456804825349, 0.999879761824412}},
      {1175, {0.0655541373528021, 0.999817603150011}},
      {1128, {0.0421446044836408, 0.999911171454004}},
      {1129, {0.0710209523744725, 0.999758326473415}},
      {1106, {0.100636390687726, 0.999715794190107}},
      {1107, {0.0463605812303095, 0.999697587542078}},
      {1108, {0, 1}},
      {1109, {0, 1}},
      {1122, {0, 1}},
      {1123, {0, 1}},
      {1176, {0.171412116680007, 0.99984606802325}},
      {1177, {0.123910682892373, 1.00000183956283}},
      {1172, {0.291709645963146, 0.999862237769181}},
      {1173, {0.23321373135152, 0.999889814425955}},
      {1202, {0, 1}},
      {1203, {0, 1}},
      {1170, {0.0868188451686542, 0.999768421800783}},
      {1171, {0.0864550536666655, 0.999654453075903}},
      {1208, {0.136460044349903, 0.999811311908592}},
      {1209, {0.13261890768132, 0.999970688059349}},
      {1206, {0, 1}},
      {1207, {0, 1}},
      {1120, {0.110570863687722, 0.999676704505409}},
      {1121, {0.19666564157514, 0.999616650620783}},
      {1168, {0, 1}},
      {1169, {0, 1}},
      {1330, {0.061310263466643, 1.0000230309089}},
      {1331, {0.155855876884291, 0.999831874424055}},
      {1304, {0, 1}},
      {1305, {0, 1}},
      {1332, {0.266565621155616, 0.999899013185769}},
      {1333, {0.2481147691836, 0.999882983332233}},
      {1302, {0.136514885183282, 0.999677462337082}},
      {1303, {0.183226030411485, 0.999562157475802}},
      {1296, {0.133484392778162, 0.999890030913675}},
      {1297, {0.156074265594639, 0.999761498308996}},
      {1298, {0.0263990502089948, 0.99996142553531}},
      {1299, {-0.0356009905550836, 0.999984676456878}},
      {1328, {0, 1}},
      {1329, {0, 1}},
      {1234, {0, 1}},
      {1235, {0, 1}},
      {1268, {0, 1}},
      {1269, {0, 1}},
      {1238, {0, 1}},
      {1239, {0, 1}},
      {1236, {0.0115505674574232, 0.999990842642697}},
      {1237, {-0.031565563789751, 0.999999569220619}},
      {1232, {0.0290233492084284, 0.999953527683428}},
      {1233, {0.134397557311265, 0.999873153222634}}
      };
    }

  }
  else if (dsNum == 6) {
    return trapENM;
  }
  else return 0;
  if (calPars.find(chan) == calPars.end()) return 0.0;
  double result = trapENM * calPars[chan][1] + calPars[chan][0];
  return result;
}


double GetAvsE(int chan, double TSCurrent50nsMax, double TSCurrent100nsMax, double TSCurrent200nsMax,
  double trapENF, double trapENFCal, int dsNum, int run)
{
  map<int, vector<double> > AvE;
  if (dsNum == 0) {
    AvE = {
    {692, {100, -0.07529620352886, 0.00652477250763, -0.00000004229313, -0.0559368 }},
    {693, {100, 0.09491841297804 , 0.00624985317454, 0.00000003652612 , 0.0999203  }},
    {690, {100, -0.03947737109575, 0.00596383805735, -0.00000002280096, -0.0362556 }},
    {691, {100, -0.01678114054048, 0.00605974774563, 0.00000000282369 , -0.0371833 }},
    {688, {100, -0.02801041866371, 0.00642599982448, -0.00000000397370, -0.00532227}},
    {689, {100, -0.03351483806880, 0.00657624804947, -0.00000003208054, -0.0258643 }},
    {640, {100, -0.07710918419332, 0.00654249381433, -0.00000006020763, -0.0511057 }},
    {641, {100, -0.05003206349039, 0.00656659885553, -0.00000005230423, -0.0548992 }},
    {674, {100, 0.01234542807626 , 0.00639288361212, -0.00000002986658, -0.150596  }},
    {675, {100, -0.05200639896340, 0.00672704707488, -0.00000008369810, -0.271346  }},
    {576, {100, -0.05579669900809, 0.00676101947318, -0.00000004964302, -0.0946339 }},
    {577, {100, -0.05084255743151, 0.00682118660369, -0.00000006281743, -0.0917401 }},
    {614, {100, -0.04602171631904, 0.00669778057685, -0.00000003202822, -0.0111399 }},
    {615, {100, -0.02766732096108, 0.00676581597940, -0.00000003081828, -0.0246251 }},
    {610, {100, -0.03217558845342, 0.00609393810762, -0.00000004870352, -0.0583239 }},
    {611, {100, 0.00060699603606 , 0.00619010495899, -0.00000004963163, -0.0322137 }},
    {608, {100, -0.04717168103298, 0.00693813956356, -0.00000003312926, -0.0413815 }},
    {609, {100, -0.09173665632756, 0.00706199226920, -0.00000006396026, -0.0445482 }},
    {598, {100, -0.04668281397350, 0.00584592465393, -0.00000004469727, -0.0584235 }},
    {599, {100, -0.06027300694097, 0.00588865670116, -0.00000004264614, -0.0671996 }},
    {600, {100, -0.06336457385541, 0.00628917478562, -0.00000004679081, -0.0363265 }},
    {601, {100, -0.05773633729535, 0.00635772491252, -0.00000005873000, -0.057005  }},
    {594, {100, -0.02001426727028, 0.00632870812050, -0.00000000407310, -0.0396426 }},
    {595, {100, -0.05436650125656, 0.00650342974881, 0.00000000621140 , -0.0266403 }},
    {592, {100, -0.01808363854925, 0.00649509780121, -0.00000000086097, -0.035128  }},
    {593, {100, -0.05572136744542, 0.00659751543013, -0.00000003269527, -0.0108762 }},
    {664, {100, -0.08022340228914, 0.00617330747916, -0.00000008144008, -0.151833  }},
    {665, {100, -0.03610307613973, 0.00613604243914, -0.00000006426996, -0.123298  }},
    {662, {100, -0.09109168679526, 0.00635158388960, -0.00000010108559, -0.130712  }},
    {663, {100, -0.04924526869198, 0.00664466922649, -0.00000005518591, -0.184659  }},
    {656, {100, -0.04553004841588, 0.00621540747503, -0.00000003293303, -0.101696  }},
    {657, {100, -0.05287616855457, 0.00630397406495, -0.00000004362729, -0.0853932 }},
    {696, {100, -0.06048044675941, 0.00609956239261, -0.00000009249704, -0.072102  }},
    {697, {100, -0.03463451797766, 0.00606133026641, -0.00000005783148, -0.10165   }},
    {628, {100, -0.06492141006936, 0.00630588659039, -0.00000004876212, -0.0508431 }},
    {629, {100, -0.01618690666996, 0.00635168642945, -0.00000002171341, -0.0494534 }},
    {626, {100, -0.04634653598466, 0.00641912814864, -0.00000005092043, -0.0628899 }},
    {627, {100, -0.03215802977239, 0.00652807359686, -0.00000004276030, -0.0646443 }},
    {624, {100, -0.07464260112243, 0.00603385177897, -0.00000006140583, -0.0655832 }},
    {625, {100, -0.05061472882347, 0.00604281156984, -0.00000005456077, -0.0650524 }},
    {646, {100, -0.02395864497688, 0.00580612581230, -0.00000000519835, -0.0287854 }},
    {647, {100, -0.02103970101131, 0.00583250413573, -0.00000003026128, -0.0580655 }},
    {644, {100, -0.09327106649007, 0.00638830843866, -0.00000003816050, -0.0441046 }},
    {645, {100, -0.04593997945413, 0.00646480138954, -0.00000004119471, -0.061546  }},
    {642, {100, -0.04024161123859, 0.00610942298365, -0.00000000732162, -0.0465312 }},
    {643, {100, -0.01193329560176, 0.00624628707266, -0.00000001167720, -0.0746399 }}
    };
    if (run > 4908) {
      AvE = {
      {692, {100, -0.03437105397870, 0.00644719366222, -0.00000002525258, -0.0606295}},
      {693, {100, -0.03647263264671, 0.00652653313721, -0.00000003865240, -0.0583286}},
      {690, {100, -0.04964639023578, 0.00599593485633, -0.00000003947747, -0.120168}},
      {691, {100, -0.05407178281492, 0.00617081423221, -0.00000005077219, -0.141223}},
      {688, {100, -0.05576431712462, 0.00652893108061, -0.00000004332272, -0.045139}},
      {689, {100, -0.06672848982530, 0.00660012588096, -0.00000003045250, -0.0429551}},
      {640, {100, -0.05953113761943, 0.00649297376151, -0.00000003767411, -0.0694}},
      {641, {100, -0.07594567330360, 0.00660798676972, -0.00000006440837, -0.0991476}},
      {674, {100, -0.04015079824739, 0.00698428997557, -0.00000006353907, -0.248371}},
      {675, {100, -0.08602746128687, 0.00712516117085, -0.00000010064253, -0.240399}},
      {576, {100, -0.06444909076680, 0.00666926830176, -0.00000002443431, -0.0887752}},
      {577, {100, -0.05282344392595, 0.00676118868929, -0.00000005568219, -0.0977051}},
      {614, {100, -0.07757739547292, 0.00676919368931, -0.00000003146034, -0.0518179}},
      {615, {100, -0.04630311021167, 0.00682997383415, -0.00000003342368, -0.054273}},
      {610, {100, -0.06253718425544, 0.00616422916887, -0.00000008639685, -0.0804022}},
      {611, {100, -0.03925871390331, 0.00623227029243, -0.00000005843453, -0.0477998}},
      {608, {100, -0.10256257240737, 0.00705134098246, -0.00000008215820, -0.061125}},
      {609, {100, -0.05759320057484, 0.00701329541635, -0.00000005206011, -0.0524402}},
      {598, {100, -0.04973896546817, 0.00583124042398, -0.00000004864473, -0.0517626}},
      {599, {100, -0.01816157619356, 0.00579537046565, -0.00000001983625, -0.0480918}},
      {600, {100, -0.05570189833420, 0.00625595608998, -0.00000005030414, -0.0297275}},
      {601, {100, -0.03960344785034, 0.00627450013626, -0.00000004188108, -0.045756}},
      {594, {100, -0.08694323069570, 0.00643972618844, -0.00000004939818, -0.0487327}},
      {595, {100, -0.02814227891025, 0.00648901603048, -0.00000000268428, -0.0289578}},
      {592, {100, -0.06626536289763, 0.00657354000369, -0.00000003918118, -0.0475695}},
      {593, {100, -0.03760574031803, 0.00657459283301, -0.00000003092025, -0.03891}},
      {664, {100, -0.07991700574536, 0.00611537982995, -0.00000008640386, -0.0484156}},
      {665, {100, -0.01621544753051, 0.00605631129183, -0.00000005334755, -0.0435635}},
      {662, {100, -0.02807647338682, 0.00619585585326, -0.00000001935804, -0.135149}},
      {663, {100, -0.12577042758718, 0.00684557583470, -0.00000012467629, -0.125823}},
      {656, {100, -0.05614084851533, 0.00620038293036, -0.00000003610765, -0.0960505}},
      {657, {100, -0.05067550245280, 0.00627866900154, -0.00000004351906, -0.0897519}},
      {696, {100, -0.07173687808165, 0.00604441989460, -0.00000006144387, -0.110363}},
      {697, {100, -0.04591890237568, 0.00605651611691, -0.00000006181353, -0.127322}},
      {628, {100, -0.06587724066503, 0.00632029766775, -0.00000005953605, -0.0484387}},
      {629, {100, -0.03135523668669, 0.00643885261372, -0.00000006195976, -0.0882587}},
      {626, {100, -0.04941571800207, 0.00640679085881, -0.00000003858716, -0.0688245}},
      {627, {100, -0.03548626356821, 0.00654403050531, -0.00000004214539, -0.0840829}},
      {624, {100, -0.04783273299134, 0.00596019465483, -0.00000002875690, -0.0613319}},
      {625, {100, -0.04264718688849, 0.00603897275861, -0.00000004894066, -0.0913393}},
      {646, {100, -0.06687244183487, 0.00588991110876, -0.00000004774670, -0.038546}},
      {647, {100, -0.03103101163706, 0.00584917329626, -0.00000004342489, -0.0614598}},
      {644, {100, -0.05863702824273, 0.00637090257220, -0.00000003140031, -0.0853563}},
      {645, {100, -0.01558061893029, 0.00642458120184, -0.00000001958904, -0.106657}},
      {642, {100, -0.06899492746647, 0.00616580192544, -0.00000004507383, -0.0462911}},
      {643, {100, -0.05242277686277, 0.00633629244796, -0.00000006064935, -0.0856755}}
      };
    }
  }
  else if (dsNum == 1) {
    AvE = {
    {582, {100, -0.05716634373386, 0.00595268199714, -0.00000004145308, -0.0579367}},
    {580, {100, -0.05644657119061, 0.00439349758348, -0.00000003819791, -0.0242805}},
    {581, {100, -0.03351126791746, 0.00441463029844, -0.00000004087610, -0.0473551}},
    {578, {100, -0.05432451498821, 0.00636534155204, -0.00000000824930, -0.07577}},
    {579, {100, -0.08412341073740, 0.00664849273998, -0.00000005846452, -0.108744}},
    {692, {100, -0.05370499018529, 0.00630881971667, -0.00000003071926, -0.0497264}},
    {693, {100, -0.03673620652672, 0.00633763666516, -0.00000002513660, -0.0581856}},
    {648, {100, -0.06240316371601, 0.00646841891311, -0.00000004606989, -0.183896}},
    {649, {100, -0.01996196385983, 0.00647475620218, -0.00000004446778, -0.166677}},
    {640, {100, -0.05208115198941, 0.00670731904566, -0.00000004528136, -0.146193}},
    {641, {100, -0.01010217303621, 0.00672605040299, -0.00000004575208, -0.142973}},
    {610, {100, -0.03008961853459, 0.00641811237214, -0.00000003616047, -0.0429524}},
    {611, {100, -0.03973747169863, 0.00656124436969, -0.00000002503488, -0.0496413}},
    {608, {100, -0.07703021180730, 0.00672707579077, -0.00000004998801, -0.0748829}},
    {609, {100, -0.05158168731448, 0.00676653449794, -0.00000004173725, -0.0703816}},
    {664, {100, -0.04606026952779, 0.00562748830210, -0.00000008050314, -0.154239}},
    {665, {100, -0.02589028857017, 0.00562153673299, -0.00000007445874, -0.172931}},
    {672, {100, -0.05313532226189, 0.00646775875715, -0.00000003168637, -0.0892466}},
    {673, {100, -0.07952553506458, 0.00660078061092, -0.00000007111779, -0.121069}},
    {632, {100, -0.05702186343374, 0.00630431343104, -0.00000003888485, -0.0583254}},
    {633, {100, -0.01982011411848, 0.00628382853885, -0.00000003254850, -0.0771287}},
    {626, {100, -0.06206510517325, 0.00611159013352, -0.00000001475622, -0.0805635}},
    {627, {100, -0.07354537608276, 0.00634949292298, -0.00000005627487, -0.0959016}},
    {690, {100, -0.05239163451318, 0.00628064888759, -0.00000005091879, -0.0546512}},
    {691, {100, -0.05135626271144, 0.00641997564200, -0.00000003942229, -0.0607702}},
    {600, {100, -0.03774325048240, 0.00601398934246, -0.00000002664904, -0.0144875}},
    {601, {100, -0.06815170052049, 0.00613081110508, -0.00000006837417, -0.052765}},
    {598, {100, -0.04102443428927, 0.00625472022665, -0.00000002947698, -0.0766964}},
    {599, {100, -0.00970699641786, 0.00621891773438, -0.00000002337755, -0.0874553}},
    {594, {100, -0.11377065857700, 0.00623070326671, -0.00000005288108, -0.0416569}},
    {592, {100, -0.13625409413134, 0.00673605459576, -0.00000023013954, -0.442113}},
    {593, {100, -0.19483977818810, 0.00687283131856, -0.00000027435946, -0.442154}}
    };
    if (run < 12800){
      	AvE =	 {
       {582, {100, -0.03472788922490, 0.00590493396315, -0.00000002917292, -0.0517582}},
       {580, {100, -0.03091778568709, 0.00434696102078, -0.00000002346612, -0.028315 }},
       {581, {100, -0.02498432035919, 0.00439786320937, -0.00000003317182, -0.0527894}},
       {578, {100, -0.10928855774679, 0.00654006506977, -0.00000008516204, -0.0983391}},
       {579, {100, -0.08995210708869, 0.00667603893623, -0.00000007599249, -0.0833647}},
       {692, {100, -0.05938182333725, 0.00631936112894, -0.00000003561889, -0.0507723}},
       {693, {100, -0.04013366772313, 0.00636793622495, -0.00000004257576, -0.0675015}},
       {648, {100, -0.05110411930092, 0.00653744575372, -0.00000008805059, -0.230288 }},
       {649, {100,  0.00154306902418, 0.00646494434040, -0.00000005216496, -0.166794 }},
       {640, {100, -0.03549738754588, 0.00667317232627, -0.00000003723750, -0.0986866}},
       {641, {100, -0.04748696766350, 0.00675006756473, -0.00000005085998, -0.104647 }},
       {610, {100, -0.05488549372981, 0.00644441324630, -0.00000004592342, -0.0627969}},
       {611, {100, -0.06596362007856, 0.00659269569544, -0.00000003059873, -0.0930995}},
       {608, {100, -0.04890723389917, 0.00667914605220, -0.00000002776225, -0.0776838}},
       {609, {100, -0.04603184116189, 0.00677084857787, -0.00000004646125, -0.0995651}},
       {664, {100, -0.03156445345608, 0.00557884729116, -0.00000006085752, -0.101989 }},
       {665, {100,  0.00360598467392, 0.00552723163503, -0.00000003460700, -0.108154 }},
       {672, {100, -0.06611914472075, 0.00652113177349, -0.00000005149555, -0.128783 }},
       {673, {100, -0.06335567841135, 0.00655197380879, -0.00000005031802, -0.122083 }},
       {632, {100, -0.07266696310055, 0.00632831630467, -0.00000004634094, -0.0565518}},
       {633, {100, -0.01809068087133, 0.00629380301405, -0.00000004194383, -0.0513181}},
       {626, {100, -0.06594520860482, 0.00623954157795, -0.00000002294080, -0.0921647}},
       {627, {100, -0.07238839873722, 0.00645490540526, -0.00000005632448, -0.088226 }},
       {690, {100, -0.04509934042109, 0.00618820682271, -0.00000001438606, -0.028168 }},
       {691, {100, -0.05357388181846, 0.00640977263043, -0.00000003693114, -0.0650423}},
       {600, {100, -0.07730237491944, 0.00611422166739, -0.00000006478322, -0.049767 }},
       {601, {100, -0.01262205490757, 0.00599456168599, -0.00000001476975, -0.0470343}},
       {598, {100, -0.01857601607412, 0.00622109736766, -0.00000001587235, -0.0636993}},
       {599, {100, -0.04173726894070, 0.00629370663508, -0.00000005493287, -0.0852476}},
       {594, {100, -0.02771215536085, 0.00608055877096,  0.00000000207772, -0.0450414}},
       {592, {100,  0.01011438006514, 0.00631977630440, -0.00000002896039, -0.345576 }},
       {593, {100, -0.03942679715865, 0.00648309847354, -0.00000007293845, -0.40873  }}
       };
    }
  }
  else if (dsNum == 2)
    AvE = {
    {582, {100, -0.05389423275048, 0.00594541755978, -0.00000003796237, -0.113704}},
    {580, {100, -0.02335929322821, 0.00432584832144, -0.00000001566917, -0.00295118}},
    {581, {100, 0.00783433739586 , 0.00432225915290, -0.00000000436012, -0.0134398}},
    {578, {100, -0.06926706475591, 0.00644550927815, -0.00000004893142, -0.0533894}},
    {579, {100, -0.02579049090196, 0.00657353820696, -0.00000004126421, -0.0639537}},
    {692, {100, -0.01886930425801, 0.00625988140647, -0.00000002327785, -0.0839915}},
    {693, {100, -0.04340632759008, 0.00636692903625, -0.00000004843687, -0.0790281}},
    {648, {100, -0.07571299704685, 0.00651422359435, -0.00000006196686, -0.143221}},
    {649, {100, -0.03592874145841, 0.00651153858260, -0.00000008155801, -0.0513577}},
    {640, {100, -0.10950671259226, 0.00682099687633, -0.00000010594731, -0.0540526}},
    {641, {100, -0.03924124971966, 0.00677084058709, -0.00000009190283, -0.00588008}},
    {610, {100, -0.10680956421818, 0.00652742199907, -0.00000007209362, -0.137306}},
    {611, {100, -0.10316380835054, 0.00672555022291, -0.00000007889744, -0.1322}},
    {608, {100, -0.04971135342854, 0.00668251689665, -0.00000004013005, -0.0261884}},
    {609, {100, -0.01305901253437, 0.00670059492322, -0.00000002479859, -0.0316806}},
    {664, {100, 0.00262301210622 , 0.00552116746038, -0.00000007039754, -0.591536}},
    {665, {100, 0.01635765524614 , 0.00551372290475, -0.00000006811418, -0.515625}},
    {672, {100, -0.03854970731578, 0.00645534966832, -0.00000003009262, -0.070971}},
    {673, {100, -0.02083833795154, 0.00646915089553, -0.00000002548512, -0.0635873}},
    {632, {100, -0.07492428747686, 0.00634581693648, -0.00000009472474, -0.010531}},
    {633, {100, 0.00235828181191 , 0.00621713580625, -0.00000000957372, -0.0296646}},
    {626, {100, -0.04665095345461, 0.00613005847151, -0.00000003913382, -0.0945535}},
    {627, {100, -0.04309339676065, 0.00626679913871, -0.00000003842282, -0.113445}},
    {690, {100, -0.07925663494694, 0.00623977510282, -0.00000004952118, -0.02108}},
    {691, {100, -0.01084955635256, 0.00634291422853, -0.00000002856024, -0.116026}},
    {600, {100, -0.06815817833332, 0.00608821917981, -0.00000005461966, -0.0225349}},
    {601, {100, -0.02319875598215, 0.00600589722819, -0.00000001857545, -0.0209784}},
    {598, {100, 0.00825024404238 , 0.00615444483381, -0.00000001465942, -0.0422146}},
    {599, {100, 0.00111083033095 , 0.00623016184472, -0.00000003111670, -0.133151}},
    {594, {100, -0.12289108236815, 0.00631203112911, -0.00000009530230, -0.158085}},
    {592, {100, 0.14647810480870 , 0.00608971571164, -0.00000005805608, -0.0495886}},
    {593, {100, -0.53980765891034, 0.00785583786402, -0.00000084013283, -0.0446389}}
    };
    else if (dsNum == 3)
    AvE = {
    {582, {100, -0.03657265737331, 0.00592061473657, -0.00000003653810, -0.0497997}},
    {580, {100, -0.05058262666120, 0.00439255337388, -0.00000003813338, -0.0310345}},
    {581, {100, -0.02662692020674, 0.00439771491109, -0.00000003171737, -0.0343494}},
    {578, {100, -0.05869442504017, 0.00639554909587, -0.00000003801420, -0.0602863}},
    {579, {100, -0.05361007653877, 0.00656192095760, -0.00000003662874, -0.0533376}},
    {692, {100, -0.06235857100355, 0.00634617549111, -0.00000004080247, -0.0676026}},
    {693, {100, -0.03822057308676, 0.00636558966857, -0.00000003484192, -0.061951}},
    {648, {100, -0.06773835549989, 0.00650197617610, -0.00000005918334, -0.267007}},
    {649, {100, -0.03536883044446, 0.00651824204126, -0.00000006115074, -0.197286}},
    {640, {100, -0.03636717132496, 0.00666527023734, -0.00000002793750, -0.170983}},
    {641, {100, -0.05696505672698, 0.00681361300492, -0.00000008544194, -0.168078}},
    {610, {100, -0.06324596444128, 0.00641178842204, -0.00000003124132, -0.0588181}},
    {611, {100, -0.06749139576222, 0.00658396113601, -0.00000003590798, -0.0756611}},
    {608, {100, -0.08515727644951, 0.00673355902289, -0.00000005965595, -0.0492712}},
    {609, {100, -0.05923321110126, 0.00675843941270, -0.00000004361112, -0.0477777}},
    {664, {100, -0.02797444412178, 0.00553155008796, -0.00000007841868, -0.0847407}},
    {665, {100, -0.01064757266071, 0.00551675714460, -0.00000007031030, -0.0665271}},
    {624, {100, -0.03116912071312, 0.00666939754181, -0.00000005527271, -0.0135869}},
    {625, {100, -0.03059980216732, 0.00681954428678, -0.00000009387147, -0.0499775}},
    {694, {100, -0.07476152846530, 0.00619953902675, -0.00000002955260, -0.0312867}},
    {695, {100, -0.06917418972623, 0.00625409335461, -0.00000002808341, -0.0343711}},
    {614, {100, -0.04593004488552, 0.00546172464971, -0.00000001995568, -0.0313411}},
    {615, {100, -0.02476545080521, 0.00550330294956, -0.00000001984562, -0.0356921}},
    {678, {100, -0.03653911434604, 0.00626482055473, -0.00000003732178, -0.125749}},
    {679, {100, -0.01263329604294, 0.00626827551793, -0.00000003146893, -0.127143}},
    {672, {100, -0.06441177626702, 0.00656063067167, -0.00000007133872, -0.109181}},
    {673, {100, -0.05113770427224, 0.00652627217579, -0.00000002953395, -0.121901}},
    {632, {100, -0.03802037701052, 0.00624807082050, -0.00000003090757, -0.0515142}},
    {633, {100, -0.00853023074115, 0.00623708598476, -0.00000002770384, -0.0662131}},
    {626, {100, -0.07088145424685, 0.00632149349238, -0.00000002265873, -0.0795479}},
    {627, {100, -0.04387183201843, 0.00646311983939, -0.00000003115004, -0.08451}},
    {690, {100, -0.07564478466102, 0.00630087219287, -0.00000005135314, -0.0601639}},
    {691, {100, -0.05630914353312, 0.00642648123675, -0.00000003735218, -0.0539791}},
    {600, {100, -0.09266392202933, 0.00612510514822, -0.00000006932299, -0.0684059}},
    {601, {100, -0.03238253756001, 0.00604386264257, -0.00000003736303, -0.0684651}},
    {598, {100, -0.04552851081865, 0.00623887618963, -0.00000003293454, -0.0599792}},
    {599, {100, 0.00008918165168 , 0.00619352204621, -0.00000001262004, -0.0621774}},
    {594, {100, -0.14322661113704, 0.00630197798676, -0.00000007654408, -0.0585146}},
    {592, {100, 0.04633084663020 , 0.00510287164612, -0.00000003690932, -0.148953}},
    {593, {100, -0.05718652558314, 0.00538908073444, -0.00000012626271, -0.242266}}
    };
  else if (dsNum == 4) {
    AvE = {
   {1204, {100, -0.04305236641022, 0.00442492797027, -0.00000004049202, -0.0255576}},
   {1205, {100, -0.00553888575036, 0.00439720238483, -0.00000001831681, -0.0226904}},
   {1174, {100, -0.06082469390909, 0.00567779649865, -0.00000003509991, -0.0231638}},
   {1144, {100, -0.07768448842289, 0.00606959962234, -0.00000005798540, -0.0503835}},
   {1145, {100, -0.03754884845508, 0.00598754447282, -0.00000001527875, -0.0446202}},
   {1106, {100, -0.05988000699941, 0.00658492207538, -0.00000006588618, -0.032851}},
   {1107, {100, -0.04402291606593, 0.00676090640259, -0.00000006915521, -0.0372922}},
   {1176, {100, -0.04431527192766, 0.00455148135079, -0.00000004754519, -0.04609}},
   {1177, {100, -0.02293122876780, 0.00457167999986, -0.00000005932467, -0.0677204}},
   {1172, {100, -0.04603078480544, 0.00469641730661, -0.00000001889003, -0.114718}},
   {1173, {100, -0.02044121621557, 0.00473824483318, -0.00000002578620, -0.110204}},
   {1170, {100, -0.05171173363634, 0.00479402884732, -0.00000001858648, -0.0259819}},
   {1171, {100, -0.03243498363868, 0.00491967495109, -0.00000001933814, -0.0497487}},
   {1136, {100, -0.04028287215279, 0.00443208478649, -0.00000002361990, -0.0128004}},
   {1137, {100, -0.02761644900564, 0.00449211018556, -0.00000004018320, -0.0411232}},
   {1330, {100, -0.05846217967399, 0.00569816629193, -0.00000002518338, -0.0171004}},
   {1331, {100, -0.05983348012255, 0.00583403281705, -0.00000002966307, -0.0336106}},
   {1332, {100, -0.06973010203437, 0.00652011346897, -0.00000005632140, -0.114095}},
   {1333, {100, -0.06393824211843, 0.00660292892117, -0.00000006881001, -0.114151}},
   {1296, {100, 0.02380472629182 , 0.00620005364251, 0.00000001197793 , -1.13914}},
   {1297, {100, -0.00596820784009, 0.00638041726059, -0.00000003730617, -1.1292}},
   {1298, {100, -0.01819884151251, 0.00391055955439, -0.00000001753730, -0.0188191}},
   {1299, {100, -0.05370082074744, 0.00409414735446, -0.00000005792397, -0.0417136}},
   {1236, {100, -0.06794771002025, 0.00609296698443, -0.00000004309436, -0.0511827}},
   {1237, {100, -0.04189412889922, 0.00613484437913, -0.00000005064359, -0.0572395}},
   {1232, {100, -0.05145677560637, 0.00491607419102, -0.00000002608784, -0.0222277}},
   {1233, {100, -0.04670490821525, 0.00496648424470, -0.00000003654473, -0.0390527}}
   };
    if (run > 60001853) {
      AvE = {
      {1204, {100, 0.03049778916388 , 0.00419720271567, 0.00000004293721 , 0.0182664}},
      {1205, {100, -0.15227383577178, 0.00484124635420, -0.00000027950220, 0.0857864}},
      {1174, {100, 0.17662183367981 , 0.00496878628979, 0.00000024372647 , 0.173308}},
      {1144, {100, -0.13280503492455, 0.00575814413637, -0.00000000115822, 0.00576872}},
      {1145, {100, 0.06172457980763 , 0.00555677219164, 0.00000005229835 , -0.00696225}},
      {1106, {100, 0.08694557266627 , 0.00569684838177, -0.00000030026607, -0.0338878}},
      {1107, {100, 0.07343428765753 , 0.00586023591476, -0.00000031943829, -0.0559631}},
      {1176, {100, 0.04985387013168 , 0.00435990822953, 0.00000000283494 , -0.390589}},
      {1177, {100, 0.01557416595822 , 0.00445550796825, -0.00000001629911, -0.524965}},
      {1172, {100, -0.03909058487422, 0.00465931751818, -0.00000000243214, -0.253407}},
      {1173, {100, -0.05971943499612, 0.00480591721333, -0.00000005099626, -0.222077}},
      {1170, {100, 0.16537208923190 , 0.00450965929162, 0.00000004460691 , 0.0624391}},
      {1171, {100, 0.15060373655053 , 0.00467841773187, 0.00000005057490 , -0.0134782}},
      {1136, {100, 0.00192546156366 , 0.00434313476856, 0.00000000879402 , 0.00125628}},
      {1137, {100, -0.00718755304991, 0.00436502896290, 0.00000000961113 , 0.00557281}},
      {1330, {100, -0.06031704853579, 0.00567793742283, -0.00000001710431, -0.00465858}},
      {1331, {100, 0.11605937005448 , 0.00546412766078, 0.00000007331083 , 0.118008}},
      {1332, {100, -0.08366229874974, 0.00658762065065, -0.00000009374308, -0.30935}},
      {1333, {100, 0.05987598703068 , 0.00635801815278, -0.00000000854738, -0.209108}},
      {1296, {100, 0.74214825658985 , 0.00446471615514, 0.00000049810349 , 0.0477243}},
      {1297, {100, -0.17757419464724, 0.00617417836918, -0.00000013186005, -0.165402}},
      {1298, {100, -0.01939550081178, 0.00386828824628, 0.00000000207208 , 0.000835441}},
      {1299, {100, -0.01157281494909, 0.00402063188815, -0.00000004039674, -0.00901655}},
      {1236, {100, 0.05587572480020 , 0.00579469777215, 0.00000007602464 , -0.0404956}},
      {1237, {100, 0.01447941825779 , 0.00595996620364, 0.00000001151199 , -0.0488763}},
      {1232, {100, -0.04750609879495, 0.00490287060916, -0.00000001932449, -0.0762087}},
      {1233, {100, 0.13212206039627 , 0.00454304940225, 0.00000011215422 , 0.0524863}}
      };
    }
  }
  else if (dsNum == 5)
    AvE = {
    // {662, {100, 0.02275181121901,   0.00581967930507, -0.00000001246687, -0.139327}},
    // Module 1 Detectors
    {662, {100, -0.04200556438637,  0.00589139876808, -0.00000002091187, -0.0796124}},
    {663, {100, -0.01016768521900,  0.00593316520169, -0.00000003347655, -0.0658214}},
    {660, {100, -0.02358073622241,  0.00431675856228, -0.00000001956777, -0.0329226}},
    {661, {100, -0.01585953603888,  0.00435151210508, -0.00000001734536, -0.035565}},
    {658, {100, -0.08393742072691,  0.00646996565007, -0.00000006702748, -0.0412854}},
    {659, {100, -0.02598610942268,  0.00656837901918, -0.00000004753602, -0.0438015}},
    {692, {100, -0.04396932559972,  0.00604766055046, -0.00000002432300, -0.179604}},
    {693, {100, -0.02595946926085,  0.00609418915098, -0.00000002760754, -0.19422}},
    {648, {100, -0.07277143641275,  0.00650399610873, -0.00000006961676, -0.206737}},
    {649, {100, -0.04283158442359,  0.00653003156537, -0.00000007376835, -0.186794}},
    {640, {100, -0.04710246782962,  0.00671001510342, -0.00000006200788, -0.0917455}},
    {641, {100, -0.05604721939614,  0.00681324695669, -0.00000008409911, -0.119092}},
    {610, {100, -0.07200578660870,  0.00641826088307, -0.00000003723332, -0.0528}},
    {611, {100, -0.04944206219308,  0.00655343184264, -0.00000002798001, -0.0606645}},
    {608, {100, -0.07949494175723,  0.00671871312368, -0.00000005368840, -0.0741529}},
    {609, {100, -0.03377028652926,  0.00671564463865, -0.00000003362637, -0.0702388}},
    {584, {100, -0.01725095859515,  0.00551825923091, -0.00000006935990, -0.0806985}},
    {585, {100, -0.01700923730098,  0.00551706469658, -0.00000006554744, -0.0779025}},
    {624, {100, -0.05942591145127,  0.00674009876514, -0.00000008753874, -0.0425529}},
    {625, {100, -0.04630391383386,  0.00680633918149, -0.00000010786431, -0.0534237}},
    {628, {100, -0.02164085824690,  0.00499661927851, -0.00000002742538, -0.0189718}},
    {629, {100, -0.03575625089049,  0.00513765875471, -0.00000005263869, -0.0376415}},
    {688, {100, -0.04828625701326,  0.00639668029208, -0.00000010722586, -0.0515916}},
    {689, {100, -0.02405706024881,  0.00645532412814, -0.00000009968460, -0.0498551}},
    {694, {100, -0.04051930251300,  0.00611602454483, -0.00000001850988, -0.0398696}},
    {695, {100, -0.03810433439382,  0.00619208207025, -0.00000002579166, -0.0362416}},
    {614, {100, -0.05898792369725,  0.00551417403255, -0.00000004330101, -0.0738337}},
    {615, {100, -0.02555419891687,  0.00551501944868, -0.00000003454874, -0.0677373}},
    {598, {100, -0.07831872364331,  0.00634480039151, -0.00000007102702, -0.178258}},
    {599, {100, -0.06148932342102,  0.00634027038819, -0.00000006841086, -0.169034}},
    {592, {100, -0.06529351465421,  0.00651698286465, -0.00000004994053, -0.105691}},
    {593, {100, -0.03772294602315,  0.00654648236784, -0.00000005795220, -0.159236}},
    {632, {100, 0.01268429891938 ,  0.00613663773461, 0.00000000326874 , -0.0390048}},
    {633, {100, -0.04084776566911,  0.00633224823542, -0.00000006815115, -0.0677762}},
    {626, {100, -0.06262524701689,  0.00619132685511, -0.00000004534887, -0.0412781}},
    {627, {100, -0.07407696348388,  0.00634337455088, -0.00000005090556, -0.0516465}},
    {690, {100, -0.05422136050180,  0.00621321573145, -0.00000004591530, -0.0304789}},
    {691, {100, -0.03726919028853,  0.00634691959353, -0.00000003797892, -0.0161076}},
    {680, {100, -0.06495744919498,  0.00605800316426, -0.00000004882712, -0.103011}},
    {681, {100, -0.02006292092669,  0.00597616624715, -0.00000001334812, -0.0664033}},
    {678, {100, -0.07957419942175,  0.00633682053005, -0.00000007981937, -0.0581355}},
    {679, {100, 0.00526705198070 ,  0.00617504856144, -0.00000000179688, -0.0680104}},
    {674, {100, -0.05720823652781,  0.00615712997678, -0.00000003522691, -0.023431}},
    {675, {100, -0.04431508616172,  0.00628648372336, -0.00000002854660, -0.0480054}},
    {672, {100, -0.00733037718310,  0.00590386056237, -0.00000008364953, -0.340545}},
    {673, {100, -0.08130007506069,  0.00621544537271, -0.00000024458887, -0.279288}},
    // Module 2 Detectors
    {1124, {100, -0.06288871216568, 0.00655339384902, -0.00000012769630, -0.0413363}},
    {1125, {100, -0.05833455502950, 0.00661466642840, -0.00000012127949, -0.0546658}},
    {1110, {100, -0.02721084634448, 0.00516662068796, -0.00000002556563, -0.00843081}},
    {1111, {100, -0.01950010137495, 0.00517984383207, -0.00000002158615, -0.0215893}},
    {1204, {100, 0.15032562247954 , 0.00610898385297, 0.00000000036767 , -0.0643763}},
    {1205, {100, 0.11588925544183 , 0.00624320896160, -0.00000002747568, -0.0740828}},
    {1174, {100, -0.05708675098124, 0.00643698924868, -0.00000002812684, -0.0113658}},
    {1175, {100, -0.02038298075653, 0.00642569380265, -0.00000000417257, -0.0222998}},
    {1128, {100, -0.02516055732088, 0.00676781469489, -0.00000002247485, -0.0540321}},
    {1129, {100, -0.06259373814119, 0.00688704648997, -0.00000004389851, -0.0580724}},
    {1106, {100, -0.01380105797761, 0.00575000954618, -0.00000005569931, -0.0337202}},
    {1107, {100, -0.01123813846476, 0.00586330783415, -0.00000004084980, -0.0340646}},
    {1176, {100, -0.04839972071542, 0.00689387801953, -0.00000006461227, -0.158261}},
    {1177, {100, 0.00401874870802 , 0.00679515851710, -0.00000002639103, -0.150514}},
    {1172, {100, -0.07664370748037, 0.00695600141532, -0.00000004833588, -0.130592}},
    {1173, {100, -0.09929816961536, 0.00708146495488, -0.00000008104706, -0.150025}},
    {1170, {100, -0.06669782879899, 0.00712544371893, -0.00000003347961, -0.0228672}},
    {1171, {100, -0.10183883262316, 0.00737889000844, -0.00000005591247, -0.0434134}},
    {1208, {100, -0.06026405212353, 0.00672395817641, -0.00000006549821, -0.0285842}},
    {1209, {100, -0.05106126863988, 0.00675736800616, -0.00000007357201, -0.045665}},
    {1120, {100, -0.07994872588755, 0.00682163473737, -0.00000003580116, -0.0332985}},
    {1121, {100, -0.06993139314513, 0.00683398688274, -0.00000004168564, -0.0492931}},
    {1330, {100, -0.04656921439406, 0.00646077163486, -0.00000001550350, -0.0519121}},
    {1331, {100, -0.05684863312438, 0.00664827456432, -0.00000003485042, -0.065088}},
    {1332, {100, -0.06806364562725, 0.00673679829127, -0.00000005637670, -0.127845}},
    {1333, {100, -0.01549136837753, 0.00671037144204, -0.00000002388519, -0.129768}},
    {1302, {100, -0.01201425613581, 0.00441680495123, -0.00000001508589, -0.0125916}},
    {1303, {100, -0.02111707321524, 0.00447434062289, -0.00000003300905, -0.0474922}},
    {1298, {100, -0.03761844497559, 0.00616702498368, -0.00000005938917, -0.228315}},
    {1299, {100, 0.01514080553004 , 0.00614054314825, 0.00000003231656 , -0.0715713}},
    {1236, {100, -0.08026697937314, 0.00604168612981, -0.00000006751441, -0.0645419}},
    {1237, {100, -0.03450653836231, 0.00597122790400, -0.00000001351218, -0.0643998}},
    {1232, {100, -0.06099892767481, 0.00677121365043, -0.00000001412189, -0.0365819}},
    {1233, {100, -0.06296743649962, 0.00686026294662, -0.00000003756599, -0.0485697}}
    };
  else if (dsNum == 6)
    AvE = {
    {662, {100, -0.03889945466887, 0.00591524014195, -0.00000003060444, -0.0793735}},
    {663, {100, -0.00011210550122, 0.00590058431470, -0.00000001298337, -0.0652309}},
    {660, {100, -0.02227910599646, 0.00429756025031, -0.00000000671338, -0.0154794}},
    {661, {100, -0.01516535897674, 0.00436859264411, -0.00000002167447, -0.0369063}},
    {658, {100, -0.04743489292058, 0.00633728543035, -0.00000000776648, -0.0984426}},
    {659, {100, -0.02448965190227, 0.00650299160656, -0.00000001295503, -0.105261}},
    {648, {100,  0.00415928086654, 0.00632975452930,  0.00000001010896, -0.14239}},
    {649, {100, -0.03191975729680, 0.00650087796290, -0.00000005432610, -0.143552}},
    {640, {100, -0.05401524396689, 0.00673406751186, -0.00000006366859, -0.13262}},
    {641, {100, -0.06915989019904, 0.00680378017562, -0.00000007379508, -0.143895}},
    {610, {100, -0.05335554146353, 0.00640503643792, -0.00000003637210, -0.0532907}},
    {611, {100, -0.04779832612121, 0.00656868299809, -0.00000003682190, -0.084239}},
    {608, {100, -0.03498657282069, 0.00663590926799, -0.00000002531140, -0.0670704}},
    {609, {100, -0.05271778440462, 0.00675389467299, -0.00000004089028, -0.0948836}},
    {584, {100, -0.06840818021265, 0.00562109292158, -0.00000011316029, -0.0987722}},
    {585, {100,  0.00896842168813, 0.00545893455058, -0.00000004211128, -0.0715546}},
    {624, {100, -0.06422643237526, 0.00677349092987, -0.00000009338809, -0.0624886}},
    {625, {100,  0.00808369432612, 0.00674444841770, -0.00000008133453, -0.058272}},
    {628, {100, -0.05652656763186, 0.00506491534824, -0.00000005236478, -0.0281524}},
    {629, {100, -0.02417394817011, 0.00513200930893, -0.00000005106249, -0.0478633}},
    {688, {100, -0.05389502676316, 0.00641188005709, -0.00000010896674, -0.0410434}},
    {689, {100, -0.05454715689712, 0.00652546940872, -0.00000012027053, -0.0565068}},
    {694, {100, -0.05022615708614, 0.00612948244842, -0.00000001561537, -0.0319061}},
    {695, {100, -0.05888715017254, 0.00621659434457, -0.00000002916115, -0.0379949}},
    {614, {100, -0.04385158919071, 0.00548238514592, -0.00000003074518, -0.0465665}},
    {615, {100, -0.01880353839315, 0.00548963539857, -0.00000002017248, -0.054891}},
    {598, {100, -0.01673240454504, 0.00623873199935, -0.00000003117908, -0.122257}},
    {599, {100, -0.01009746902447, 0.00629547279574, -0.00000004507648, -0.141014}},
    {592, {100, -0.07044841277090, 0.00654703977244, -0.00000006285568, -0.103632}},
    {593, {100, -0.04337934960109, 0.00649791124973, -0.00000002469149, -0.0851057}},
    {632, {100, -0.01641448939533, 0.00617365528578, -0.00000001238847, -0.0655896}},
    {633, {100, -0.03958157584203, 0.00629896521580, -0.00000005733317, -0.0850036}},
    {626, {100, -0.06874217628010, 0.00620522789897, -0.00000004876100, -0.0642453}},
    {627, {100, -0.04368819065628, 0.00632594681697, -0.00000004433781, -0.0909917}},
    {690, {100, -0.02531134143535, 0.00615934718695, -0.00000003213287, -0.060933}},
    {691, {100, -0.05308740220458, 0.00636982240518, -0.00000004630085, -0.0675956}},
    {680, {100, -0.05806224978607, 0.00604058704793, -0.00000003874717, -0.0316255}},
    {681, {100, -0.06670929112413, 0.00609544627917, -0.00000005427582, -0.0661276}},
    {678, {100, -0.04703885002341, 0.00627013754906, -0.00000005149198, -0.0421493}},
    {679, {100, -0.04072108700854, 0.00624543470588, -0.00000002556066, -0.0642002}},
    {674, {100, -0.05216191409162, 0.00619013943866, -0.00000005493510, -0.0458068}},
    {675, {100, -0.03572449031973, 0.00627449890455, -0.00000002421192, -0.0497359}},
    {672, {100, -0.19052024139298, 0.00675743193058, -0.00000032612904, -0.269377}},
    {673, {100, -0.03292861738096, 0.00632740407849, -0.00000008836872, -0.268255}},
    {1124, {100, -0.03965065500450, 0.00649843157749, -0.00000010924879, -0.0483709}},
    {1125, {100, -0.05428888939163, 0.00664922882389, -0.00000014352837, -0.0719711}},
    {1110, {100, -0.03695808081942, 0.00587922408344, -0.00000002713147, -0.0427042}},
    {1111, {100, -0.04554646782748, 0.00596423558778, -0.00000005592577, -0.048151}},
    {1204, {100,  0.15184163027945, 0.00612292572451, -0.00000000364246, -0.0633532}},
    {1205, {100,  0.14536442989383, 0.00619813192482, -0.00000001011995, -0.0659709}},
    {1174, {100, -0.07032444354646, 0.00649633641263, -0.00000004669546, -0.139835}},
    {1175, {100, -0.09775739838618, 0.00659067905548, -0.00000005937094, -0.128156}},
    {1128, {100, -0.09761611763854, 0.00689304058239, -0.00000006203710, -0.067513}},
    {1129, {100, -0.07592756414401, 0.00694742848726, -0.00000006735080, -0.0671023}},
    {1106, {100, -0.05217312309253, 0.00578741418406, -0.00000005908475, -0.0385897}},
    {1107, {100, -0.04932506050770, 0.00594259488726, -0.00000006480699, -0.0598806}},
    {1176, {100, -0.06676028222753, 0.00694051048876, -0.00000008077776, -0.13387}},
    {1177, {100, -0.06685043729870, 0.00697007032097, -0.00000009434501, -0.142213}},
    {1172, {100, -0.03391214146784, 0.00686062046379, -0.00000000707798, -0.0996596}},
    {1173, {100, -0.07298061879761, 0.00705831695408, -0.00000007050882, -0.135011}},
    {1170, {100, -0.07844128238082, 0.00713016649881, -0.00000002612020, -0.0625703}},
    {1171, {100, -0.04965089885918, 0.00723859292258,  0.00000000802443, -0.0457051}},
    {1208, {100, -0.05977936339141, 0.00671929518275, -0.00000005832332, -0.0497643}},
    {1209, {100, -0.04952817078252, 0.00675204049686, -0.00000006618800, -0.0673913}},
    {1120, {100, -0.06072582266310, 0.00678851416274, -0.00000001885886, -0.0469801}},
    {1121, {100, -0.05864190301813, 0.00679329204114, -0.00000001609236, -0.0692221}},
    {1330, {100, -0.06746926273008, 0.00655242370801, -0.00000005624347, -0.0536095}},
    {1331, {100, -0.03653968308482, 0.00661576934345, -0.00000001706945, -0.0557129}},
    {1332, {100, -0.06072694374410, 0.00673389776093, -0.00000006079935, -0.10686}},
    {1333, {100, -0.04561358048406, 0.00676066498588, -0.00000004414641, -0.112322}},
    {1302, {100, -0.02567504585361, 0.00441501145262, -0.00000001771866, -0.0220071}},
    {1303, {100, -0.00946733409083, 0.00439670068863, -0.00000000857594, -0.0279416}},
    {1298, {100, -0.02390271793679, 0.00610548864590, -0.00000000975868, -0.0501233}},
    {1299, {100, -0.03619206064993, 0.00633854441655, -0.00000005102391, -0.061126}},
    {1236, {100, -0.07198631182964, 0.00602355457262, -0.00000004956927, -0.0611737}},
    {1237, {100, -0.04016474863031, 0.00599183612637, -0.00000002297586, -0.0383265}},
    {1232, {100, -0.04590393329048, 0.00683399399740, -0.00000004166288, -0.0759763}},
    {1233, {100, -0.05718407620942, 0.00690221156734, -0.00000005313559, -0.0522841}}
    };
  else {
    // cout << "Error: GetAvsE(): Unknown dataset number: " << dsNum << endl;
    return 0.0;
  }
  // Apply the formula and return the value
  if (AvE.find(chan) == AvE.end()) return 0.0; // not found
  double tsCurrent=0, result=0.;
  if      (AvE[chan][0] == 100) tsCurrent = TSCurrent100nsMax;
  else if (AvE[chan][0] == 50)  tsCurrent = TSCurrent50nsMax;
  else if (AvE[chan][0] == 200) tsCurrent = TSCurrent200nsMax;
  result = -1 * ( (tsCurrent * trapENFCal / trapENF) - AvE[chan][1] - AvE[chan][2] * trapENFCal - AvE[chan][3] * pow(trapENFCal,2) ) / AvE[chan][4];
  return result;
}


double GetDCR90(int chan, double nlcblrwfSlope, double trapMax, int dsNum, int run)
{
  // This cut is used to set other DCR cuts.
  map<int,vector<double>> DCR;
  if (dsNum == 0) {
    DCR = {
      {576, { 2.62025e-05, -3.19821e-05, 0.000110951}},
      {577, { 3.08773e-05, -9.43515e-06, 4.96883e-05}},
      {592, { 0.000104374, -3.32182e-05, 0.000138846}},
      {593, { 4.79732e-05, -9.98318e-06, 5.20121e-05}},
      {594, { 5.99774e-05, -3.395e-05, 0.000106773}},
      {595, { 5.54465e-05, -1.01617e-05, 4.56353e-05}},
      {598, { 9.64767e-05, -3.43794e-05, 9.8914e-05}},
      {599, { 6.9971e-05, -1.02714e-05, 4.48656e-05}},
      {600, { 6.66795e-05, -3.33232e-05, 0.000119817}},
      {601, { 1.38651e-05, -9.9736e-06, 7.17423e-05}},
      {608, { 8.87058e-05, -3.39341e-05, 0.000100469}},
      {609, { 1.88757e-05, -9.9554e-06, 4.49709e-05}},
      {610, { 3.8026e-05, -3.26412e-05, 0.000121178}},
      {611, { 3.04436e-05, -9.74721e-06, 5.34399e-05}},
      {624, { 3.90792e-05, -3.10714e-05, 0.000124566}},
      {625, { 1.16344e-05, -9.0939e-06, 5.79719e-05}},
      {626, { 1.36054e-05, -3.17923e-05, 0.000132865}},
      {627, { 1.98268e-05, -9.41569e-06, 5.71894e-05}},
      {640, { 6.08418e-05, -3.18016e-05, 0.00013337}},
      {641, { 3.43421e-05, -9.37393e-06, 5.6212e-05}},
      {642, { 3.94735e-05, -3.40735e-05, 0.000111506}},
      {643, { 2.90627e-05, -1.01851e-05, 4.80197e-05}},
      {644, { 4.82779e-05, -3.19144e-05, 0.000139304}},
      {645, { -3.14003e-06, -9.39695e-06, 5.87049e-05}},
      {646, { 7.70912e-05, -3.11915e-05, 0.000103974}},
      {647, { 4.07395e-05, -9.24426e-06, 4.69131e-05}},
      {656, { 1.53295e-05, -3.29765e-05, 9.81577e-05}},
      {657, { 2.0757e-05, -9.73869e-06, 4.82357e-05}},
      {662, { 0.000174715, -3.64357e-05, 0.000284417}},
      {663, { 1.02984e-05, -5.44015e-06, 5.92606e-05}},
      {664, { 4.29349e-05, -3.21916e-05, 9.67059e-05}},
      {665, { 1.80743e-05, -9.66486e-06, 5.07688e-05}},
      {674, { 9.06627e-05, -3.2598e-05, 0.000165076}},
      {675, { 4.49932e-05, -9.72491e-06, 6.67536e-05}},
      {688, { 2.57231e-05, -3.23071e-05, 0.000233995}},
      {689, { 4.79907e-05, -9.6016e-06, 8.11236e-05}},
      {690, { 0.000105033, -3.44447e-05, 0.000162957}},
      {691, { -3.78675e-06, -1.02046e-05, 6.16215e-05}},
      {692, { 4.77457e-05, -3.28807e-05, 0.000121837}},
      {693, { 1.9842e-05, -9.87756e-06, 5.18648e-05}},
      {696, { 1.82884e-05, -3.25292e-05, 0.000172317}},
      {697, { 1.97126e-05, -9.68761e-06, 7.61359e-05}},
    };
    if (run < 4909){
     DCR = {
     {576, { 2.04734e-05, -3.20086e-05, 0.000111273}},
     {577, { 2.81223e-05, -9.44066e-06, 4.88874e-05}},
     {592, { 0.000110929, -3.32327e-05, 0.000133937}},
     {593, { 5.19968e-05, -9.98926e-06, 5.09311e-05}},
     {594, { 5.85846e-05, -3.39659e-05, 0.00010736}},
     {595, { 5.60084e-05, -1.0168e-05,  4.46179e-05}},
     {598, { 9.90589e-05, -3.43926e-05, 9.53531e-05}},
     {599, { 6.59066e-05, -1.02748e-05, 4.36627e-05}},
     {600, { 7.12887e-05, -3.33434e-05, 0.000118037}},
     {601, { 1.28764e-05, -9.97791e-06, 7.09125e-05}},
     {608, { 8.94249e-05, -3.39336e-05, 0.000101762}},
     {609, { 1.6371e-05,  -9.95478e-06, 4.50585e-05}},
     {610, { 4.05029e-05, -3.26428e-05, 0.000119947}},
     {611, { 2.83088e-05, -9.74444e-06, 5.54839e-05}},
     {624, { 3.38653e-05, -3.09451e-05, 0.000113401}},
     {625, { 7.80372e-06, -9.05672e-06, 5.5701e-05}},
     {626, { 1.49332e-05, -3.17912e-05, 0.000126196}},
     {627, { 1.59055e-05, -9.41448e-06, 5.5576e-05}},
     {640, { 6.32605e-05, -3.18038e-05, 0.000135198}},
     {641, { 3.2309e-05,  -9.37204e-06, 5.68914e-05}},
     {642, { 4.2584e-05, -3.40415e-05, 0.000111088}},
     {643, { 2.59998e-05, -1.01737e-05, 4.79863e-05}},
     {644, { 4.39567e-05, -3.18995e-05, 0.000139422}},
     {645, {-6.88688e-06, -9.39137e-06, 5.81992e-05}},
     {646, { 6.82386e-05, -3.1186e-05,  0.000105121}},
     {647, { 3.8295e-05,  -9.24472e-06, 4.70743e-05}},
     {656, { 1.7952e-05, -3.30019e-05, 9.74401e-05}},
     {657, { 1.48112e-05, -9.74191e-06, 4.68884e-05}},
     {662, { 0.000133832, -3.63964e-05, 0.000287698}},
     {663, { 1.92298e-05, -5.44081e-06, 6.02042e-05}},
     {664, { 4.70805e-05, -3.2232e-05,  9.51912e-05}},
     {665, { 1.59971e-05, -9.67184e-06, 5.16357e-05}},
     {674, { 8.66445e-05, -3.25815e-05, 0.000164891}},
     {675, { 4.27209e-05, -9.7238e-06,  6.84364e-05}},
     {688, { 5.96482e-05, -3.22726e-05, 0.000221894}},
     {689, { 3.93401e-05, -9.57742e-06, 7.89159e-05}},
     {690, { 0.000106605, -3.43582e-05, 0.000143681}},
     {691, {-6.73595e-07, -1.01805e-05, 5.61536e-05}},
     {692, { 5.36435e-05, -3.31578e-05, 0.000118967}},
     {693, { 2.71357e-05, -9.95816e-06, 5.17565e-05}},
     {696, { 6.76979e-06, -3.24404e-05, 0.000168502}},
     {697, { 9.16943e-06, -9.66639e-06, 7.03233e-05}}
     };
   }
   if(run <= 3664){
      DCR[692] =  { 4.81401e-05, -3.28825e-05, 0.000118458};
      DCR[693] =  { 2.92883e-05, -9.87323e-06, 5.25524e-05};
    }
   if(run>=4004 && run <= 4908){
      DCR[692] =  { 5.55901e-05, -3.27923e-05, 0.000117376};
      DCR[693] =  { 2.59878e-05, -9.84651e-06, 5.10247e-05};
    }
  }
  else if (dsNum == 1){
   DCR = {
    {578, { 7.41465e-05, -3.20213e-05, 0.000123571}},
    {579, { 3.30877e-05, -9.52122e-06, 5.40886e-05}},
    {580, { 2.28795e-05, -3.17556e-05, 0.000229183}},
    {581, { 1.99248e-05, -9.47469e-06, 7.90216e-05}},
    {582, { 4.63916e-05, -3.42132e-05, 0.000151746}},
    {592, { 0.000106826, -3.12852e-05, 0.00020175}},
    {593, { 7.68443e-05, -9.49469e-06, 8.1773e-05}},
    {594, { 7.09494e-05, -3.36509e-05, 0.000109938}},
    {598, { 5.39353e-05, -3.1948e-05, 0.000124559}},
    {599, { 3.07293e-05, -9.4889e-06, 5.60905e-05}},
    {600, { 0.000102061, -3.10511e-05, 9.45511e-05}},
    {601, { 7.37245e-05, -9.19303e-06, 5.69701e-05}},
    {608, { 4.55782e-05, -3.18756e-05, 0.000221418}},
    {609, { 9.763e-06, -9.33906e-06, 7.74775e-05}},
    {610, { 3.43132e-05, -3.15528e-05, 0.000132894}},
    {611, { 3.73085e-05, -9.4264e-06, 5.79441e-05}},
    {626, { 7.8823e-05, -3.20273e-05, 0.000108983}},
    {627, { 4.18342e-05, -9.46501e-06, 5.1215e-05}},
    {632, { 5.44339e-05, -3.1615e-05, 0.00016711}},
    {633, { -4.59522e-06, -9.43348e-06, 7.32281e-05}},
    {640, { 0.000147023, -3.21459e-05, 0.000123799}},
    {641, { 6.6015e-05, -9.48201e-06, 5.51619e-05}},
    {648, { 9.25996e-05, -3.26063e-05, 0.000237002}},
    {649, { -1.97108e-06, -9.68459e-06, 0.000102895}},
    {664, { 6.34014e-05, -3.20694e-05, 0.000137931}},
    {665, { 2.91909e-05, -9.60215e-06, 6.13233e-05}},
    {672, { 8.81985e-05, -3.27312e-05, 0.000111113}},
    {673, { 5.3553e-05, -9.68942e-06, 5.43533e-05}},
    {690, { 0.000126551, -3.18935e-05, 9.01474e-05}},
    {691, { 4.89824e-05, -9.4747e-06, 4.66545e-05}},
    {692, { 0.000105334, -3.26953e-05, 0.000104561}},
    {693, { 5.38672e-05, -9.83129e-06, 4.583e-05}},
   };
   if (run < 12800){
    DCR = {
    {578, { 4.32685e-05, -3.19915e-05, 0.000128615}},
    {579, { 1.76222e-05, -9.513e-06, 5.53499e-05}},
    {580, { 2.87554e-05, -3.17406e-05, 0.000240486}},
    {581, { 2.72488e-05, -9.47811e-06, 8.24086e-05}},
    {582, { 6.17281e-05, -3.4202e-05, 0.000136331}},
    {592, { 9.19983e-05, -3.13019e-05, 0.00015559}},
    {593, { 5.57862e-05, -9.50314e-06, 6.75628e-05}},
    {594, { 6.41192e-05, -3.36033e-05, 0.000112344}},
    {598, { 3.4901e-05, -3.19868e-05, 0.000110575}},
    {599, { 1.3565e-05, -9.49474e-06, 5.27781e-05}},
    {600, { 5.3075e-05, -3.10297e-05, 9.21815e-05}},
    {601, { 5.04382e-05, -9.17993e-06, 4.9395e-05}},
    {608, { 5.7584e-05, -3.18988e-05, 0.000231606}},
    {609, { 5.94129e-06, -9.34003e-06, 8.12078e-05}},
    {610, { 1.77137e-05, -3.15482e-05, 0.000121894}},
    {611, { 3.26396e-05, -9.42424e-06, 5.51827e-05}},
    {626, { 1.54261e-05, -3.10271e-05, 0.00011101}},
    {627, { 9.18458e-06, -9.16795e-06, 5.22094e-05}},
    {632, { 9.22385e-05, -3.16377e-05, 0.000166863}},
    {633, { 7.53797e-06, -9.44199e-06, 7.32709e-05}},
    {640, { 7.81442e-05, -3.21381e-05, 0.000108115}},
    {641, { 3.74914e-05, -9.47336e-06, 5.19869e-05}},
    {648, { 0.000122273, -3.26494e-05, 0.0001637}},
    {649, { 7.08078e-06, -9.69284e-06, 8.61852e-05}},
    {664, { 5.52939e-05, -3.20689e-05, 0.000119796}},
    {665, { 2.08788e-05, -9.60689e-06, 5.73287e-05}},
    {672, { 2.49581e-05, -3.2686e-05, 9.59444e-05}},
    {672, { 2.49581e-05, -3.2686e-05, 9.59444e-05}},
    {673, { 4.49531e-05, -9.67915e-06, 5.50871e-05}},
    {673, { 4.49531e-05, -9.67915e-06, 5.50871e-05}},
    {690, { 2.76725e-05, -3.20112e-05, 8.67413e-05}},
    {691, { 1.19414e-05, -9.50497e-06, 4.53953e-05}},
    {692, { 3.50633e-05, -3.26518e-05, 0.000123765}},
    {693, { 2.29114e-05, -9.81051e-06, 5.06333e-05}},
    };
   }
   if (run> 10278 && run < 11507){
    DCR[594] = { 2.96403e-05, -3.35123e-05, 0.000105365};
   }

   if (run>= 9938  && run <= 10278){
    DCR[594] = { 2.93477e-05, -3.32266e-05, 0.000100086};
   }
   if (run >= 13395 && run <= 14188){
    DCR[626] = { 1.78799e-05, -3.11522e-05, 0.000111311};
    DCR[627] = { 1.13795e-05, -9.20676e-06, 5.22142e-05};
   }
   if (run >= 14189){
    DCR[626] = { 1.61082e-05, -3.10571e-05, 0.000110021};
    DCR[627] = { 8.36929e-06, -9.17697e-06, 5.20649e-05};
   }
  }
  else if (dsNum == 2) DCR = {
    {578,  { 9.69557e-06,  -2.76078e-05,  3.75567e-05}},
    {579,  { 7.61677e-06,  -8.21504e-06,  1.82745e-05}},
    {580,  { 2.11267e-05,  -2.75272e-05,  6.89289e-05}},
    {581,  { 8.2628e-06,  -8.21323e-06,  2.08142e-05}},
    {582,  { 1.62733e-05,  -2.95275e-05,  4.59607e-05}},
    {592,  { 1.28495e-05,  -2.70194e-05,  5.11777e-05}},
    {593,  { 1.14086e-05,  -8.19e-06,  5.60298e-06}},
    {594, { 1.3281e-05, -2.89357e-05, 4.83379e-05}},
    {598,  { 9.25797e-06,  -2.76027e-05,  6.59659e-05}},
    {599,  { 3.08682e-06,  -8.18918e-06,  2.30625e-05}},
    {600,  { 2.32185e-05,  -2.68421e-05,  2.87403e-05}},
    {601,  { 1.05279e-05,  -7.93227e-06,  1.74462e-05}},
    {608,  { 1.2831e-05,  -2.75698e-05,  6.49342e-05}},
    {609,  { 4.62213e-06,  -8.08651e-06,  2.31736e-05}},
    {610,  { 8.96803e-06,  -2.72488e-05,  4.06323e-05}},
    {611,  { 9.09228e-06,  -8.13286e-06,  1.73676e-05}},
    {626,  { 9.75633e-06,  -2.73219e-05,  4.71756e-05}},
    {627,  { 3.518e-06,  -8.07716e-06,  1.79849e-05}},
    {632,  { 1.53405e-05,  -2.72767e-05,  2.48432e-05}},
    {633,  { 4.45487e-06,  -8.15709e-06,  1.91366e-05}},
    {640,  { 1.67035e-05,  -2.77929e-05,  4.83539e-05}},
    {641,  { 7.213e-06,  -8.19326e-06,  1.72911e-05}},
    {648,  { 2.24411e-05,  -2.81494e-05,  3.39972e-05}},
    {649,  { 2.48366e-05,  -8.37919e-06,  6.80758e-06}},
    {664,  { 2.18248e-05,  -2.76451e-05,  4.73036e-05}},
    {665,  { 1.16575e-05,  -8.27756e-06,  1.80424e-05}},
    {672,  { 6.11445e-06,  -2.81048e-05,  4.7954e-05}},
    {673,  { 7.45793e-06,  -8.299e-06,  1.6113e-05}},
    {690,  { 1.16444e-05,  -2.77084e-05,  5.97862e-05}},
    {691,  { 1.86328e-06,  -8.21933e-06,  1.8103e-05}},
    {692,  { 1.69961e-05,  -2.82421e-05,  3.71447e-05}},
    {693,  { 4.24578e-06,  -8.47289e-06,  1.40683e-05}}
  };
  else if (dsNum == 3) DCR = {
    {578,  { 4.72943e-05,  -3.20216e-05,  0.000130884}},
    {579,  { 1.57173e-05,  -9.52402e-06,  5.45475e-05}},
    {580,  { 2.51818e-05,  -3.17837e-05,  0.000230589}},
    {581,  { 1.82024e-05,  -9.46302e-06,  8.00717e-05}},
    {582,  { 7.11195e-05,  -3.42391e-05,  0.000140642}},
    {592,  { 0.000122093, -3.08078e-05, 0.000298766}},
    {593,  { 6.44852e-05,  -9.35803e-06,  0.000103261}},
    {594,  { 8.70877e-05, -3.37151e-05, 0.000100019}},
    {598,  { 5.41638e-05,  -3.19395e-05,  0.000115207}},
    {599,  { 3.13145e-05,  -9.48138e-06,  5.45241e-05}},
    {600,  { 7.36131e-05,  -3.1024e-05,  0.000100372}},
    {601,  { 5.96645e-05,  -9.17862e-06,  5.83305e-05}},
    {608,  { 5.62061e-05,  -3.1927e-05,  0.000233371}},
    {609,  { 8.24216e-06,  -9.35222e-06,  7.79953e-05}},
    {610,  { 3.1317e-05,  -3.17145e-05,  0.000130016}},
    {611,  { 3.33095e-05,  -9.47627e-06,  5.71128e-05}},
    {614,  { 6.73372e-05,  -3.3471e-05,  0.000171316}},
    {615,  { 2.33658e-05,  -9.87889e-06,  5.7292e-05}},
    {624,  { 9.76955e-05,  -3.3713e-05,  0.000116376}},
    {625,  { -2.14859e-05,  -9.82032e-06,  5.57909e-05}},
    {626,  { 4.04872e-05,  -3.17688e-05,  0.000105057}},
    {627,  { 1.09033e-05,  -9.38905e-06,  4.93741e-05}},
    {632,  { 8.84989e-05,  -3.16113e-05,  0.000173467}},
    {633,  { 7.42236e-06,  -9.43918e-06,  7.26088e-05}},
    {640,  { 8.38207e-05,  -3.20396e-05,  0.000107248}},
    {641,  { 3.84102e-05,  -9.44602e-06,  5.15427e-05}},
    {648,  { 0.000132416,  -3.26494e-05,  0.000178779}},
    {649,  { 1.62548e-05,  -9.70059e-06,  8.32917e-05}},
    {664,  { 8.03813e-05,  -3.20292e-05,  0.000129387}},
    {665,  { 3.12877e-05,  -9.59791e-06,  5.73086e-05}},
    {672,  { 4.29128e-05,  -3.26931e-05,  9.52533e-05}},
    {673,  { 3.2733e-05,  -9.67226e-06,  4.86157e-05}},
    {678,  { 0.000137483,  -3.67541e-05,  0.000237749}},
    {679,  { 7.40005e-05,  -1.0977e-05,  9.04743e-05}},
    {690,  { 4.06457e-05,  -3.21627e-05,  9.24248e-05}},
    {691,  { 1.40676e-05,  -9.55031e-06,  4.64941e-05}},
    {692,  { 6.59972e-05,  -3.26291e-05,  0.000190382}},
    {693,  { 3.20278e-05,  -9.81011e-06,  6.43601e-05}},
    {694,  { 6.86347e-05,  -3.40955e-05,  0.000127228}},
    {695,  { 6.06032e-05,  -1.01004e-05,  4.89232e-05}},
    };
  else if (dsNum == 4) DCR = {
    {1106, { 0.000116839, -3.11976e-05, 0.000161705}},
    {1107, { 7.30835e-05, -9.26603e-06, 5.54462e-05}},
    {1136,  { 5.41699e-05,  -3.11703e-05,  9.2581e-05}},
    {1137,  { 2.75375e-05,  -9.24087e-06,  3.77636e-05}},
    {1144, { 0.000177499, -3.10334e-05, 7.42981e-05}},
    {1145, { 7.5804e-05, -9.34926e-06, 3.12203e-05}},
    {1170,  { 0.000125225,  -3.02501e-05,  9.76758e-05}},
    {1171,  { 5.30975e-05,  -8.99507e-06,  5.7134e-05}},
    {1172,  { 8.4408e-05,  -3.1201e-05,  0.000268558}},
    {1173,  { 4.9782e-05,  -9.37928e-06,  9.62668e-05}},
    {1174,  { 8.95779e-05,  -3.23419e-05,  0.000114472}},
    {1176,  { 8.27872e-05,  -3.13367e-05,  0.000120172}},
    {1177,  { 4.70244e-05,  -9.35337e-06,  4.63595e-05}},
    {1204,  { 3.46081e-05,  -3.24435e-05,  0.000109783}},
    {1205,  { 5.46518e-05,  -9.58339e-06,  5.09473e-05}},
    {1232,  { 8.8926e-05,  -3.23022e-05,  8.21951e-05}},
    {1233,  { 6.57737e-05,  -9.59313e-06,  4.45303e-05}},
    {1236,  { 3.49412e-05,  -3.28738e-05,  8.86571e-05}},
    {1237,  { 5.88372e-05,  -9.77693e-06,  5.21346e-05}},
    {1296,  { 0.000308622,  -3.24702e-05,  4.40433e-05}},
    {1297,  { 0.000207102,  -9.77694e-06,  2.19372e-05}},
    {1298,  { 1.09807e-05,  -3.21636e-05,  9.83537e-05}},
    {1299,  { 4.4259e-05,  -9.40698e-06,  5.18342e-05}},
    {1330,  { 0.000163435,  -3.1266e-05,  9.73218e-05}},
    {1331,  { 8.4225e-05,  -9.36787e-06,  5.18174e-05}},
    {1332,  { 5.03553e-05,  -3.18826e-05,  0.000172257}},
    {1333,  { 6.4288e-05,  -9.6671e-06,  7.60861e-05}}
  };
  else if (dsNum == 5){
    DCR = {
    {584, { 0.000104174, -3.22538e-05, 0.000590302}},
    {585, { 4.6851e-05, -9.53082e-06, 0.000178973}},
    {592, { 5.19976e-05, -3.22455e-05, 0.000258205}},
    {593, { 4.98123e-05, -9.79272e-06, 8.41942e-05}},
    {598, { 8.95193e-05, -3.67683e-05, 0.00034816}},
    {599, { 3.94149e-05, -1.09326e-05, 0.000112472}},
    {608, { 7.41089e-05, -3.18892e-05, 0.000579159}},
    {609, { 9.29066e-06, -9.34405e-06, 0.000169684}},
    {610, { 4.16738e-05, -3.16896e-05, 0.000499084}},
    {611, { 3.15653e-05, -9.46735e-06, 0.000154036}},
    {614, { 6.5981e-05, -3.3447e-05, 0.000466784}},
    {615, { 1.46842e-05, -9.8708e-06, 0.000129505}},
    {624, { 8.49101e-05, -3.37113e-05, 0.000218981}},
    {625, { -3.30449e-05, -9.82242e-06, 7.34392e-05}},
    {626, { 5.31268e-05, -3.16889e-05, 0.00025409}},
    {627, { 1.84408e-05, -9.37093e-06, 8.50126e-05}},
    {628, { 7.31889e-05, -3.42199e-05, 0.000228541}},
    {629, { 2.36874e-05, -1.03115e-05, 7.2821e-05}},
    {632, { 8.97799e-05, -3.16093e-05, 0.000288457}},
    {633, { -1.89593e-06, -9.43445e-06, 0.000100948}},
    {640, { 4.91784e-05, -3.2016e-05, 0.000404973}},
    {641, { 2.23594e-05, -9.43202e-06, 0.000127193}},
    {648, { 0.000119572, -3.25958e-05, 0.000521543}},
    {649, { 1.19974e-05, -9.6856e-06, 0.000173051}},
    {658, { 6.58741e-05, -3.16435e-05, 0.00053082}},
    {659, { 3.87195e-05, -9.39425e-06, 0.000158714}},
    {660, { 0.000105499, -3.13581e-05, 0.000532902}},
    {661, { 8.7349e-06, -9.38255e-06, 0.000163403}},
    {662, { 0.000118757, -3.41511e-05, 0.000567186}},
    {663, { 1.5518e-06, -1.00976e-05, 0.000174283}},
    {672, { 0.000138045, -3.16162e-05, 0.000367906}},
    {673, { 2.56362e-05, -9.33845e-06, 8.7113e-05}},
    {674, { 5.9844e-06, -3.35672e-05, 0.000251761}},
    {675, { 8.56422e-06, -1.00138e-05, 8.08072e-05}},
    {678, { 6.46432e-05, -3.17821e-05, 0.000493127}},
    {679, { 5.44811e-05, -9.495e-06, 0.000145554}},
    {680, { 0.000109183, -3.1594e-05, 0.000195324}},
    {681, { 1.33682e-05, -9.24532e-06, 6.65635e-05}},
    {688, { 8.30081e-05, -3.38104e-05, 0.000221619}},
    {689, { 2.85912e-05, -1.00189e-05, 7.23929e-05}},
    {690, { 2.95369e-05, -3.22867e-05, 0.000248802}},
    {691, { 1.10421e-05, -9.58901e-06, 8.63481e-05}},
    {692, { 0.000168463, -3.25966e-05, 0.00121842}},
    {693, { 6.06626e-05, -9.80549e-06, 0.000531336}},
    {694, { 6.80487e-05, -3.40656e-05, 0.00024089}},
    {695, { 5.53759e-05, -1.00892e-05, 7.55424e-05}},
    {1106, { 8.83107e-05, -3.14179e-05, 0.000472813}},
    {1107, { 6.41004e-05, -9.34427e-06, 0.000147106}},
    {1120, { 6.33983e-05, -3.18715e-05, 0.000110854}},
    {1121, { 4.18019e-05, -9.44358e-06, 4.81697e-05}},
    {1124, { 9.95189e-05, -3.09313e-05, 0.000111156}},
    {1125, { 7.22315e-05, -9.18712e-06, 5.27749e-05}},
    {1128, { 0.000191498, -3.20874e-05, 0.000100715}},
    {1129, { 0.000106931, -9.41825e-06, 4.3749e-05}},
    {1170, { 0.000117973, -3.03232e-05, 9.58967e-05}},
    {1171, { 5.31896e-05, -9.01939e-06, 5.84109e-05}},
    {1172, { 4.24108e-05, -3.14381e-05, 0.000239498}},
    {1173, { 4.06403e-05, -9.44911e-06, 9.56641e-05}},
    {1174, { 7.53804e-05, -3.23762e-05, 0.000117442}},
    {1175, { 3.68513e-05, -9.59e-06, 5.51511e-05}},
    {1176, { 4.54094e-05, -3.14036e-05, 0.0001385}},
    {1177, { 4.07664e-05, -9.37543e-06, 4.86889e-05}},
    {1204, { 1.9857e-05, -3.17059e-05, 0.000292786}},
    {1205, { 1.60347e-06, -9.47387e-06, 9.25044e-05}},
    {1208, { 8.66904e-05, -3.133e-05, 0.000105956}},
    {1209, { 3.60761e-05, -9.2665e-06, 4.31418e-05}},
    {1232, { 8.85069e-05, -3.28269e-05, 0.000565101}},
    {1233, { 6.14588e-05, -9.81338e-06, 0.000173292}},
    {1236, { 4.81092e-05, -3.357e-05, 0.000537732}},
    {1237, { 3.3736e-05, -9.90222e-06, 0.000177431}},
    {1298, { 2.28867e-05, -3.26853e-05, 0.000757575}},
    {1299, { 4.67106e-05, -9.56749e-06, 0.000223477}},
    {1330, { 0.000168236, -3.16176e-05, 0.00066114}},
    {1331, { 0.000102607, -9.48149e-06, 0.000201962}},
    {1332, { 5.73227e-05, -3.22127e-05, 0.000744049}},
    {1333, { 7.47053e-05, -9.76425e-06, 0.000226081}},
    };
    if(run>21831){
      DCR = {
      {584, { 3.66736e-05, -3.22725e-05, 0.000117385}},
      {585, { 3.10395e-05, -9.53746e-06, 5.18602e-05}},
      {592, { 3.21167e-05, -3.22643e-05, 0.000101348}},
      {593, { 5.08807e-05, -9.79711e-06, 5.31335e-05}},
      {598, { 5.95645e-05, -3.67757e-05, 0.000211022}},
      {599, { 3.19836e-05, -1.09369e-05, 8.01653e-05}},
      {608, { 2.18113e-05, -3.19177e-05, 0.000221631}},
      {609, { -4.44331e-06, -9.35114e-06, 7.65648e-05}},
      {610, { 5.31024e-06, -3.17183e-05, 0.000115119}},
      {611, { 2.67416e-05, -9.47801e-06, 5.34654e-05}},
      {614, { 4.70795e-05, -3.3471e-05, 0.000167563}},
      {615, { 3.90155e-06, -9.87048e-06, 5.93623e-05}},
      {624, { 8.10757e-05, -3.37304e-05, 0.000112228}},
      {625, { -3.43934e-05, -9.82172e-06, 5.71186e-05}},
      {626, { 1.44258e-05, -3.16166e-05, 0.000102376}},
      {627, { 6.12374e-06, -9.34698e-06, 5.0084e-05}},
      {628, { 8.62796e-05, -3.42558e-05, 9.98076e-05}},
      {629, { 1.68397e-05, -1.03135e-05, 4.51729e-05}},
      {632, { 6.79903e-05, -3.16292e-05, 0.000159749}},
      {633, { -2.24705e-07, -9.44128e-06, 7.1368e-05}},
      {640, { 6.22019e-05, -3.20482e-05, 0.000111409}},
      {641, { 2.7344e-05, -9.44336e-06, 5.3524e-05}},
      {648, { 8.41993e-05, -3.26242e-05, 0.000154074}},
      {649, { -5.50769e-06, -9.69152e-06, 8.1778e-05}},
      {658, { 1.35826e-05, -3.16631e-05, 0.000121948}},
      {659, { 3.30901e-05, -9.40299e-06, 5.45401e-05}},
      {660, { 6.14612e-05, -3.13712e-05, 0.000222112}},
      {661, { 1.83898e-05, -9.39781e-06, 8.34349e-05}},
      {662, { 6.89066e-05, -3.4174e-05, 0.000128248}},
      {663, { 6.70483e-06, -1.01123e-05, 6.02739e-05}},
      {672, { 4.93789e-05, -3.15968e-05, 0.000149673}},
      {673, { 3.55392e-05, -9.3411e-06, 6.99162e-05}},
      {674, { -4.45649e-06, -3.36048e-05, 9.99357e-05}},
      {675, { 1.10033e-05, -1.00231e-05, 4.435e-05}},
      {678, { 4.72249e-05, -3.19245e-05, 0.000107105}},
      {679, { 4.71466e-05, -9.53437e-06, 4.64032e-05}},
      {680, { 0.000101568, -3.15997e-05, 9.81386e-05}},
      {681, { 1.0745e-05, -9.24683e-06, 4.77352e-05}},
      {688, { 7.81064e-05, -3.38261e-05, 0.000121234}},
      {689, { 2.89652e-05, -1.00243e-05, 5.12371e-05}},
      {690, { 3.00867e-05, -3.23312e-05, 8.85515e-05}},
      {691, { 1.5629e-05, -9.59951e-06, 4.6522e-05}},
      {692, { 5.00614e-05, -3.2601e-05, 0.000127227}},
      {693, { 3.51322e-05, -9.80195e-06, 4.8922e-05}},
      {694, { 5.85328e-05, -3.4083e-05, 0.00012298}},
      {695, { 5.73247e-05, -1.00974e-05, 4.93493e-05}},
      {1106, { 0.000126336, -3.16182e-05, 0.000187253}},
      {1107, { 6.51599e-05, -9.38664e-06, 6.78132e-05}},
      {1110, { 2.91146e-05, -3.20899e-05, 0.000157183}},
      {1111, { 3.68585e-05, -9.52376e-06, 6.99448e-05}},
      {1120, { 6.42472e-05, -3.18808e-05, 0.000111793}},
      {1121, { 3.92505e-05, -9.447e-06, 4.89416e-05}},
      {1124, { 9.40643e-05, -3.094e-05, 0.000109677}},
      {1125, { 6.41479e-05, -9.18823e-06, 5.08326e-05}},
      {1128, { 0.000189167, -3.20884e-05, 8.91728e-05}},
      {1129, { 0.000103416, -9.41935e-06, 4.0802e-05}},
      {1170, { 0.000119271, -3.03282e-05, 9.06164e-05}},
      {1171, { 5.63004e-05, -9.02364e-06, 5.83083e-05}},
      {1172, { 3.14913e-05, -3.14402e-05, 0.000236715}},
      {1173, { 3.148e-05, -9.45126e-06, 8.93531e-05}},
      {1174, { 7.14474e-05, -3.2385e-05, 0.000115429}},
      {1175, { 3.86133e-05, -9.59652e-06, 5.49259e-05}},
      {1176, { 4.59864e-05, -3.14017e-05, 0.000133742}},
      {1177, { 4.20062e-05, -9.37861e-06, 4.89461e-05}},
      {1204, { 1.29693e-05, -3.16711e-05, 0.000238387}},
      {1205, { -1.19997e-06, -9.46787e-06, 8.25937e-05}},
      {1208, { 7.58823e-05, -3.13279e-05, 0.000104255}},
      {1209, { 3.12329e-05, -9.26542e-06, 4.33264e-05}},
      {1232, { 4.83498e-05, -3.28826e-05, 0.000105769}},
      {1233, { 5.39505e-05, -9.82636e-06, 6.06783e-05}},
      {1236, { 2.63609e-05, -3.35989e-05, 0.000111126}},
      {1237, { 2.8279e-05, -9.9197e-06, 5.60338e-05}},
      {1298, { -7.8597e-06, -3.27583e-05, 0.00013666}},
      {1299, { 3.29835e-05, -9.5825e-06, 6.65099e-05}},
      {1302, { 2.83334e-06, -3.18457e-05, 0.00013437}},
      {1303, { 5.40574e-05, -9.40379e-06, 8.0982e-05}},
      {1330, { 0.000165384, -3.17506e-05, 0.000117036}},
      {1331, { 9.93422e-05, -9.51671e-06, 6.32751e-05}},
      {1332, { 7.47816e-05, -3.2395e-05, 0.000171406}},
      {1333, { 7.10822e-05, -9.81521e-06, 8.47117e-05}},
      };
    }
    if(run>=25479){
      DCR = {
      {584, { 4.40882e-05, -3.23e-05, 0.000122132}},
      {585, { 4.05615e-05, -9.55069e-06, 5.19826e-05}},
      {592, { 3.56826e-05, -3.2289e-05, 0.000100385}},
      {593, { 4.78647e-05, -9.80368e-06, 5.22328e-05}},
      {598, { 5.67269e-05, -3.68205e-05, 0.00021734}},
      {599, { 3.08932e-05, -1.09508e-05, 7.98346e-05}},
      {608, { 2.75641e-05, -3.192e-05, 0.000222511}},
      {609, { 2.79413e-06, -9.35335e-06, 7.61828e-05}},
      {610, { 1.27829e-05, -3.17308e-05, 0.000114372}},
      {611, { 3.04219e-05, -9.48409e-06, 5.52984e-05}},
      {614, { 2.65569e-05, -3.34695e-05, 0.000182045}},
      {615, { 1.04438e-05, -9.87634e-06, 6.22704e-05}},
      {624, { 5.22576e-05, -3.37347e-05, 0.00010709}},
      {625, { -3.90071e-05, -9.82655e-06, 5.64098e-05}},
      {626, { 2.69322e-05, -3.17835e-05, 0.000102295}},
      {627, { 1.02543e-05, -9.39547e-06, 4.90219e-05}},
      {628, { 8.96468e-05, -3.42757e-05, 9.94121e-05}},
      {629, { 2.56677e-05, -1.0322e-05, 4.33377e-05}},
      {632, { 7.92111e-05, -3.16378e-05, 0.000155331}},
      {633, { 2.96428e-06, -9.44219e-06, 7.15278e-05}},
      {640, { 6.70857e-05, -3.20481e-05, 0.000111931}},
      {641, { 2.84153e-05, -9.44663e-06, 5.17502e-05}},
      {648, { 9.36347e-05, -3.26484e-05, 0.000156733}},
      {649, { 6.69134e-06, -9.7e-06, 8.10681e-05}},
      {658, { 2.49303e-05, -3.17232e-05, 0.000126172}},
      {659, { 1.94857e-05, -9.41222e-06, 5.30577e-05}},
      {660, { 7.89242e-05, -3.1422e-05, 0.000228983}},
      {661, { 7.26355e-06, -9.40335e-06, 8.00056e-05}},
      {662, { 6.73897e-05, -3.42239e-05, 0.000131547}},
      {663, { -1.45971e-05, -1.01171e-05, 5.97109e-05}},
      {672, { 3.20282e-05, -3.16705e-05, 0.000161286}},
      {673, { 2.70687e-05, -9.37386e-06, 6.83145e-05}},
      {674, { -1.21275e-05, -3.35988e-05, 0.000103965}},
      {675, { 1.2784e-05, -1.00296e-05, 4.57272e-05}},
      {678, { 3.06716e-05, -3.1892e-05, 0.000105916}},
      {679, { 4.65692e-05, -9.53002e-06, 4.61739e-05}},
      {680, { 9.4786e-05, -3.16204e-05, 0.0001034}},
      {681, { 2.29226e-05, -9.2557e-06, 4.87721e-05}},
      {688, { 9.13009e-05, -3.38433e-05, 0.000123833}},
      {689, { 2.51059e-05, -1.00267e-05, 5.26792e-05}},
      {690, { 3.08925e-05, -3.21602e-05, 9.60627e-05}},
      {691, { 2.65278e-05, -9.55906e-06, 4.7272e-05}},
      {694, { 8.88448e-05, -3.41134e-05, 0.000122657}},
      {695, { 6.33346e-05, -1.01111e-05, 5.05077e-05}},
      {1106, { 8.37662e-05, -3.12411e-05, 0.00015599}},
      {1107, { 5.49692e-05, -9.27889e-06, 6.08967e-05}},
      {1120, { 7.73191e-05, -3.19097e-05, 0.000107596}},
      {1121, { 4.51179e-05, -9.45518e-06, 4.80584e-05}},
      {1124, { 0.000111181, -3.09457e-05, 9.8911e-05}},
      {1125, { 7.64536e-05, -9.19276e-06, 5.05576e-05}},
      {1128, { 0.000175478, -3.20985e-05, 9.72708e-05}},
      {1129, { 0.000102675, -9.42297e-06, 4.32398e-05}},
      {1170, { 0.000105261, -3.03324e-05, 9.12243e-05}},
      {1171, { 5.93609e-05, -9.03186e-06, 6.4744e-05}},
      {1172, { 3.17509e-05, -3.14537e-05, 0.000233474}},
      {1173, { 4.14915e-05, -9.46231e-06, 9.08267e-05}},
      {1174, { 7.67826e-05, -3.23958e-05, 0.000115293}},
      {1175, { 4.38107e-05, -9.60291e-06, 5.75859e-05}},
      {1176, { 6.54699e-05, -3.14256e-05, 0.000133972}},
      {1177, { 5.61226e-05, -9.39296e-06, 5.27083e-05}},
      {1204, { 1.06158e-05, -3.20475e-05, 0.000115123}},
      {1205, { -1.68805e-06, -9.57892e-06, 5.31552e-05}},
      {1208, { 5.90467e-05, -3.13249e-05, 0.000100687}},
      {1209, { 2.01893e-05, -9.25944e-06, 4.24622e-05}},
      {1232, { 4.20482e-05, -3.24187e-05, 9.35519e-05}},
      {1233, { 3.35903e-05, -9.67602e-06, 5.22056e-05}},
      {1236, { 1.83871e-05, -3.30946e-05, 9.63378e-05}},
      {1237, { 2.38044e-05, -9.76866e-06, 4.56341e-05}},
      {1298, { -4.91153e-06, -3.22915e-05, 0.000118882}},
      {1299, { 3.48351e-05, -9.44389e-06, 5.48349e-05}},
      {1330, { 0.000155252, -3.13063e-05, 9.14418e-05}},
      {1331, { 9.96566e-05, -9.39059e-06, 5.36202e-05}},
      {1332, { 5.22682e-05, -3.19237e-05, 0.000158725}},
      {1333, { 6.19838e-05, -9.67661e-06, 7.48408e-05}},
      };
    }
   if(run>=22636 && run <= 24105){
      DCR[674] =  { -7.56191e-06, -3.34978e-05, 0.000102015};
      DCR[675] =  { 9.01334e-06, -9.99713e-06, 4.67391e-05};
    }
   if(run>=22636 && run <= 23176){
      DCR[690] = { 1.51783e-05, -3.22531e-05, 0.000280346};
      DCR[691] = { 9.55238e-06, -9.58005e-06, 9.49695e-05};
      DCR[1232] = { 4.20482e-05, -3.24187e-05, 9.35519e-05};
      DCR[1233] = { 3.35903e-05, -9.67602e-06, 5.22056e-05};
      DCR[1236] = { 1.83871e-05, -3.30946e-05, 9.63378e-05};
      DCR[1237] = { 2.38044e-05, -9.76866e-06, 4.56341e-05};
    }
   if(run>=23509 && run <= 25489){
      DCR[690] = { 2.88637e-05, -3.21623e-05, 9.33066e-05};
      DCR[691] = { 1.2952e-05, -9.55379e-06, 4.75052e-05};
    }
   if(run>=23929 && run <= 24101){
      DCR[1106] = { 4.59361e-05, -3.11932e-05, 0.000159795};
      DCR[1107] = { 3.01309e-05, -9.25533e-06, 5.93021e-05};
      DCR[1298] = { 1.68334e-05, -3.22735e-05, 0.000175847};
      DCR[1299] = { 2.7597e-05, -9.43486e-06, 6.30464e-05};
      DCR[1302] = { 6.55901e-06, -3.13792e-05, 0.000183893};
      DCR[1303] = { 4.06485e-05, -9.25971e-06, 7.19642e-05};
    }
    if(run>= 24780){
      DCR[1232] = { 4.20482e-05, -3.24187e-05, 9.35519e-05};
      DCR[1233] = { 3.35903e-05, -9.67602e-06, 5.22056e-05};
      DCR[1236] = { 1.83871e-05, -3.30946e-05, 9.63378e-05};
      DCR[1237] = { 2.38044e-05, -9.76866e-06, 4.56341e-05};
    }
  }
  else if (dsNum == 6) DCR = {
    {584, { 1.91896e-05, -2.7837e-05, 4.47459e-05}},
    {585, { 1.35105e-05, -8.22268e-06, 1.54248e-05}},
    {592, { 9.6109e-06, -2.77336e-05, 4.48408e-05}},
    {593, { 6.0547e-06, -8.41196e-06, 1.79644e-05}},
    {598, { 1.78695e-05, -3.15936e-05, 4.77728e-05}},
    {599, { 7.88348e-06, -9.38652e-06, 1.90996e-05}},
    {608, { 2.07372e-05, -2.75893e-05, 6.6879e-05}},
    {609, { 6.46719e-06, -8.09099e-06, 2.31991e-05}},
    {610, { 7.24e-06, -2.73492e-05, 3.95855e-05}},
    {611, { 1.02413e-05, -8.16671e-06, 1.5913e-05}},
    {614, { 2.9969e-05, -2.90112e-05, 5.68832e-05}},
    {615, { 1.30086e-05, -8.55609e-06, 1.84484e-05}},
    {624, { 4.0079e-05, -2.91079e-05, 3.06643e-05}},
    {625, { 6.82581e-06, -8.49156e-06, 1.34556e-05}},
    {626, { 8.98508e-06, -2.73901e-05, 3.69328e-05}},
    {627, { 2.66945e-06, -8.10052e-06, 1.47322e-05}},
    {628, { 2.89643e-05, -2.94593e-05, 3.49605e-05}},
    {629, { 1.93703e-05, -8.88723e-06, 1.29902e-05}},
    {632, { 1.67793e-05, -2.72646e-05, 4.30559e-05}},
    {633, { 6.7914e-06, -8.15274e-06, 1.85546e-05}},
    {640, { 1.71902e-05, -2.77537e-05, 4.36599e-05}},
    {641, { 6.57479e-06, -8.18027e-06, 1.5968e-05}},
    {648, { 2.02398e-05, -2.81227e-05, 3.38356e-05}},
    {649, { 1.86445e-05, -8.37998e-06, 1.94146e-05}},
    {658, { 9.22885e-06, -2.72538e-05, 3.87838e-05}},
    {659, { 6.85367e-06, -8.08276e-06, 1.45387e-05}},
    {660, { 2.93617e-05, -2.71753e-05, 6.53951e-05}},
    {661, { 2.61221e-06, -8.13513e-06, 2.42363e-05}},
    {662, { 2.08051e-05, -2.94452e-05, 4.09729e-05}},
    {663, { 5.09473e-06, -8.71388e-06, 1.72891e-05}},
    {672, { 2.72435e-05, -2.73643e-05, 5.26579e-05}},
    {673, { 9.8499e-06, -8.08067e-06, 1.71151e-05}},
    {678, { 1.3102e-05, -2.75134e-05, 4.51487e-05}},
    {679, { 1.19035e-05, -8.20676e-06, 1.62019e-05}},
    {680, { 3.06398e-05, -2.73016e-05, 2.60773e-05}},
    {681, { 7.39402e-06, -7.99243e-06, 1.15157e-05}},
    {688, { 3.93945e-05, -2.93767e-05, 3.67115e-05}},
    {689, { 2.2915e-05, -8.71865e-06, 1.55753e-05}},
    {690, { 1.2083e-05, -2.77209e-05, 3.72836e-05}},
    {691, { 2.23742e-06, -8.22306e-06, 1.44788e-05}},
    {694, { 2.02196e-05, -2.94905e-05, 3.87078e-05}},
    {695, { 1.92391e-05, -8.7367e-06, 1.43136e-05}},
    {1106, { 4.69514e-05, -2.726e-05, 4.45733e-05}},
    {1107, { 1.85278e-05, -8.08111e-06, 1.43293e-05}},
    {1110, { 1.48251e-05, -2.7415e-05, 3.55544e-05}},
    {1111, { 3.83979e-06, -8.12236e-06, 1.55392e-05}},
    {1120, { 3.85422e-05, -2.75614e-05, 3.24992e-05}},
    {1121, { 1.41146e-05, -8.15592e-06, 1.28481e-05}},
    {1124, { 4.54806e-05, -2.68558e-05, 3.15734e-05}},
    {1125, { 1.80598e-05, -7.96511e-06, 1.30764e-05}},
    {1128, { 7.80572e-05, -2.77033e-05, 2.58208e-05}},
    {1129, { 3.13924e-05, -8.09878e-06, 9.88334e-06}},
    {1170, { 4.78102e-05, -2.62115e-05, 2.92258e-05}},
    {1171, { 1.59641e-05, -7.78928e-06, 1.45089e-05}},
    {1172, { 1.66649e-05, -2.72266e-05, 6.30427e-05}},
    {1173, { 1.05895e-06, -8.16834e-06, 2.4996e-05}},
    {1174, { 2.64319e-05, -2.79803e-05, 3.34718e-05}},
    {1175, { 6.82721e-06, -8.28062e-06, 1.5393e-05}},
    {1176, { 1.12619e-05, -2.70221e-05, 7.66971e-05}},
    {1177, { 1.2187e-05, -8.07061e-06, 2.19886e-05}},
    {1204, { 1.3186e-05, -2.76299e-05, 3.88656e-05}},
    {1205, { 9.99726e-06, -8.26219e-06, 1.63731e-05}},
    {1208, { 3.6986e-05, -2.70484e-05, 2.97412e-05}},
    {1209, { 1.26657e-05, -7.99213e-06, 1.10025e-05}},
    {1232, { 3.03275e-05, -2.798e-05, 2.44941e-05}},
    {1233, { 1.20969e-05, -8.32559e-06, 1.23671e-05}},
    {1298, { 1.10585e-05, -2.78951e-05, 5.14128e-05}},
    {1299, { 3.16306e-06, -8.12478e-06, 1.86026e-05}},
    {1302, { 1.80539e-05, -2.71912e-05, 3.3723e-05}},
    {1303, { 6.3412e-06, -7.99545e-06, 1.67914e-05}},
    {1330, { 5.6231e-05, -2.70469e-05, 2.86047e-05}},
    {1331, { 2.06036e-05, -8.09496e-06, 1.26033e-05}},
    {1332, { 2.55849e-05, -2.75709e-05, 4.05597e-05}},
    {1333, { 9.32543e-06, -8.33993e-06, 1.75658e-05}},
  };
  else return 0;

  // Calculate DCR only if we have trapMax and an "isGood" detector.
  if (trapMax == 0) return 0;
  else if (DCR.find(chan) == DCR.end()) return nlcblrwfSlope/trapMax;
  else return nlcblrwfSlope - (DCR[chan][0] + trapMax * DCR[chan][1]) - DCR[chan][2];
}


double GetDCRCTC90(int chan, double nlcblrwfSlope, double trapE, double trapMax, int dsNum)
{
  // DCR with charge trapping correction applied
  map<int,vector<double>> DCR;
  if(dsNum == 3) DCR = {
    //params updated 26 Jan 2017, using updated DS 3 AvsE
    {578, { 1.127394E-04, -2.433297E-04, 6.153314E-05, -3.202111E-05, 1.150849E-04}},
    {579, { 7.235269E-05, -5.314217E-04, 1.867161E-05, -9.518036E-06, 4.930772E-05}},
    {580, { 1.738967E-04, -1.606743E-04, 4.458943E-05, -3.179558E-05, 1.454872E-04}},
    {581, { 6.522808E-05, -1.579528E-04, 4.755118E-05, -9.476431E-06, 5.590125E-05}},
    {582, { 1.235261E-04, -3.158980E-04, 4.344448E-05, -3.423551E-05, 1.325392E-04}},
    {592, { 2.108174E-04, -1.846621E-04, 2.330795E-05, -3.082218E-05, 1.835619E-04}},
    {593, { 9.618042E-05, -2.638546E-04, 3.677377E-05, -9.338063E-06, 7.914180E-05}},
    {594, { 1.766883E-04, -6.883060E-04, 1.569557E-04, -3.370489E-05, 1.086235E-04}},
    {598, { 1.538365E-04, -3.788839E-04, 4.309318E-05, -3.192628E-05, 1.158028E-04}},
    {599, { 5.331744E-05, -2.472075E-04, 3.662790E-05, -9.482648E-06, 5.251377E-05}},
    {600, { 3.970803E-04, -6.189204E-04, 9.320193E-05, -3.101883E-05, 9.693572E-05}},
    {601, { 1.355323E-04, -4.784889E-04, -1.547546E-05, -9.212459E-06, 5.789839E-05}},
    {608, { 1.513094E-04, -2.056450E-04, 4.419241E-05, -3.198043E-05, 1.642101E-04}},
    {609, { 5.864419E-05, -2.491374E-04, 1.282546E-05, -9.367739E-06, 5.935112E-05}},
    {610, { 1.635264E-04, -5.584308E-04, 2.390021E-06, -3.172120E-05, 1.147398E-04}},
    {611, { 5.995284E-05, -4.999357E-04, 3.654757E-05, -9.470468E-06, 5.311655E-05}},
    {614, { 1.571440E-04, -2.201333E-04, 9.170683E-05, -3.349689E-05, 1.526042E-04}},
    {615, { 5.917700E-05, -2.414154E-04, 3.863961E-05, -9.895673E-06, 5.389743E-05}},
    {624, { 2.698744E-04, -5.246425E-04, 1.073635E-04, -3.372771E-05, 1.188775E-04}},
    {625, { 1.145199E-04, -4.571575E-04, 2.245688E-05, -9.844269E-06, 5.938712E-05}},
    {626, { 9.943684E-05, -4.822379E-04, 6.128326E-05, -3.176414E-05, 1.075445E-04}},
    {627, { 3.446802E-05, -4.026681E-04, 2.297720E-05, -9.381861E-06, 5.024683E-05}},
    {632, { 1.729608E-04, -3.541229E-04, -3.290756E-05, -3.161975E-05, 1.421823E-04}},
    {633, { 5.123398E-05, -2.273723E-04, 1.023045E-06, -9.457910E-06, 6.580567E-05}},
    {640, { 2.069584E-04, -4.945272E-04, 7.722267E-05, -3.203165E-05, 1.161178E-04}},
    {641, { 6.346157E-05, -3.367259E-04, 3.714462E-05, -9.444573E-06, 5.274827E-05}},
    {648, { 1.725229E-04, -3.497286E-04, -1.395188E-05, -3.264036E-05, 1.254127E-04}},
    {649, { 5.430675E-05, -2.314091E-04, -8.944687E-06, -9.703637E-06, 7.539341E-05}},
    {664, { 8.734885E-05, -3.937745E-04, 8.975668E-05, -3.202976E-05, 1.243938E-04}},
    {665, { 2.433784E-05, -2.586932E-04, 3.979345E-05, -9.595988E-06, 5.574878E-05}},
    {672, { 2.563171E-04, -6.349953E-04, 6.899191E-05, -3.267645E-05, 1.020221E-04}},
    {673, { 4.690967E-05, -1.717128E-04, 2.536466E-05, -9.654297E-06, 4.957713E-05}},
    {678, { 1.411855E-04, -2.147832E-04, 3.559417E-05, -3.674342E-05, 1.590019E-04}},
    {679, { 6.143846E-05, -2.302520E-04, 2.409803E-05, -1.095705E-05, 5.802272E-05}},
    {690, { 2.192544E-04, -8.526074E-04, 8.128862E-05, -3.215197E-05, 1.009718E-04}},
    {691, { 1.295922E-04, -1.067913E-03, 6.163567E-05, -9.559764E-06, 4.852831E-05}},
    {692, { 2.372333E-04, -3.010077E-04, 8.859344E-05, -3.262989E-05, 1.782932E-04}},
    {693, { 1.596905E-04, -5.558878E-04, 5.573115E-05, -9.830307E-06, 6.304652E-05}},
    {694, { 2.179297E-04, -3.221275E-04, 6.854911E-05, -3.408329E-05, 1.182403E-04}},
    {695, { 8.287052E-05, -3.267436E-04, 5.095433E-05, -1.010929E-05, 4.731396E-05}}
  };
  if(dsNum == 4) DCR = {
    {1106, { 2.280664E-04, -3.005270E-04, 1.585164E-04, -3.110136E-05, 1.319380E-04}},
    {1107, { 6.735549E-05, -2.409237E-04, 8.310126E-05, -9.257286E-06, 4.639398E-05}},
    {1136, { 2.432154E-04, -3.340925E-04, 1.373025E-04, -3.117127E-05, 9.067373E-05}},
    {1137, { 1.155699E-04, -4.071065E-04, 5.520871E-05, -9.248161E-06, 3.814742E-05}},
    {1144, { 3.996635E-04, -5.550602E-04, 2.612822E-04, -3.102647E-05, 8.407006E-05}},
    {1145, { 2.510294E-04, -6.922776E-04, 1.742175E-04, -9.358991E-06, 3.928366E-05}},
    {1170, { 2.634281E-04, -3.208118E-04, 1.680486E-04, -3.024031E-05, 9.169512E-05}},
    {1171, { 1.558809E-04, -5.037593E-04, 1.080515E-04, -9.002678E-06, 5.471471E-05}},
    {1172, { 2.294414E-04, -2.090438E-04, 1.313878E-04, -3.115949E-05, 1.516341E-04}},
    {1173, { 8.541671E-05, -2.124352E-04, 8.131950E-05, -9.374774E-06, 7.122980E-05}},
    {1174, { 2.338199E-04, -1.781426E-04, 7.496339E-05, -3.228964E-05, 1.141873E-04}},
    {1176, { -1.430449E-08, 3.443593E-03, 8.169231E-05, -3.133717E-05, 1.163027E-04}},
    {1177, { 1.582782E-04, -1.103157E-03, 5.857280E-05, -9.356245E-06, 4.853332E-05}},
    {1204, { 1.290170E-04, -1.577457E-04, 5.987632E-05, -3.245611E-05, 1.105412E-04}},
    {1205, { 5.155111E-05, -1.882470E-04, 6.155698E-05, -9.583817E-06, 5.184528E-05}},
    {1232, { 5.862128E-04, -8.824675E-04, 1.358949E-04, -3.231454E-05, 9.651307E-05}},
    {1233, { 2.021734E-04, -6.922000E-04, 7.511586E-05, -9.600501E-06, 4.866403E-05}},
    {1236, { 5.169144E-04, -1.796068E-03, 3.933840E-05, -3.287496E-05, 8.986392E-05}},
    {1237, { 5.053424E-05, -6.511982E-04, 5.594828E-05, -9.776989E-06, 5.220814E-05}},
    {1296, { 7.507806E-04, -4.953029E-04, 2.479104E-04, -3.237509E-05, 1.073754E-04}},
    {1297, { 5.060572E-04, -6.827946E-04, 4.391638E-05, -9.749360E-06, 5.963386E-05}},
    {1298, { 1.517395E-04, -5.723059E-04, 1.302316E-05, -3.216506E-05, 1.000615E-04}},
    {1299, { 4.137805E-05, -4.922765E-04, 5.215931E-05, -9.408508E-06, 5.167422E-05}},
    {1330, { 1.008143E-03, -3.838487E-04, 1.565639E-04, -3.112789E-05, 1.154411E-04}},
    {1331, { 3.287850E-04, -3.059999E-04, 1.051466E-05, -9.332279E-06, 5.966420E-05}},
    {1332, { 1.720117E-04, -2.109293E-04, 7.220260E-05, -3.190263E-05, 1.329770E-04}},
    {1333, { 6.012840E-05, -1.833330E-04, 6.935094E-05, -9.671974E-06, 6.534142E-05}}
  };
  else return 0;

  // Calculate DCR only if we have trapMax and an "isGood" detector.
  if (trapMax == 0) return 0;
  else if (DCR.find(chan) == DCR.end()) return nlcblrwfSlope/trapMax;
  else return nlcblrwfSlope-((DCR[chan][0]*exp(DCR[chan][1]*trapMax))*(trapE-trapMax))-(DCR[chan][2]+trapMax*DCR[chan][3])-DCR[chan][4];
}


double GetDCR85(int chan, double nlcblrwfSlope, double trapMax, int dsNum, int run)
{
  map<int,vector<double>> DCR;
  if (dsNum == 0) {
    DCR = {
      {576, { 2.39111e-05}},
      {577, { 1.04029e-05}},
      {592, { 2.83483e-05}},
      {593, { 1.16895e-05}},
      {594, { 2.42468e-05}},
      {595, { 1.06453e-05}},
      {598, { 2.74809e-05}},
      {599, { 1.2606e-05}},
      {600, { 2.1954e-05}},
      {601, { 1.32869e-05}},
      {608, { 2.24825e-05}},
      {609, { 9.81459e-06}},
      {610, { 2.79304e-05}},
      {611, { 1.17598e-05}},
      {624, { 2.45797e-05}},
      {625, { 1.20286e-05}},
      {626, { 2.66691e-05}},
      {627, { 1.17351e-05}},
      {640, { 3.39654e-05}},
      {641, { 1.39354e-05}},
      {644, { 3.05624e-05}},
      {645, { 1.346e-05}},
      {646, { 2.53371e-05}},
      {647, { 1.07859e-05}},
      {656, { 2.02105e-05}},
      {657, { 9.93032e-06}},
      {662, { 6.12802e-05}},
      {663, { 1.25775e-05}},
      {664, { 2.13741e-05}},
      {665, { 1.10238e-05}},
      {674, { 4.9202e-05}},
      {675, { 1.6888e-05}},
      {688, { 4.61883e-05}},
      {689, { 1.61151e-05}},
      {690, { 4.23214e-05}},
      {691, { 1.48301e-05}},
      {692, { 3.12788e-05}},
      {693, { 1.23324e-05}},
      {696, { 3.46032e-05}},
      {697, { 1.53975e-05}},
    };
    if (run < 4909){
      DCR = {
        {576, { 2.41796e-05}},
        {577, { 1.02228e-05}},
        {592, { 2.87399e-05}},
        {593, { 1.1881e-05}},
        {594, { 2.39027e-05}},
        {595, { 9.75457e-06}},
        {598, { 2.59524e-05}},
        {599, { 1.18078e-05}},
        {600, { 2.27139e-05}},
        {601, { 1.33129e-05}},
        {608, { 2.35454e-05}},
        {609, { 1.02411e-05}},
        {610, { 2.7058e-05}},
        {611, { 1.24152e-05}},
        {624, { 2.31115e-05}},
        {625, { 1.15339e-05}},
        {626, { 2.5683e-05}},
        {627, { 1.10897e-05}},
        {640, { 2.87995e-05}},
        {641, { 1.17866e-05}},
        {642, { 2.24227e-05}},
        {643, { 9.50437e-06}},
        {644, { 3.08946e-05}},
        {645, { 1.27134e-05}},
        {646, { 2.54085e-05}},
        {647, { 1.06086e-05}},
        {656, { 1.9829e-05}},
        {657, { 9.40805e-06}},
        {662, { 5.8999e-05}},
        {663, { 1.28699e-05}},
        {664, { 2.21314e-05}},
        {665, { 1.16381e-05}},
        {674, { 4.69803e-05}},
        {675, { 1.78611e-05}},
        {688, { 4.25463e-05}},
        {689, { 1.47713e-05}},
        {690, { 3.71884e-05}},
        {691, { 1.28247e-05}},
        {692, { 2.71772e-05}},
        {693, { 1.17177e-05}},
        {696, { 3.2939e-05}},
        {697, { 1.45714e-05}},
      };
    }
  }
  else if (dsNum == 1){
    DCR = {
      {578, { 2.75497e-05 }},
      {579, { 1.16854e-05 }},
      {580, { 4.26387e-05 }},
      {581, { 1.55473e-05 }},
      {582, { 2.9549e-05 }},
      {592, { 4.3311e-05 }},
      {593, { 1.81696e-05 }},
      {598, { 2.50086e-05 }},
      {599, { 1.14918e-05 }},
      {600, { 2.34164e-05 }},
      {601, { 1.2753e-05 }},
      {608, { 4.75915e-05 }},
      {609, { 1.61148e-05 }},
      {610, { 2.61581e-05 }},
      {611, { 1.20803e-05 }},
      {626, { 2.19352e-05 }},
      {627, { 1.01839e-05 }},
      {632, { 3.83105e-05 }},
      {633, { 1.64493e-05 }},
      {640, { 2.68171e-05 }},
      {641, { 1.22297e-05 }},
      {648, { 4.7041e-05 }},
      {649, { 2.24598e-05 }},
      {664, { 2.48914e-05 }},
      {665, { 1.21733e-05 }},
      {672, { 2.09627e-05 }},
      {673, { 1.12169e-05 }},
      {690, { 2.01692e-05 }},
      {691, { 1.04872e-05 }},
      {692, { 2.427e-05 }},
      {693, { 1.06764e-05 }},
    };
    if (run < 12809){
      DCR = {
        {578, { 2.79562e-05}},
        {579, { 1.12867e-05}},
        {580, { 4.70094e-05}},
        {581, { 1.53197e-05}},
        {582, { 3.39949e-05}},
        {592, { 4.20125e-05}},
        {593, { 1.64472e-05}},
        {598, { 2.43613e-05}},
        {599, { 1.11904e-05}},
        {600, { 2.29938e-05}},
        {601, { 1.22356e-05}},
        {608, { 4.7259e-05}},
        {609, { 1.65822e-05}},
        {610, { 2.78438e-05}},
        {611, { 1.1999e-05}},
        {626, { 2.30444e-05}},
        {627, { 1.07202e-05}},
        {632, { 4.22728e-05}},
        {633, { 1.80699e-05}},
        {640, { 2.44744e-05}},
        {641, { 1.10645e-05}},
        {648, { 5.12874e-05}},
        {649, { 2.35418e-05}},
        {664, { 2.7223e-05}},
        {665, { 1.26384e-05}},
        {672, { 1.97894e-05}},
        {672, { 1.97894e-05}},
        {673, { 1.25048e-05}},
        {690, { 1.91782e-05}},
        {691, { 1.01217e-05}},
        {692, { 2.59672e-05}},
        {693, { 1.02772e-05}}
      };
    }
  }
  else if (dsNum == 2) DCR = {
    {578, { 7.65902e-06}},
    {579, { 3.61822e-06}},
    {580, { 1.35183e-05}},
    {581, { 5.15741e-06}},
    {582, { 1.09178e-05}},
    {592, { 1.21441e-05}},
    {593, { 5.26676e-06}},
    {594, { 1.02505e-05}},
    {598, { 1.29654e-05}},
    {599, { 4.3872e-06}},
    {600, { 7.48371e-06}},
    {601, { 4.23776e-06}},
    {608, { 1.47895e-05}},
    {609, { 5.12572e-06}},
    {610, { 8.8839e-06}},
    {611, { 3.49036e-06}},
    {626, { 9.31245e-06}},
    {627, { 3.49357e-06}},
    {632, { 1.02001e-05}},
    {633, { 4.53572e-06}},
    {640, { 1.26964e-05}},
    {641, { 3.73117e-06}},
    {648, { 1.04913e-05}},
    {649, { 5.57377e-06}},
    {664, { 1.19973e-05}},
    {665, { 3.97061e-06}},
    {672, { 1.01229e-05}},
    {673, { 3.05802e-06}},
    {690, { 1.77626e-05}},
    {691, { 4.03004e-06}},
    {692, { 7.89603e-06}},
    {693, { 2.91676e-06}}
 };

  else if (dsNum == 3) DCR = {
    {578, { 2.74339e-05}},
    {579, { 1.12781e-05}},
    {580, { 4.28747e-05}},
    {581, { 1.48606e-05}},
    {582, { 3.49567e-05}},
    {592, { 6.45372e-05}},
    {593, { 2.30513e-05}},
    {594, { 2.04441e-05}},
    {598, { 2.56231e-05}},
    {599, { 1.19688e-05}},
    {600, { 2.41941e-05}},
    {601, { 1.306e-05}},
    {608, { 4.74412e-05}},
    {609, { 1.56946e-05}},
    {610, { 2.84435e-05}},
    {611, { 1.20003e-05}},
    {614, { 3.50222e-05}},
    {615, { 1.20462e-05}},
    {624, { 2.60975e-05}},
    {625, { 1.32425e-05}},
    {626, { 2.16942e-05}},
    {627, { 9.73112e-06}},
    {632, { 4.07877e-05}},
    {633, { 1.69217e-05}},
    {640, { 2.41422e-05}},
    {641, { 1.12169e-05}},
    {648, { 5.07526e-05}},
    {649, { 2.25858e-05}},
    {664, { 2.83326e-05}},
    {665, { 1.19046e-05}},
    {672, { 1.92006e-05}},
    {673, { 1.05144e-05}},
    {678, { 5.1435e-05}},
    {679, { 1.85804e-05}},
    {690, { 2.01046e-05}},
    {691, { 1.02611e-05}},
    {692, { 3.70204e-05}},
    {693, { 1.38138e-05}},
    {694, { 2.52842e-05}},
    {695, { 1.03463e-05}}
 };
  else if (dsNum == 4) DCR = {
    {1106, { 3.09669e-05}},
    {1107, { 1.28094e-05}},
    {1136, { 1.99646e-05}},
    {1137, { 8.36622e-06}},
    {1144, { 2.71711e-05}},
    {1145, { 1.04489e-05}},
    {1170, { 2.39597e-05}},
    {1171, { 1.44985e-05}},
    {1172, { 5.14388e-05}},
    {1173, { 1.96816e-05}},
    {1174, { 2.39853e-05}},
    {1176, { 2.60829e-05}},
    {1177, { 1.03732e-05}},
    {1204, { 2.26872e-05}},
    {1205, { 1.07251e-05}},
    {1232, { 2.27088e-05}},
    {1233, { 1.0865e-05}},
    {1236, { 1.8421e-05}},
    {1237, { 1.18988e-05}},
    {1296, { 9.89286e-05}},
    {1297, { 4.0635e-05}},
    {1298, { 2.00587e-05}},
    {1299, { 1.05298e-05}},
    {1330, { 2.71376e-05}},
    {1331, { 1.45711e-05}},
    {1332, { 3.8759e-05}},
    {1333, { 1.68971e-05}}
 };
  else if (dsNum == 5) DCR = {
    {584, { 2.60961e-05}},
    {585, { 1.13903e-05}},
    {592, { 2.15434e-05}},
    {593, { 1.06987e-05}},
    {598, { 4.69594e-05}},
    {599, { 1.79662e-05}},
    {608, { 4.64421e-05}},
    {609, { 1.53093e-05}},
    {610, { 2.53097e-05}},
    {611, { 1.14569e-05}},
    {614, { 3.33807e-05}},
    {615, { 1.15746e-05}},
    {624, { 2.47433e-05}},
    {625, { 1.33045e-05}},
    {626, { 2.18087e-05}},
    {627, { 1.01772e-05}},
    {628, { 2.78102e-05}},
    {629, { 1.17136e-05}},
    {632, { 3.8483e-05}},
    {633, { 1.73545e-05}},
    {640, { 2.62217e-05}},
    {641, { 1.13756e-05}},
    {648, { 4.72642e-05}},
    {649, { 2.28264e-05}},
    {658, { 2.61952e-05}},
    {659, { 1.11087e-05}},
    {660, { 3.99715e-05}},
    {661, { 1.59539e-05}},
    {662, { 3.13899e-05}},
    {663, { 1.41269e-05}},
    {672, { 3.80686e-05}},
    {673, { 1.74635e-05}},
    {674, { 2.007e-05}},
    {675, { 8.58959e-06}},
    {678, { 2.21848e-05}},
    {679, { 9.9353e-06}},
    {680, { 2.45376e-05}},
    {681, { 1.12845e-05}},
    {688, { 2.31728e-05}},
    {689, { 1.03791e-05}},
    {690, { 1.88547e-05}},
    {691, { 1.05494e-05}},
    {692, { 2.77649e-05}},
    {693, { 1.06806e-05}},
    {694, { 2.37183e-05}},
    {695, { 1.06516e-05}},
    {1106, { 3.61534e-05}},
    {1107, { 1.60668e-05}},
    {1110, { 2.95711e-05}},
    {1111, { 1.38381e-05}},
    {1120, { 2.4767e-05}},
    {1121, { 1.11208e-05}},
    {1124, { 2.75952e-05}},
    {1125, { 1.29668e-05}},
    {1128, { 3.20439e-05}},
    {1129, { 1.39738e-05}},
    {1170, { 2.4102e-05}},
    {1171, { 1.53955e-05}},
    {1172, { 4.51719e-05}},
    {1173, { 1.76343e-05}},
    {1174, { 2.43586e-05}},
    {1175, { 1.23225e-05}},
    {1176, { 2.86148e-05}},
    {1177, { 1.08068e-05}},
    {1204, { 3.82751e-05}},
    {1205, { 1.44028e-05}},
    {1208, { 2.56906e-05}},
    {1209, { 1.06264e-05}},
    {1232, { 2.5166e-05}},
    {1233, { 1.39086e-05}},
    {1236, { 2.37061e-05}},
    {1237, { 1.13139e-05}},
    {1298, { 2.4271e-05}},
    {1299, { 1.39206e-05}},
    {1302, { 2.7024e-05}},
    {1303, { 2.11103e-05}},
    {1330, { 3.15888e-05}},
    {1331, { 1.99932e-05}},
    {1332, { 3.87417e-05}},
    {1333, { 1.89321e-05}}
  };
  else if (dsNum == 6) DCR = {
    {584, { 1.12549e-05}},
    {585, { 3.4445e-06}},
    {592, { 9.98917e-06}},
    {593, { 3.63059e-06}},
    {598, { 1.12769e-05}},
    {599, { 4.34585e-06}},
    {608, { 1.55859e-05}},
    {609, { 5.12974e-06}},
    {610, { 8.58137e-06}},
    {611, { 3.28977e-06}},
    {614, { 1.1843e-05}},
    {615, { 3.94706e-06}},
    {624, { 8.233e-06}},
    {625, { 3.12069e-06}},
    {626, { 7.61287e-06}},
    {627, { 2.86531e-06}},
    {628, { 9.97154e-06}},
    {629, { 3.75244e-06}},
    {632, { 1.08034e-05}},
    {633, { 4.42134e-06}},
    {640, { 1.12526e-05}},
    {641, { 3.64855e-06}},
    {648, { 9.45e-06}},
    {649, { 5.42296e-06}},
    {658, { 7.95384e-06}},
    {659, { 2.92442e-06}},
    {660, { 1.20743e-05}},
    {661, { 4.7805e-06}},
    {662, { 9.30842e-06}},
    {663, { 4.09701e-06}},
    {672, { 1.27628e-05}},
    {673, { 4.00385e-06}},
    {678, { 9.79387e-06}},
    {679, { 3.24106e-06}},
    {680, { 7.33948e-06}},
    {681, { 3.04702e-06}},
    {688, { 7.33381e-06}},
    {689, { 2.79635e-06}},
    {690, { 9.12175e-06}},
    {691, { 3.1674e-06}},
    {694, { 7.75911e-06}},
    {695, { 3.3099e-06}},
    {1106, { 9.23322e-06}},
    {1107, { 3.56836e-06}},
    {1110, { 7.36371e-06}},
    {1111, { 2.91636e-06}},
    {1120, { 7.46503e-06}},
    {1121, { 3.02653e-06}},
    {1124, { 8.12042e-06}},
    {1125, { 3.41935e-06}},
    {1128, { 9.59339e-06}},
    {1129, { 3.81615e-06}},
    {1170, { 7.91175e-06}},
    {1171, { 3.25272e-06}},
    {1172, { 1.36443e-05}},
    {1173, { 5.21848e-06}},
    {1174, { 7.30082e-06}},
    {1175, { 3.34416e-06}},
    {1176, { 1.41347e-05}},
    {1177, { 4.54169e-06}},
    {1204, { 8.92769e-06}},
    {1205, { 3.35253e-06}},
    {1208, { 7.7763e-06}},
    {1209, { 3.1351e-06}},
    {1232, { 7.09157e-06}},
    {1233, { 3.37777e-06}},
    {1298, { 9.2865e-06}},
    {1299, { 3.42439e-06}},
    {1302, { 6.99861e-06}},
    {1303, { 3.42117e-06}},
    {1330, { 8.48892e-06}},
    {1331, { 4.09634e-06}},
    {1332, { 9.20321e-06}},
    {1333, { 3.8676e-06}},
  };
  else return 0;

  // Calculate DCR only if we have trapMax and an "isGood" detector.
  if (trapMax == 0) return 0;
  else if (DCR.find(chan) == DCR.end()) return nlcblrwfSlope/trapMax;
  double dcr90val = GetDCR90(chan, nlcblrwfSlope, trapMax, dsNum, run);
  return dcr90val + DCR[chan][0];
}


double GetDCR95(int chan, double nlcblrwfSlope, double trapMax, int dsNum, int run)
{
  map<int,vector<double>> DCR;
  if (dsNum == 0) {
    DCR = {
      {576, { -3.98106e-05}},
      {577, { -1.67438e-05}},
      {592, { -4.52511e-05}},
      {593, { -1.83109e-05}},
      {594, { -3.6922e-05}},
      {595, { -1.58516e-05}},
      {598, { -4.80812e-05}},
      {599, { -2.03448e-05}},
      {600, { -3.47547e-05}},
      {601, { -1.99129e-05}},
      {608, { -3.60476e-05}},
      {609, { -1.59885e-05}},
      {610, { -4.55181e-05}},
      {611, { -2.03813e-05}},
      {624, { -3.9384e-05}},
      {625, { -1.91568e-05}},
      {626, { -4.10196e-05}},
      {627, { -1.71299e-05}},
      {640, { -5.82751e-05}},
      {641, { -2.38964e-05}},
      {644, { -5.10568e-05}},
      {645, { -2.3773e-05}},
      {646, { -4.27001e-05}},
      {647, { -1.84142e-05}},
      {656, { -3.13712e-05}},
      {657, { -1.54334e-05}},
      {662, { -8.96216e-05}},
      {663, { -1.95394e-05}},
      {664, { -3.63721e-05}},
      {665, { -1.76125e-05}},
      {674, { -9.6064e-05}},
      {675, { -2.8796e-05}},
      {688, { -7.49067e-05}},
      {689, { -2.50304e-05}},
      {690, { -7.39864e-05}},
      {691, { -2.59558e-05}},
      {692, { -5.745e-05}},
      {693, { -2.049e-05}},
      {696, { -5.35666e-05}},
      {697, { -2.2844e-05}},
    };
    if (run < 4909){
      DCR = {
        {576, { -4.02944e-05}},
        {577, { -1.63307e-05}},
        {592, { -4.33387e-05}},
        {593, { -1.81615e-05}},
        {594, { -3.6842e-05}},
        {595, { -1.61253e-05}},
        {598, { -4.59886e-05}},
        {599, { -2.10003e-05}},
        {600, { -3.47223e-05}},
        {601, { -2.08169e-05}},
        {608, { -3.77708e-05}},
        {609, { -1.68713e-05}},
        {610, { -4.31443e-05}},
        {611, { -2.02389e-05}},
        {624, { -3.72529e-05}},
        {625, { -1.88628e-05}},
        {626, { -3.81971e-05}},
        {627, { -1.69062e-05}},
        {640, { -4.30618e-05}},
        {641, { -1.75767e-05}},
        {642, { -3.55282e-05}},
        {643, { -1.42836e-05}},
        {644, { -4.98036e-05}},
        {645, { -2.28537e-05}},
        {646, { -4.30175e-05}},
        {647, { -1.79864e-05}},
        {656, { -3.0743e-05}},
        {657, { -1.46901e-05}},
        {662, { -9.92734e-05}},
        {663, { -2.02692e-05}},
        {664, { -3.57652e-05}},
        {665, { -1.86112e-05}},
        {674, { -9.53232e-05}},
        {675, { -3.22196e-05}},
        {688, { -6.33864e-05}},
        {689, { -2.28672e-05}},
        {690, { -6.21414e-05}},
        {691, { -2.01361e-05}},
        {692, { -4.62043e-05}},
        {693, { -1.96551e-05}},
        {696, { -5.35752e-05}},
        {697, { -2.31865e-05}},
      };
    }
  }
  else if (dsNum == 1){
    DCR = {
      {578, { -4.13655e-05 }},
      {579, { -1.80436e-05 }},
      {580, { -6.79724e-05 }},
      {581, { -2.35937e-05 }},
      {582, { -5.18964e-05 }},
      {592, { -7.65228e-05 }},
      {593, { -3.01834e-05 }},
      {594, { -4.0349e-05 }},
      {598, { -4.48752e-05 }},
      {599, { -1.90032e-05 }},
      {600, { -3.79994e-05 }},
      {601, { -2.09934e-05 }},
      {608, { -7.5735e-05 }},
      {609, { -2.42298e-05 }},
      {610, { -4.46931e-05 }},
      {611, { -1.83581e-05 }},
      {626, { -3.37841e-05 }},
      {627, { -1.62353e-05 }},
      {632, { -6.20556e-05 }},
      {633, { -2.95043e-05 }},
      {640, { -5.6374e-05 }},
      {641, { -2.18347e-05 }},
      {648, { -9.95199e-05 }},
      {649, { -4.23151e-05 }},
      {664, { -4.25122e-05 }},
      {665, { -1.92662e-05 }},
      {672, { -3.3829e-05 }},
      {673, { -1.79833e-05 }},
      {690, { -3.33473e-05 }},
      {691, { -1.75894e-05 }},
      {692, { -3.85148e-05 }},
      {693, { -1.71267e-05 }},
    };
    if (run < 12809){
      DCR = {
        {578, { -4.39561e-05}},
        {579, { -1.84566e-05}},
        {580, { -7.10544e-05}},
        {581, { -2.3756e-05}},
        {582, { -5.80292e-05}},
        {592, { -7.654e-05}},
        {593, { -2.66225e-05}},
        {594, { -3.67171e-05 }},
        {598, { -4.08721e-05}},
        {599, { -1.74085e-05}},
        {600, { -3.77477e-05}},
        {601, { -1.99787e-05}},
        {608, { -7.81956e-05}},
        {609, { -2.66674e-05}},
        {610, { -4.85346e-05}},
        {611, { -1.8839e-05}},
        {626, { -3.75598e-05}},
        {627, { -1.69863e-05}},
        {632, { -7.00862e-05}},
        {633, { -2.955e-05}},
        {640, { -4.18192e-05}},
        {641, { -1.75109e-05}},
        {648, { -0.000114132}},
        {649, { -4.35156e-05}},
        {664, { -4.34732e-05}},
        {665, { -2.0063e-05}},
        {672, { -3.04154e-05}},
        {673, { -2.08788e-05}},
        {690, { -3.10129e-05}},
        {691, { -1.67403e-05}},
        {692, { -4.01708e-05}},
        {693, { -1.64067e-05}},
      };
    }
  }
  else if (dsNum == 2) DCR = {
    {578, { -1.31778e-05}},
    {579, { -5.7814e-06}},
    {580, { -2.19729e-05}},
    {581, { -7.48688e-06}},
    {582, { -1.93056e-05}},
    {592, { -2.36808e-05}},
    {593, { -1.0648e-05}},
    {594, { -1.92083e-05}},
    {598, { -2.1603e-05}},
    {599, { -6.8675e-06}},
    {600, { -1.23426e-05}},
    {601, { -6.358e-06}},
    {608, { -2.51185e-05}},
    {609, { -8.03164e-06}},
    {610, { -1.38636e-05}},
    {611, { -5.61191e-06}},
    {626, { -1.51931e-05}},
    {627, { -5.42977e-06}},
    {632, { -1.79351e-05}},
    {633, { -7.9044e-06}},
    {640, { -2.18162e-05}},
    {641, { -6.52117e-06}},
    {648, { -2.16068e-05}},
    {649, { -1.16334e-05}},
    {664, { -2.40348e-05}},
    {665, { -6.66034e-06}},
    {672, { -1.67511e-05}},
    {673, { -4.92945e-06}},
    {690, { -2.80175e-05}},
    {691, { -7.20046e-06}},
    {692, { -1.232e-05}},
    {693, { -4.75984e-06}}
     };
  else if (dsNum == 3) DCR = {
    {578, { -3.99915e-05}},
    {579, { -1.72452e-05}},
    {580, { -6.46406e-05}},
    {581, { -2.32678e-05}},
    {582, { -5.61424e-05}},
    {592, { -9.90618e-05}},
    {593, { -3.38837e-05}},
    {594, { -3.1692e-05}},
    {598, { -4.47759e-05}},
    {599, { -1.82279e-05}},
    {600, { -3.88996e-05}},
    {601, { -2.10604e-05}},
    {608, { -7.48143e-05}},
    {609, { -2.40426e-05}},
    {610, { -4.5035e-05}},
    {611, { -1.9103e-05}},
    {614, { -5.04562e-05}},
    {615, { -1.8953e-05}},
    {624, { -4.3407e-05}},
    {625, { -2.26451e-05}},
    {626, { -3.27102e-05}},
    {627, { -1.48795e-05}},
    {632, { -6.0171e-05}},
    {633, { -2.93921e-05}},
    {640, { -4.06546e-05}},
    {641, { -1.6895e-05}},
    {648, { -0.000103013}},
    {649, { -4.10218e-05}},
    {664, { -4.45883e-05}},
    {665, { -1.91888e-05}},
    {672, { -2.93559e-05}},
    {673, { -1.74598e-05}},
    {678, { -7.97196e-05}},
    {679, { -2.80769e-05}},
    {690, { -3.35056e-05}},
    {691, { -1.67884e-05}},
    {692, { -5.50253e-05}},
    {693, { -2.20417e-05}},
    {694, { -3.97801e-05}},
    {695, { -1.57777e-05}}
 };
  else if (dsNum == 4) DCR = {
    {1106, { -4.62646e-05}},
    {1107, { -2.11082e-05}},
    {1136, { -3.19395e-05}},
    {1137, { -1.32185e-05}},
    {1144, { -4.90572e-05}},
    {1145, { -1.90877e-05}},
    {1170, { -4.21862e-05}},
    {1171, { -2.60848e-05}},
    {1172, { -7.29983e-05}},
    {1173, { -3.04353e-05}},
    {1174, { -3.91793e-05}},
    {1176, { -4.37149e-05}},
    {1177, { -1.62159e-05}},
    {1204, { -3.54875e-05}},
    {1205, { -1.74581e-05}},
    {1232, { -3.67063e-05}},
    {1233, { -1.82532e-05}},
    {1236, { -3.10471e-05}},
    {1237, { -1.88964e-05}},
    {1296, { -0.00077041}},
    {1297, { -0.000335424}},
    {1298, { -3.0097e-05}},
    {1299, { -1.63239e-05}},
    {1330, { -4.27766e-05}},
    {1331, { -2.67531e-05}},
    {1332, { -6.38534e-05}},
    {1333, { -2.55372e-05}}
 };
  else if (dsNum == 5) DCR = {
    {584, { -4.52992e-05}},
    {585, { -1.75137e-05}},
    {592, { -3.19448e-05}},
    {593, { -1.61272e-05}},
    {598, { -7.78312e-05}},
    {599, { -2.62125e-05}},
    {608, { -7.09408e-05}},
    {609, { -2.47484e-05}},
    {610, { -4.21732e-05}},
    {611, { -1.84168e-05}},
    {614, { -5.22624e-05}},
    {615, { -1.937e-05}},
    {624, { -4.19804e-05}},
    {625, { -2.278e-05}},
    {626, { -3.31242e-05}},
    {627, { -1.53054e-05}},
    {628, { -4.71909e-05}},
    {629, { -2.16046e-05}},
    {632, { -5.89173e-05}},
    {633, { -2.95406e-05}},
    {640, { -4.11775e-05}},
    {641, { -1.75119e-05}},
    {648, { -9.85643e-05}},
    {649, { -4.17624e-05}},
    {658, { -3.9784e-05}},
    {659, { -1.81705e-05}},
    {660, { -6.37415e-05}},
    {661, { -2.6124e-05}},
    {662, { -5.63397e-05}},
    {663, { -2.17041e-05}},
    {672, { -7.40464e-05}},
    {673, { -2.92107e-05}},
    {674, { -3.11972e-05}},
    {675, { -1.31217e-05}},
    {678, { -4.04994e-05}},
    {679, { -1.53071e-05}},
    {680, { -4.0208e-05}},
    {681, { -1.86019e-05}},
    {688, { -3.8043e-05}},
    {689, { -1.53201e-05}},
    {690, { -3.2705e-05}},
    {691, { -1.7091e-05}},
    {692, { -4.05583e-05}},
    {693, { -1.7915e-05}},
    {694, { -3.75396e-05}},
    {695, { -1.52683e-05}},
    {1106, { -5.57355e-05}},
    {1107, { -2.56164e-05}},
    {1110, { -4.16024e-05}},
    {1111, { -2.05491e-05}},
    {1120, { -3.67107e-05}},
    {1121, { -1.70057e-05}},
    {1124, { -4.30308e-05}},
    {1125, { -2.10182e-05}},
    {1128, { -6.06328e-05}},
    {1129, { -2.47622e-05}},
    {1170, { -4.1664e-05}},
    {1171, { -2.72647e-05}},
    {1172, { -6.60625e-05}},
    {1173, { -2.79227e-05}},
    {1174, { -3.89926e-05}},
    {1175, { -2.0487e-05}},
    {1176, { -4.37887e-05}},
    {1177, { -1.71262e-05}},
    {1204, { -5.52694e-05}},
    {1205, { -2.20422e-05}},
    {1208, { -4.18555e-05}},
    {1209, { -1.7272e-05}},
    {1232, { -4.12344e-05}},
    {1233, { -2.9023e-05}},
    {1236, { -3.75737e-05}},
    {1237, { -1.88604e-05}},
    {1298, { -3.92954e-05}},
    {1299, { -1.96418e-05}},
    {1302, { -4.29669e-05}},
    {1303, { -3.72003e-05}},
    {1330, { -5.30027e-05}},
    {1331, { -3.23136e-05}},
    {1332, { -6.06548e-05}},
    {1333, { -2.98432e-05}},
 };
  else if (dsNum == 6) DCR = {
    {584, { -2.04344e-05}},
    {585, { -5.9539e-06}},
    {592, { -1.60567e-05}},
    {593, { -5.58123e-06}},
    {598, { -2.01727e-05}},
    {599, { -7.27346e-06}},
    {608, { -2.77911e-05}},
    {609, { -8.34954e-06}},
    {610, { -1.36483e-05}},
    {611, { -5.06734e-06}},
    {614, { -1.86498e-05}},
    {615, { -6.16746e-06}},
    {624, { -1.31487e-05}},
    {625, { -5.16259e-06}},
    {626, { -1.18969e-05}},
    {627, { -4.45061e-06}},
    {628, { -1.92594e-05}},
    {629, { -6.78846e-06}},
    {632, { -1.86029e-05}},
    {633, { -7.74364e-06}},
    {640, { -2.0063e-05}},
    {641, { -5.76362e-06}},
    {648, { -2.07799e-05}},
    {649, { -1.10725e-05}},
    {658, { -1.30095e-05}},
    {659, { -4.63192e-06}},
    {660, { -1.88399e-05}},
    {661, { -7.1349e-06}},
    {662, { -1.61505e-05}},
    {663, { -6.72398e-06}},
    {672, { -2.60556e-05}},
    {673, { -7.93142e-06}},
    {678, { -1.64916e-05}},
    {679, { -5.11726e-06}},
    {680, { -1.22385e-05}},
    {681, { -4.99394e-06}},
    {688, { -1.13645e-05}},
    {689, { -4.53095e-06}},
    {690, { -1.51993e-05}},
    {691, { -4.6722e-06}},
    {694, { -1.20243e-05}},
    {695, { -4.90768e-06}},
    {1106, { -1.33186e-05}},
    {1107, { -5.27734e-06}},
    {1110, { -1.1715e-05}},
    {1111, { -4.6094e-06}},
    {1120, { -1.16929e-05}},
    {1121, { -4.70336e-06}},
    {1124, { -1.36405e-05}},
    {1125, { -5.2567e-06}},
    {1128, { -1.72446e-05}},
    {1129, { -7.13102e-06}},
    {1170, { -1.37858e-05}},
    {1171, { -5.25371e-06}},
    {1172, { -2.00781e-05}},
    {1173, { -7.57992e-06}},
    {1174, { -1.16107e-05}},
    {1175, { -5.21084e-06}},
    {1176, { -2.26418e-05}},
    {1177, { -6.71416e-06}},
    {1204, { -1.30208e-05}},
    {1205, { -4.89038e-06}},
    {1208, { -1.25686e-05}},
    {1209, { -4.87962e-06}},
    {1232, { -1.18447e-05}},
    {1233, { -5.63304e-06}},
    {1298, { -1.3998e-05}},
    {1299, { -4.94132e-06}},
    {1302, { -1.25128e-05}},
    {1303, { -5.51945e-06}},
    {1330, { -1.39005e-05}},
    {1331, { -6.64023e-06}},
    {1332, { -1.69828e-05}},
    {1333, { -5.946e-06}},
 };
  else return 0;

  // Calculate DCR only if we have trapMax and an "isGood" detector.
  if (trapMax == 0) return 0;
  else if (DCR.find(chan) == DCR.end()) return nlcblrwfSlope/trapMax;
  double dcr90val = GetDCR90(chan, nlcblrwfSlope, trapMax, dsNum, run);
  return dcr90val + DCR[chan][0];
}


double GetDCR98(int chan, double nlcblrwfSlope, double trapMax, int dsNum, int run)
{
  map<int,vector<double>> DCR;
  if (dsNum == 0) {
    DCR = {
      {576, { -0.000108146}},
      {577, { -3.87848e-05}},
      {592, { -0.000101013}},
      {593, { -4.14065e-05}},
      {594, { -8.88807e-05}},
      {595, { -3.73602e-05}},
      {598, { -0.000208474}},
      {599, { -7.13432e-05}},
      {600, { -7.93404e-05}},
      {601, { -4.42459e-05}},
      {608, { -9.34156e-05}},
      {609, { -3.88846e-05}},
      {610, { -0.000113595}},
      {611, { -4.94634e-05}},
      {624, { -8.72667e-05}},
      {625, { -4.27411e-05}},
      {626, { -8.75996e-05}},
      {627, { -3.73558e-05}},
      {640, { -0.000158562}},
      {641, { -6.73318e-05}},
      {644, { -0.000117503}},
      {645, { -5.6278e-05}},
      {646, { -0.000107884}},
      {647, { -4.96454e-05}},
      {656, { -7.07478e-05}},
      {657, { -3.39451e-05}},
      {662, { -0.000208885}},
      {663, { -4.40296e-05}},
      {664, { -8.8742e-05}},
      {665, { -4.559e-05}},
      {674, { -0.00027202}},
      {675, { -7.54952e-05}},
      {688, { -0.000165991}},
      {689, { -5.52323e-05}},
      {690, { -0.000187672}},
      {691, { -6.08231e-05}},
      {692, { -0.00016272}},
      {693, { -5.28032e-05}},
      {696, { -0.000124245}},
      {697, { -5.14433e-05}},
    };
    if (run < 4909){
      DCR = {
        {576, { -0.000102351}},
        {577, { -3.87378e-05}},
        {592, { -9.85864e-05}},
        {593, { -4.12376e-05}},
        {594, { -8.54378e-05}},
        {595, { -3.70727e-05}},
        {598, { -0.000192161}},
        {599, { -7.04692e-05}},
        {600, { -7.93479e-05}},
        {601, { -4.42501e-05}},
        {608, { -0.00010374}},
        {609, { -4.25049e-05}},
        {610, { -0.000108538}},
        {611, { -4.96811e-05}},
        {624, { -8.45826e-05}},
        {625, { -4.26023e-05}},
        {626, { -8.53668e-05}},
        {627, { -3.67275e-05}},
        {640, { -9.66231e-05}},
        {641, { -3.92852e-05}},
        {642, { -7.76941e-05}},
        {643, { -3.17978e-05}},
        {644, { -0.000112641}},
        {645, { -5.38034e-05}},
        {646, { -0.000114751}},
        {647, { -4.80644e-05}},
        {656, { -6.94836e-05}},
        {657, { -3.29827e-05}},
        {662, { -0.000236982}},
        {663, { -4.52773e-05}},
        {664, { -9.18936e-05}},
        {665, { -4.817e-05}},
        {674, { -0.000262658}},
        {675, { -8.19999e-05}},
        {688, { -0.000136945}},
        {689, { -4.87578e-05}},
        {690, { -0.000147784}},
        {691, { -4.91076e-05}},
        {692, { -0.000118353}},
        {693, { -4.93127e-05}},
        {696, { -0.000119458}},
        {697, { -5.0243e-05}}
      };
    }
  }
  else if (dsNum == 1) {
    DCR = {
      {578, { -8.93528e-05 }},
      {579, { -4.14143e-05 }},
      {580, { -0.000146546 }},
      {581, { -5.09152e-05 }},
      {582, { -0.000124793 }},
      {592, { -0.000228111 }},
      {593, { -7.40684e-05 }},
      {598, { -0.000119433 }},
      {599, { -4.53894e-05 }},
      {600, { -0.000109033 }},
      {601, { -5.53938e-05 }},
      {608, { -0.000177837 }},
      {609, { -5.63054e-05 }},
      {610, { -9.98493e-05 }},
      {611, { -4.09016e-05 }},
      {626, { -7.88296e-05 }},
      {627, { -3.64852e-05 }},
      {632, { -0.000148843 }},
      {633, { -6.86693e-05 }},
      {640, { -0.000269416 }},
      {641, { -7.07249e-05 }},
      {648, { -0.000333727 }},
      {649, { -0.000104282 }},
      {664, { -0.000110429 }},
      {665, { -4.77036e-05 }},
      {672, { -7.4248e-05 }},
      {673, { -4.13253e-05 }},
      {690, { -8.38322e-05 }},
      {691, { -4.12189e-05 }},
      {692, { -9.07333e-05 }},
      {693, { -3.97505e-05 }},
    };
    if (run < 12809){
      DCR = {
        {578, { -9.90231e-05}},
        {579, { -4.09268e-05}},
        {580, { -0.000152706}},
        {581, { -5.09998e-05}},
        {582, { -0.000133986}},
        {592, { -0.00021448}},
        {593, { -6.78458e-05}},
        {598, { -0.000107977}},
        {599, { -4.0797e-05}},
        {600, { -0.000107578}},
        {601, { -5.81734e-05}},
        {608, { -0.000184124}},
        {609, { -6.06538e-05}},
        {610, { -0.000103004}},
        {611, { -4.164e-05}},
        {626, { -8.4165e-05}},
        {627, { -3.78197e-05}},
        {632, { -0.000176287}},
        {633, { -7.23013e-05}},
        {640, { -0.000112126}},
        {641, { -4.15079e-05}},
        {648, { -0.000361325}},
        {649, { -0.000111256}},
        {664, { -0.000113243}},
        {665, { -4.69522e-05}},
        {672, { -6.9913e-05}},
        {672, { -6.9913e-05}},
        {673, { -4.63361e-05}},
        {673, { -4.63361e-05}},
        {690, { -8.06229e-05}},
        {691, { -4.05243e-05}},
        {692, { -9.18128e-05}},
        {693, { -3.74147e-05}}
      };
    }
  }
  else if (dsNum == 2) DCR = {
    {578, { -2.86631e-05}},
    {579, { -1.26077e-05}},
    {580, { -4.74712e-05}},
    {581, { -1.6521e-05}},
    {582, { -4.9056e-05}},
    {592, { -0.000106505}},
    {593, { -3.57495e-05}},
    {594, { -4.55008e-05}},
    {598, { -5.3897e-05}},
    {599, { -1.65798e-05}},
    {600, { -3.83164e-05}},
    {601, { -1.8753e-05}},
    {608, { -6.1915e-05}},
    {609, { -1.97764e-05}},
    {610, { -3.38714e-05}},
    {611, { -1.25737e-05}},
    {626, { -3.41728e-05}},
    {627, { -1.19695e-05}},
    {632, { -4.81049e-05}},
    {633, { -1.85982e-05}},
    {640, { -6.83991e-05}},
    {641, { -1.8342e-05}},
    {648, { -0.000143067}},
    {649, { -3.5171e-05}},
    {664, { -7.56038e-05}},
    {665, { -1.80881e-05}},
    {672, { -3.73842e-05}},
    {673, { -1.09983e-05}},
    {690, { -6.20368e-05}},
    {691, { -1.80005e-05}},
    {692, { -2.95812e-05}},
    {693, { -1.11355e-05}},
 };
  else if (dsNum == 3) DCR = {
    {578, { -9.23923e-05}},
    {579, { -3.90166e-05}},
    {580, { -0.000149092}},
    {581, { -4.99686e-05}},
    {582, { -0.000131144}},
    {592, { -0.000225673}},
    {593, { -7.74021e-05}},
    {594, { -7.34847e-05}},
    {598, { -0.000116032}},
    {599, { -4.3804e-05}},
    {600, { -0.000111052}},
    {601, { -5.62987e-05}},
    {608, { -0.000177961}},
    {609, { -5.52622e-05}},
    {610, { -0.000100116}},
    {611, { -4.33468e-05}},
    {614, { -0.000107944}},
    {615, { -4.17198e-05}},
    {624, { -0.000117}},
    {625, { -5.80896e-05}},
    {626, { -7.73548e-05}},
    {627, { -3.3403e-05}},
    {632, { -0.000137375}},
    {633, { -6.55012e-05}},
    {640, { -0.000105555}},
    {641, { -4.016e-05}},
    {648, { -0.000281621}},
    {649, { -9.59838e-05}},
    {664, { -0.000113833}},
    {665, { -4.71526e-05}},
    {672, { -6.6654e-05}},
    {673, { -4.10499e-05}},
    {678, { -0.000191912}},
    {679, { -6.22767e-05}},
    {690, { -8.31333e-05}},
    {691, { -4.33234e-05}},
    {692, { -0.000124935}},
    {693, { -4.97937e-05}},
    {694, { -8.88402e-05}},
    {695, { -3.66982e-05}}
   };
  else if (dsNum == 4) DCR = {
    {1106, { -0.000105965}},
    {1107, { -4.8559e-05}},
    {1136, { -7.3884e-05}},
    {1137, { -3.13529e-05}},
    {1144, { -0.00027828}},
    {1145, { -0.000120117}},
    {1170, { -0.000159162}},
    {1171, { -6.93136e-05}},
    {1172, { -0.00015773}},
    {1173, { -6.53512e-05}},
    {1174, { -9.50792e-05}},
    {1176, { -0.000106608}},
    {1177, { -4.01621e-05}},
    {1204, { -7.63192e-05}},
    {1205, { -3.75264e-05}},
    {1232, { -0.000101222}},
    {1233, { -4.67125e-05}},
    {1236, { -7.50049e-05}},
    {1237, { -4.05229e-05}},
    {1296, { -0.00294241}},
    {1297, { -0.00139268}},
    {1298, { -6.56784e-05}},
    {1299, { -3.39654e-05}},
    {1330, { -0.000120435}},
    {1331, { -6.98094e-05}},
    {1332, { -0.00014307}},
    {1333, { -5.4652e-05}},
 };
  else if (dsNum == 5) DCR = {
    {584, { -0.000117162}},
    {585, { -4.22281e-05}},
    {592, { -7.26704e-05}},
    {593, { -3.65141e-05}},
    {598, { -0.000188213}},
    {599, { -6.0867e-05}},
    {608, { -0.000166994}},
    {609, { -5.50034e-05}},
    {610, { -9.16012e-05}},
    {611, { -4.02608e-05}},
    {614, { -0.00011586}},
    {615, { -4.26044e-05}},
    {624, { -0.000111049}},
    {625, { -5.35789e-05}},
    {626, { -7.52605e-05}},
    {627, { -3.52269e-05}},
    {628, { -0.000178666}},
    {629, { -6.73645e-05}},
    {632, { -0.000138754}},
    {633, { -6.9483e-05}},
    {640, { -0.00011114}},
    {641, { -4.30672e-05}},
    {648, { -0.000273234}},
    {649, { -9.41951e-05}},
    {658, { -9.25536e-05}},
    {659, { -3.93798e-05}},
    {660, { -0.000144924}},
    {661, { -5.50485e-05}},
    {662, { -0.00013702}},
    {663, { -5.31362e-05}},
    {672, { -0.00020776}},
    {673, { -7.4454e-05}},
    {674, { -7.19635e-05}},
    {675, { -2.92569e-05}},
    {678, { -9.68781e-05}},
    {679, { -3.65803e-05}},
    {680, { -0.000117741}},
    {681, { -5.37463e-05}},
    {688, { -8.28847e-05}},
    {689, { -3.44531e-05}},
    {690, { -8.24506e-05}},
    {691, { -4.11331e-05}},
    {692, { -9.80618e-05}},
    {693, { -4.21246e-05}},
    {694, { -8.94552e-05}},
    {695, { -3.6337e-05}},
    {1106, { -0.000123986}},
    {1107, { -6.00267e-05}},
    {1110, { -9.08105e-05}},
    {1111, { -4.47325e-05}},
    {1120, { -8.72528e-05}},
    {1121, { -4.12787e-05}},
    {1124, { -0.000113394}},
    {1125, { -5.17018e-05}},
    {1128, { -0.000324185}},
    {1129, { -0.000127704}},
    {1170, { -0.000167376}},
    {1171, { -7.16731e-05}},
    {1172, { -0.000144812}},
    {1173, { -6.29556e-05}},
    {1174, { -9.30477e-05}},
    {1175, { -4.35675e-05}},
    {1176, { -0.000109318}},
    {1177, { -4.05913e-05}},
    {1204, { -0.000120909}},
    {1205, { -5.34702e-05}},
    {1208, { -0.000101879}},
    {1209, { -4.21288e-05}},
    {1232, { -0.000103831}},
    {1233, { -7.78371e-05}},
    {1236, { -8.81717e-05}},
    {1237, { -4.00371e-05}},
    {1298, { -7.75054e-05}},
    {1299, { -4.28433e-05}},
    {1302, { -9.55661e-05}},
    {1303, { -7.70569e-05}},
    {1330, { -0.000142532}},
    {1331, { -8.75662e-05}},
    {1332, { -0.000136087}},
    {1333, { -6.35124e-05}},
 };
  else if (dsNum == 6) DCR = {
    {584, { -6.08794e-05}},
    {585, { -1.63402e-05}},
    {592, { -3.50699e-05}},
    {593, { -1.21414e-05}},
    {598, { -4.94602e-05}},
    {599, { -1.65814e-05}},
    {608, { -6.93417e-05}},
    {609, { -2.05322e-05}},
    {610, { -3.1086e-05}},
    {611, { -1.13741e-05}},
    {614, { -4.0153e-05}},
    {615, { -1.38959e-05}},
    {624, { -4.12922e-05}},
    {625, { -1.53284e-05}},
    {626, { -2.72785e-05}},
    {627, { -9.74562e-06}},
    {628, { -6.53204e-05}},
    {629, { -2.28048e-05}},
    {632, { -4.92698e-05}},
    {633, { -1.84098e-05}},
    {640, { -5.67065e-05}},
    {641, { -1.63897e-05}},
    {648, { -8.85287e-05}},
    {649, { -2.82894e-05}},
    {658, { -2.94994e-05}},
    {659, { -1.07694e-05}},
    {660, { -4.03662e-05}},
    {661, { -1.52727e-05}},
    {662, { -4.25472e-05}},
    {663, { -1.65425e-05}},
    {672, { -0.000115508}},
    {673, { -2.91904e-05}},
    {678, { -4.31008e-05}},
    {679, { -1.29218e-05}},
    {680, { -3.64244e-05}},
    {681, { -1.43541e-05}},
    {688, { -2.64489e-05}},
    {689, { -9.86329e-06}},
    {690, { -4.12445e-05}},
    {691, { -1.16222e-05}},
    {694, { -2.84927e-05}},
    {695, { -1.17206e-05}},
    {1106, { -2.97899e-05}},
    {1107, { -1.20313e-05}},
    {1110, { -2.58308e-05}},
    {1111, { -1.00935e-05}},
    {1120, { -2.75715e-05}},
    {1121, { -1.11214e-05}},
    {1124, { -3.58315e-05}},
    {1125, { -1.44319e-05}},
    {1128, { -6.92328e-05}},
    {1129, { -3.26278e-05}},
    {1170, { -4.09405e-05}},
    {1171, { -1.51647e-05}},
    {1172, { -4.30723e-05}},
    {1173, { -1.63092e-05}},
    {1174, { -2.91552e-05}},
    {1175, { -1.28077e-05}},
    {1176, { -5.21872e-05}},
    {1177, { -1.57706e-05}},
    {1204, { -2.96218e-05}},
    {1205, { -1.12728e-05}},
    {1208, { -3.10147e-05}},
    {1209, { -1.19551e-05}},
    {1232, { -3.40872e-05}},
    {1233, { -1.57824e-05}},
    {1298, { -3.1668e-05}},
    {1299, { -1.06952e-05}},
    {1302, { -3.12843e-05}},
    {1303, { -1.23407e-05}},
    {1330, { -3.75657e-05}},
    {1331, { -1.85136e-05}},
    {1332, { -4.01447e-05}},
    {1333, { -1.34976e-05}},
 };
  else return 0;

  // Calculate DCR only if we have trapMax and an "isGood" detector.
  if (trapMax == 0) return 0;
  else if (DCR.find(chan) == DCR.end()) return nlcblrwfSlope/trapMax;
  double dcr90val = GetDCR90(chan, nlcblrwfSlope, trapMax, dsNum, run);
  return dcr90val + DCR[chan][0];
}


double GetDCR99(int chan, double nlcblrwfSlope, double trapMax, int dsNum, int run)
{
  map<int,vector<double>> DCR;
  if (dsNum == 0) {
    DCR = {
      {576, { -0.000191695}},
      {577, { -5.88728e-05}},
      {592, { -0.000143268}},
      {593, { -6.24792e-05}},
      {594, { -0.000143794}},
      {595, { -6.16044e-05}},
      {598, { -0.000742336}},
      {599, { -0.000296666}},
      {600, { -0.00011975}},
      {601, { -6.3275e-05}},
      {608, { -0.000277669}},
      {609, { -7.28093e-05}},
      {610, { -0.00023498}},
      {611, { -8.55017e-05}},
      {624, { -0.000125631}},
      {625, { -6.03265e-05}},
      {626, { -0.000121936}},
      {627, { -5.16867e-05}},
      {640, { -0.000338611}},
      {641, { -0.00017743}},
      {644, { -0.00017959}},
      {645, { -7.8539e-05}},
      {646, { -0.000508207}},
      {647, { -0.000207665}},
      {656, { -0.000105314}},
      {657, { -4.86333e-05}},
      {662, { -0.0002969}},
      {663, { -6.13671e-05}},
      {664, { -0.000216979}},
      {665, { -8.279e-05}},
      {674, { -0.00048153}},
      {675, { -0.000129338}},
      {688, { -0.000236279}},
      {689, { -7.98096e-05}},
      {690, { -0.000295267}},
      {691, { -9.39994e-05}},
      {692, { -0.00033762}},
      {693, { -0.00010339}},
      {696, { -0.000180407}},
      {697, { -7.514e-05}},
    };
    if (run < 4909){
      DCR = {
        {576, { -0.000179698}},
        {577, { -5.87756e-05}},
        {592, { -0.000143871}},
        {593, { -6.1065e-05}},
        {594, { -0.000139287}},
        {595, { -6.5571e-05}},
        {598, { -0.000723417}},
        {599, { -0.000291492}},
        {600, { -0.000119046}},
        {601, { -6.30804e-05}},
        {608, { -0.000401118}},
        {609, { -0.000116307}},
        {610, { -0.000195963}},
        {611, { -7.72497e-05}},
        {624, { -0.000124066}},
        {625, { -6.10246e-05}},
        {626, { -0.000122172}},
        {627, { -5.13725e-05}},
        {640, { -0.000137389}},
        {641, { -5.33151e-05}},
        {642, { -0.000115709}},
        {643, { -4.53909e-05}},
        {644, { -0.000167731}},
        {645, { -7.62668e-05}},
        {646, { -0.000530682}},
        {647, { -0.000165369}},
        {656, { -0.000104702}},
        {657, { -4.62156e-05}},
        {662, { -0.000343267}},
        {663, { -6.35893e-05}},
        {664, { -0.000224229}},
        {665, { -9.016e-05}},
        {674, { -0.000447367}},
        {675, { -0.00013075}},
        {688, { -0.00018892}},
        {689, { -6.63634e-05}},
        {690, { -0.000237729}},
        {691, { -7.48746e-05}},
        {692, { -0.000211473}},
        {693, { -8.89299e-05}},
        {696, { -0.000174171}},
        {697, { -6.98959e-05}}
      };
    }
   if(run <= 3664){
      DCR[692] =  { -0.000275003};
      DCR[693] =  { -9.514e-05};
    }
   if(run>=4004 && run <= 4908){
      DCR[692] = { -0.000267185} ;
      DCR[693] = { -0.000125962} ;
    }

  }
  else if (dsNum == 1) {
    DCR = {
      {578, { -0.000140038 }},
      {579, { -6.06608e-05 }},
      {580, { -0.000210465 }},
      {581, { -7.10085e-05 }},
      {582, { -0.000200879 }},
      {592, { -0.000429672 }},
      {593, { -0.000124506 }},
      {594, { -0.000216080 }},
      {598, { -0.000245412 }},
      {599, { -7.38942e-05 }},
      {600, { -0.000626284 }},
      {601, { -0.000180438 }},
      {608, { -0.000263857 }},
      {609, { -8.10736e-05 }},
      {610, { -0.000141553 }},
      {611, { -5.75476e-05 }},
      {626, { -0.000114083 }},
      {627, { -5.25434e-05 }},
      {632, { -0.000231078 }},
      {633, { -9.45705e-05 }},
      {640, { -0.000552365 }},
      {641, { -0.000151487 }},
      {648, { -0.000663648 }},
      {649, { -0.000162732 }},
      {664, { -0.00026337 }},
      {665, { -7.67348e-05 }},
      {672, { -0.000107387 }},
      {673, { -5.89454e-05 }},
      {690, { -0.000188762 }},
      {691, { -6.93619e-05 }},
      {692, { -0.000146702 }},
      {693, { -6.35182e-05 }},
    };
    if (run < 12809){
      DCR = {
        {578, { -0.000140846}},
        {579, { -5.8586e-05}},
        {580, { -0.000210818}},
        {581, { -7.02975e-05}},
        {582, { -0.000202476}},
        {592, { -0.00039136}},
        {593, { -0.000119394}},
        {594, { -0.000120384 }},
        {598, { -0.000191925}},
        {599, { -6.1098e-05}},
        {600, { -0.000666066}},
        {601, { -0.000222009}},
        {608, { -0.000271631}},
        {609, { -9.05718e-05}},
        {610, { -0.000147766}},
        {611, { -5.7889e-05}},
        {626, { -0.000124858}},
        {627, { -5.40799e-05}},
        {632, { -0.000301465}},
        {633, { -0.000107522}},
        {640, { -0.000227829}},
        {641, { -6.4084e-05}},
        {648, { -0.00073158}},
        {649, { -0.000183137}},
        {664, { -0.00023121}},
        {665, { -7.21975e-05}},
        {672, { -0.000103541}},
        {673, { -6.45125e-05}},
        {690, { -0.000167508}},
        {691, { -6.64909e-05}},
        {692, { -0.000145448}},
        {693, { -5.95285e-05}}
      };
    }
   if (run>= 9938  && run <= 10278){
    DCR[594] = { -0.000107934};
   }
   if (run> 10278 && run < 11507){
    DCR[594] = { -0.000125231};
   }

   if (run >= 13395 && run<= 14188){
    DCR[626] = { -0.000114614};
    DCR[627] = { -5.19008e-05};
   }
   if (run >= 14189){
    DCR[626] = { -0.000301366};
    DCR[627] = { -0.000104924};
   }

  }
  else if (dsNum == 2) DCR = {
    {578, { -4.30553e-05}},
    {579, { -1.78615e-05}},
    {580, { -6.51167e-05}},
    {581, { -2.3057e-05}},
    {582, { -8.37472e-05}},
    {592, { -0.000206421}},
    {593, { -6.09333e-05}},
    {594, { -6.53805e-05}},
    {598, { -9.33005e-05}},
    {599, { -2.7473e-05}},
    {600, { -0.000289113}},
    {601, { -9.39896e-05}},
    {608, { -9.48154e-05}},
    {609, { -2.82924e-05}},
    {610, { -5.10312e-05}},
    {611, { -1.72548e-05}},
    {626, { -5.1663e-05}},
    {627, { -1.71034e-05}},
    {632, { -7.88369e-05}},
    {633, { -2.69634e-05}},
    {640, { -0.000146068}},
    {641, { -3.85406e-05}},
    {648, { -0.000285708}},
    {649, { -7.26058e-05}},
    {664, { -0.000163609}},
    {665, { -3.86892e-05}},
    {672, { -5.52153e-05}},
    {673, { -1.58366e-05}},
    {690, { -9.32493e-05}},
    {691, { -2.80705e-05}},
    {692, { -4.67839e-05}},
    {693, { -1.79331e-05}}
 };
  else if (dsNum == 3) DCR = {
    {578, { -0.000136208}},
    {579, { -5.53681e-05}},
    {580, { -0.00020439}},
    {581, { -6.85933e-05}},
    {582, { -0.000195978}},
    {592, { -0.000331894}},
    {593, { -0.000113895}},
    {594, { -0.000107869}},
    {598, { -0.000215867}},
    {599, { -6.69644e-05}},
    {600, { -0.00060677}},
    {601, { -0.0002087}},
    {608, { -0.000269164}},
    {609, { -8.00593e-05}},
    {610, { -0.000140702}},
    {611, { -6.06264e-05}},
    {614, { -0.000156397}},
    {615, { -6.05123e-05}},
    {624, { -0.000340184}},
    {625, { -0.000106349}},
    {626, { -0.00011259}},
    {627, { -4.715e-05}},
    {632, { -0.000189279}},
    {633, { -8.91253e-05}},
    {640, { -0.000201766}},
    {641, { -6.326e-05}},
    {648, { -0.000475951}},
    {649, { -0.000148681}},
    {664, { -0.000212315}},
    {665, { -7.43035e-05}},
    {672, { -9.85144e-05}},
    {673, { -5.80293e-05}},
    {678, { -0.000276188}},
    {679, { -8.90545e-05}},
    {690, { -0.00018827}},
    {691, { -7.19757e-05}},
    {692, { -0.00020227}},
    {693, { -8.15818e-05}},
    {694, { -0.00012885}},
    {695, { -5.75121e-05}}
   };
  else if (dsNum == 4) DCR = {
    {1106, { -0.000159411}},
    {1107, { -7.75935e-05}},
    {1136, { -0.000124428}},
    {1137, { -5.22689e-05}},
    {1144, { -0.00141194}},
    {1145, { -0.000633888}},
    {1170, { -0.000949468}},
    {1171, { -0.000242679}},
    {1172, { -0.00022315}},
    {1173, { -8.99118e-05}},
    {1174, { -0.000176489}},
    {1176, { -0.000190962}},
    {1177, { -6.41883e-05}},
    {1204, { -0.00010986}},
    {1205, { -5.25501e-05}},
    {1232, { -0.000494407}},
    {1233, { -0.000171266}},
    {1236, { -0.000131469}},
    {1237, { -5.6311e-05}},
    {1296, { -0.0047384}},
    {1297, { -0.00209236}},
    {1298, { -9.06056e-05}},
    {1299, { -4.66095e-05}},
    {1330, { -0.00085866}},
    {1331, { -0.000550852}},
    {1332, { -0.000201354}},
    {1333, { -7.47551e-05}}
 };
  else if (dsNum == 5){
    DCR = {
    {584, { -0.00058809}},
    {585, { -0.0001773}},
    {592, { -0.00027578}},
    {593, { -9.1274e-05}},
    {598, { -0.000419263}},
    {599, { -0.000124321}},
    {608, { -0.000608327}},
    {609, { -0.000188746}},
    {610, { -0.00051205}},
    {611, { -0.00016436}},
    {614, { -0.000526631}},
    {615, { -0.000147912}},
    {624, { -0.000370818}},
    {625, { -0.000118757}},
    {626, { -0.000256022}},
    {627, { -8.48928e-05}},
    {628, { -0.000651549}},
    {629, { -0.000292218}},
    {632, { -0.000296091}},
    {633, { -0.000100636}},
    {640, { -0.000418441}},
    {641, { -0.000133563}},
    {648, { -0.000579044}},
    {649, { -0.000190816}},
    {658, { -0.000549658}},
    {659, { -0.000166307}},
    {660, { -0.000553688}},
    {661, { -0.000158434}},
    {662, { -0.000625031}},
    {663, { -0.000197325}},
    {672, { -0.000581959}},
    {673, { -0.000184081}},
    {674, { -0.000206241}},
    {675, { -6.74544e-05}},
    {678, { -0.000363213}},
    {679, { -0.000113071}},
    {680, { -0.000468642}},
    {681, { -0.000177632}},
    {688, { -0.000260964}},
    {689, { -8.22922e-05}},
    {690, { -0.000209588}},
    {691, { -7.77142e-05}},
    {692, { -0.00177997}},
    {693, { -0.000672295}},
    {694, { -0.000302086}},
    {695, { -9.98352e-05}},
    {1106, { -0.000224259}},
    {1107, { -0.000104427}},
    {1120, { -0.000165511}},
    {1121, { -6.87119e-05}},
    {1124, { -0.000264768}},
    {1125, { -0.000105904}},
    {1128, { -0.00138051}},
    {1129, { -0.000867566}},
    {1170, { -0.00112072}},
    {1171, { -0.000294399}},
    {1172, { -0.000199789}},
    {1173, { -0.000248342}},
    {1174, { -0.000184672}},
    {1175, { -7.52855e-05}},
    {1176, { -0.000205229}},
    {1177, { -6.6536e-05}},
    {1204, { -0.000177179}},
    {1205, { -8.85381e-05}},
    {1208, { -0.000185032}},
    {1209, { -8.81272e-05}},
    {1232, { -0.000539789}},
    {1233, { -0.000190108}},
    {1236, { -0.000503616}},
    {1237, { -0.000137424}},
    {1298, { -0.00042807}},
    {1299, { -0.000128469}},
    {1330, { -0.00070504}},
    {1331, { -0.000386373}},
    {1332, { -0.00058814}},
    {1333, { -0.00018333}},
    };
    if(run>21831){
      DCR = {
      {584, { -0.000267211}},
      {585, { -6.93433e-05}},
      {592, { -0.000108998}},
      {593, { -5.40219e-05}},
      {598, { -0.000273038}},
      {599, { -8.80628e-05}},
      {608, { -0.000251167}},
      {609, { -7.93284e-05}},
      {610, { -0.000131693}},
      {611, { -5.73561e-05}},
      {614, { -0.000161868}},
      {615, { -6.05834e-05}},
      {624, { -0.000330619}},
      {625, { -9.59905e-05}},
      {626, { -0.000107957}},
      {627, { -4.90499e-05}},
      {628, { -0.000610501}},
      {629, { -0.000264744}},
      {632, { -0.000218713}},
      {633, { -9.59034e-05}},
      {640, { -0.000249618}},
      {641, { -6.83602e-05}},
      {648, { -0.000515765}},
      {649, { -0.000141843}},
      {658, { -0.000134659}},
      {659, { -5.39159e-05}},
      {660, { -0.000200299}},
      {661, { -7.58584e-05}},
      {662, { -0.000216133}},
      {663, { -7.61705e-05}},
      {672, { -0.000420119}},
      {673, { -0.000119016}},
      {674, { -0.000100532}},
      {675, { -3.93603e-05}},
      {678, { -0.000160345}},
      {679, { -5.30944e-05}},
      {680, { -0.000506843}},
      {681, { -0.000185388}},
      {688, { -0.00012599}},
      {689, { -5.24161e-05}},
      {690, { -0.00018557}},
      {691, { -6.09976e-05}},
      {692, { -0.000163132}},
      {693, { -7.27696e-05}},
      {694, { -0.000131088}},
      {695, { -5.43007e-05}},
      {1106, { -0.000185979}},
      {1107, { -9.80192e-05}},
      {1110, { -0.000127486}},
      {1111, { -6.14173e-05}},
      {1120, { -0.00014109}},
      {1121, { -6.50201e-05}},
      {1124, { -0.000358091}},
      {1125, { -0.000155599}},
      {1128, { -0.00155331}},
      {1129, { -0.000919087}},
      {1170, { -0.00123826}},
      {1171, { -0.000341803}},
      {1172, { -0.00020125}},
      {1173, { -8.52168e-05}},
      {1174, { -0.000159498}},
      {1175, { -7.0374e-05}},
      {1176, { -0.000193636}},
      {1177, { -6.67849e-05}},
      {1204, { -0.000174499}},
      {1205, { -8.25316e-05}},
      {1208, { -0.000191217}},
      {1209, { -8.24229e-05}},
      {1232, { -0.000261193}},
      {1233, { -0.00013542}},
      {1236, { -0.00013624}},
      {1237, { -5.7795e-05}},
      {1298, { -9.93563e-05}},
      {1299, { -6.11871e-05}},
      {1302, { -0.000136627}},
      {1303, { -0.000100035}},
      {1330, { -0.000960798}},
      {1331, { -0.000728756}},
      {1332, { -0.000191427}},
      {1333, { -8.84585e-05}},
      };
    }
    if(run>=25479){
      DCR = {
      {584, { -0.000188901}},
      {585, { -6.31137e-05}},
      {592, { -6.1686e-05}},
      {593, { -4.29434e-05}},
      {598, { -0.000238503}},
      {599, { -7.48871e-05}},
      {608, { -0.000250744}},
      {609, { -8.46429e-05}},
      {610, { -0.000151492}},
      {611, { -5.6746e-05}},
      {614, { -0.000178366}},
      {615, { -6.88296e-05}},
      {624, { -0.0002879}},
      {625, { -7.9678e-05}},
      {626, { -3.2189e-05}},
      {627, { -1.23515e-05}},
      {628, { -0.000731099}},
      {629, { -0.000249707}},
      {632, { -0.000185091}},
      {633, { -0.000104204}},
      {640, { -0.000269157}},
      {641, { -6.55967e-05}},
      {648, { -0.000433493}},
      {649, { -0.000124886}},
      {658, { -8.32287e-05}},
      {659, { -3.62665e-05}},
      {660, { -0.000169529}},
      {661, { -4.87708e-05}},
      {662, { -0.000180134}},
      {663, { -6.60024e-05}},
      {672, { -0.00032102}},
      {673, { -8.018e-05}},
      {674, { -0.000106947}},
      {675, { -3.84181e-05}},
      {678, { -0.000208937}},
      {679, { -6.17267e-05}},
      {680, { -0.000239089}},
      {681, { -0.000109686}},
      {688, { -0.000112475}},
      {689, { -5.40544e-05}},
      {690, { -0.000462146}},
      {691, { -0.000140799}},
      {694, { -0.000106612}},
      {695, { -4.76426e-05}},
      {1106, { -0.000613993}},
      {1107, { -0.000184654}},
      {1120, { -0.000149244}},
      {1121, { -6.96327e-05}},
      {1124, { -0.000469385}},
      {1125, { -0.000876925}},
      {1128, { -0.00100689}},
      {1129, { -0.000708585}},
      {1170, { -0.00107957}},
      {1171, { -0.000294908}},
      {1172, { -0.000169853}},
      {1173, { -8.1271e-05}},
      {1174, { -0.000134255}},
      {1175, { -7.77897e-05}},
      {1176, { -0.000217079}},
      {1177, { -7.19433e-05}},
      {1204, { -0.000129631}},
      {1205, { -8.03642e-05}},
      {1208, { -0.000178106}},
      {1209, { -6.75777e-05}},
      {1232, { -0.00107856}},
      {1233, { -0.000315173}},
      {1236, { -0.000989138}},
      {1237, { -0.000279291}},
      {1298, { -0.000989038}},
      {1299, { -0.000265673}},
      {1330, { -0.00118703}},
      {1331, { -0.000907753}},
      {1332, { -0.00102152}},
      {1333, { -0.000284505}},
      };
    }
   if(run>=22636 && run <= 24105){
      DCR[674] = { -0.000111103};
      DCR[675] = { -4.05466e-05};
    }
   if(run>=22636 && run <= 23176){
      DCR[690] = { -0.000369} ;
      DCR[691] = { -7.56327e-05} ;
      DCR[1232] = { -0.00107856} ;
      DCR[1233] = { -0.000315173};
      DCR[1236] = { -0.000989138};
      DCR[1237] = { -0.000279291};
    }
   if(run>=23509 && run <= 25489){
      DCR[690] = { -0.000164785};
      DCR[691] = { -6.69951e-05};
    }
   if(run>=23929 && run <= 24101){
      DCR[1106] = { -0.000140808};
      DCR[1107] = { -7.12686e-05};
      DCR[1298] = { -0.000128537};
      DCR[1299] = { -5.34045e-05};
      DCR[1302] = { -0.000135093};
      DCR[1303] = { -6.89213e-05};
   }
   if(run>= 24780){
      DCR[1232] = { -0.00107856} ;
      DCR[1233] = { -0.000315173};
      DCR[1236] = { -0.000989138};
      DCR[1237] = { -0.000279291};
   }
  }
  else if (dsNum == 6) DCR = {
    {584, { -0.000138839}},
    {585, { -3.57778e-05}},
    {592, { -5.15633e-05}},
    {593, { -1.72608e-05}},
    {598, { -7.8289e-05}},
    {599, { -2.45418e-05}},
    {608, { -0.000109522}},
    {609, { -3.2172e-05}},
    {610, { -4.5672e-05}},
    {611, { -1.65213e-05}},
    {614, { -5.75945e-05}},
    {615, { -2.0471e-05}},
    {624, { -0.000171227}},
    {625, { -4.46964e-05}},
    {626, { -4.03981e-05}},
    {627, { -1.42842e-05}},
    {628, { -0.000194509}},
    {629, { -7.07275e-05}},
    {632, { -8.13419e-05}},
    {633, { -2.60601e-05}},
    {640, { -0.000120488}},
    {641, { -3.24202e-05}},
    {648, { -0.000206968}},
    {649, { -4.96365e-05}},
    {658, { -4.43521e-05}},
    {659, { -1.57e-05}},
    {660, { -5.58629e-05}},
    {661, { -2.12547e-05}},
    {662, { -8.01509e-05}},
    {663, { -2.52406e-05}},
    {672, { -0.00020902}},
    {673, { -5.65268e-05}},
    {678, { -7.8776e-05}},
    {679, { -2.17128e-05}},
    {680, { -0.000209141}},
    {681, { -8.16972e-05}},
    {688, { -4.07791e-05}},
    {689, { -1.47482e-05}},
    {690, { -7.09198e-05}},
    {691, { -1.9712e-05}},
    {694, { -4.30362e-05}},
    {695, { -1.88875e-05}},
    {1106, { -4.31825e-05}},
    {1107, { -1.89219e-05}},
    {1110, { -3.9144e-05}},
    {1111, { -1.44749e-05}},
    {1120, { -4.41405e-05}},
    {1121, { -1.871e-05}},
    {1124, { -0.000115207}},
    {1125, { -4.25756e-05}},
    {1128, { -0.00040907}},
    {1129, { -0.000347123}},
    {1170, { -0.000414532}},
    {1171, { -0.000136285}},
    {1172, { -6.01349e-05}},
    {1173, { -2.2447e-05}},
    {1174, { -6.91428e-05}},
    {1175, { -2.27999e-05}},
    {1176, { -8.00469e-05}},
    {1177, { -2.44943e-05}},
    {1204, { -4.59035e-05}},
    {1205, { -1.65956e-05}},
    {1208, { -6.77862e-05}},
    {1209, { -3.46434e-05}},
    {1232, { -0.00011322}},
    {1233, { -5.09148e-05}},
    {1298, { -4.398e-05}},
    {1299, { -1.51302e-05}},
    {1302, { -6.1973e-05}},
    {1303, { -1.8966e-05}},
    {1330, { -0.000183767}},
    {1331, { -0.00029054}},
    {1332, { -6.15866e-05}},
    {1333, { -2.01792e-05}},
 };
  else return 0;

  // Calculate DCR only if we have trapMax and an "isGood" detector.
  if (trapMax == 0) return 0;
  else if (DCR.find(chan) == DCR.end()) return nlcblrwfSlope/trapMax;
  double dcr90val = GetDCR90(chan, nlcblrwfSlope, trapMax, dsNum, run);
  return dcr90val + DCR[chan][0];
}


double GetDCR995(int chan, double nlcblrwfSlope, double trapMax, int dsNum, int run)
{
  map<int,vector<double>> DCR;
  if (dsNum == 0) {
    DCR = {
      {576, { -0.000336846}},
      {577, { -9.43616e-05}},
      {592, { -0.000210806}},
      {593, { -0.000123618}},
      {594, { -0.000710995}},
      {595, { -0.000446078}},
      {598, { -0.00167581}},
      {599, { -0.000782313}},
      {600, { -0.000236131}},
      {601, { -8.95109e-05}},
      {608, { -0.00102905}},
      {609, { -0.000300332}},
      {610, { -0.000584632}},
      {611, { -0.000163613}},
      {624, { -0.000172359}},
      {625, { -7.8405e-05}},
      {626, { -0.000162465}},
      {627, { -6.8965e-05}},
      {640, { -0.000783605}},
      {641, { -0.000380438}},
      {644, { -0.000274463}},
      {645, { -0.000101588}},
      {646, { -0.0018154}},
      {647, { -0.000562463}},
      {656, { -0.000156628}},
      {657, { -6.61986e-05}},
      {662, { -0.000391686}},
      {663, { -8.04098e-05}},
      {664, { -0.000955334}},
      {665, { -0.00028057}},
      {674, { -0.000747101}},
      {675, { -0.000205742}},
      {688, { -0.000310515}},
      {689, { -0.000103286}},
      {690, { -0.000436021}},
      {691, { -0.000140704}},
      {692, { -0.00057654}},
      {693, { -0.000179913}},
      {696, { -0.00024466}},
      {697, { -9.85098e-05}},
    };
    if (run < 4909){
      DCR = {
        {576, { -0.000298415}},
        {577, { -8.58538e-05}},
        {592, { -0.00023263}},
        {593, { -0.000536922}},
        {594, { -0.000772346}},
        {595, { -0.00048452}},
        {598, { -0.0016409}},
        {599, { -0.000758927}},
        {600, { -0.000221341}},
        {601, { -9.05319e-05}},
        {608, { -0.0012672}},
        {609, { -0.000373206}},
        {610, { -0.000458938}},
        {611, { -0.000127034}},
        {624, { -0.00017823}},
        {625, { -8.01167e-05}},
        {626, { -0.000164477}},
        {627, { -6.829e-05}},
        {640, { -0.000186785}},
        {641, { -6.77243e-05}},
        {644, { -0.000250366}},
        {645, { -9.77319e-05}},
        {646, { -0.00152462}},
        {647, { -0.000513939}},
        {656, { -0.000163694}},
        {657, { -6.12648e-05}},
        {662, { -0.000452325}},
        {663, { -8.21745e-05}},
        {664, { -0.000844835}},
        {665, { -0.00026696}},
        {674, { -0.000721687}},
        {675, { -0.00019804}},
        {688, { -0.000241776}},
        {689, { -8.60403e-05}},
        {690, { -0.000416053}},
        {691, { -0.000121961}},
        {692, { -0.000366006}},
        {696, { -0.000240738}},
      };
    }
  }
  else if (dsNum == 1){
    DCR = {
      {578, { -0.000229636 }},
      {579, { -8.67811e-05 }},
      {580, { -0.000263159 }},
      {581, { -8.80105e-05 }},
      {582, { -0.000303352 }},
      {592, { -0.000632067 }},
      {593, { -0.000187256 }},
      {598, { -0.000431457 }},
      {599, { -0.000117037 }},
      {600, { -0.00158218 }},
      {601, { -0.000499329 }},
      {608, { -0.000359975 }},
      {609, { -0.000110303 }},
      {610, { -0.000187442 }},
      {611, { -7.56204e-05 }},
      {626, { -0.000186939 }},
      {627, { -6.97823e-05 }},
      {632, { -0.00034123 }},
      {633, { -0.000122665 }},
      {640, { -0.000932287 }},
      {641, { -0.000271247 }},
      {648, { -0.000991755 }},
      {649, { -0.000251353 }},
      {664, { -0.000496374 }},
      {665, { -0.000132686 }},
      {672, { -0.000156592 }},
      {673, { -8.03801e-05 }},
      {690, { -0.000519884 }},
      {691, { -0.000137595 }},
      {692, { -0.000479054 }},
      {693, { -0.00019621 }},
    };
    if (run < 12809){
      DCR = {
        {578, { -0.000207298}},
        {579, { -7.7264e-05}},
        {580, { -0.000264517}},
        {581, { -8.6801e-05}},
        {582, { -0.00030862}},
        {592, { -0.00060256}},
        {593, { -0.000194153}},
        {598, { -0.000349127}},
        {599, { -9.24372e-05}},
        {600, { -0.00176517}},
        {601, { -0.000536412}},
        {608, { -0.000366429}},
        {609, { -0.00012387}},
        {610, { -0.000189292}},
        {611, { -7.44874e-05}},
        {626, { -0.000177723}},
        {627, { -7.5154e-05}},
        {632, { -0.000512406}},
        {633, { -0.000148371}},
        {640, { -0.000399998}},
        {641, { -0.000105447}},
        {648, { -0.00106545}},
        {649, { -0.000278869}},
        {664, { -0.000481975}},
        {665, { -0.000122101}},
        {672, { -0.000165088}},
        {673, { -8.5374e-05}},
        {690, { -0.000455693}},
        {691, { -0.00012693}},
        {692, { -0.000434643}},
        {693, { -0.000163905}},
      };
    }
  }
  else if (dsNum == 2) DCR = {
    {578, { -6.34595e-05}},
    {579, { -2.35084e-05}},
    {580, { -8.384e-05}},
    {581, { -2.86348e-05}},
    {582, { -0.000149135}},
    {592, { -0.000288807}},
    {593, { -8.56233e-05}},
    {594, { -9.53603e-05}},
    {598, { -0.00016319}},
    {599, { -4.58854e-05}},
    {600, { -0.000797518}},
    {601, { -0.000258457}},
    {608, { -0.00013724}},
    {609, { -4.10865e-05}},
    {610, { -7.9006e-05}},
    {611, { -2.39765e-05}},
    {626, { -7.45348e-05}},
    {627, { -2.37043e-05}},
    {632, { -0.000115458}},
    {633, { -3.52425e-05}},
    {640, { -0.000234109}},
    {641, { -6.71553e-05}},
    {648, { -0.000432509}},
    {649, { -0.000115362}},
    {664, { -0.000258372}},
    {665, { -6.54318e-05}},
    {672, { -7.38955e-05}},
    {673, { -2.17177e-05}},
    {690, { -0.000178129}},
    {691, { -5.63713e-05}},
    {692, { -0.000105296}},
    {693, { -3.92166e-05}},
  };
  else if (dsNum == 3) DCR = {
    {578, { -0.000216141}},
    {579, { -7.52104e-05}},
    {580, { -0.00025695}},
    {581, { -8.60642e-05}},
    {582, { -0.000303838}},
    {592, { -0.00047036}},
    {593, { -0.000164244}},
    {594, { -0.000158188}},
    {598, { -0.000366001}},
    {599, { -9.61066e-05}},
    {600, { -0.00166542}},
    {601, { -0.000531391}},
    {608, { -0.000374264}},
    {609, { -0.000109459}},
    {610, { -0.000180396}},
    {611, { -7.73825e-05}},
    {614, { -0.00022374}},
    {615, { -9.70754e-05}},
    {624, { -0.00119059}},
    {625, { -0.000337556}},
    {626, { -0.000156234}},
    {627, { -6.2761e-05}},
    {632, { -0.000244391}},
    {633, { -0.000112226}},
    {640, { -0.000360181}},
    {641, { -0.00010319}},
    {648, { -0.000802979}},
    {649, { -0.000221758}},
    {664, { -0.000416459}},
    {665, { -0.000119501}},
    {672, { -0.000156721}},
    {673, { -7.89055e-05}},
    {678, { -0.00035625}},
    {679, { -0.000117462}},
    {690, { -0.000540688}},
    {691, { -0.00013767}},
    {692, { -0.000723442}},
    {693, { -0.000442014}},
    {694, { -0.000199726}},
    {695, { -0.000249213}},
  };
  else if (dsNum == 4) DCR = {
    {1106, { -0.000255497}},
    {1107, { -0.00100406}},
    {1136, { -0.00080958}},
    {1137, { -0.000328725}},
    {1144, { -0.00329287}},
    {1145, { -0.00123384}},
    {1170, { -0.00148936}},
    {1171, { -0.00040141}},
    {1172, { -0.000297241}},
    {1173, { -0.000120048}},
    {1174, { -0.000754121}},
    {1176, { -0.000346234}},
    {1177, { -9.87861e-05}},
    {1204, { -0.000165274}},
    {1205, { -6.94381e-05}},
    {1232, { -0.00196965}},
    {1233, { -0.000592183}},
    {1236, { -0.000254551}},
    {1237, { -7.32504e-05}},
    {1296, { -0.00628198}},
    {1297, { -0.00260902}},
    {1298, { -0.000117141}},
    {1299, { -5.74886e-05}},
    {1330, { -0.00317813}},
    {1331, { -0.0010799}},
    {1332, { -0.000253481}},
    {1333, { -9.27786e-05}},
  };
  else if (dsNum == 5) DCR = {
    {584, { -0.0005446}},
    {585, { -0.00013233}},
    {592, { -0.000182802}},
    {593, { -7.721e-05}},
    {598, { -0.000372362}},
    {599, { -0.000116406}},
    {608, { -0.000339061}},
    {609, { -0.000106679}},
    {610, { -0.00017453}},
    {611, { -7.53148e-05}},
    {614, { -0.000234036}},
    {615, { -8.60306e-05}},
    {624, { -0.000967586}},
    {625, { -0.000281541}},
    {626, { -0.000160506}},
    {627, { -6.62416e-05}},
    {628, { -0.00153261}},
    {629, { -0.000626605}},
    {632, { -0.000336133}},
    {633, { -0.000122372}},
    {640, { -0.000427178}},
    {641, { -0.000116637}},
    {648, { -0.000816126}},
    {649, { -0.000212535}},
    {658, { -0.000195478}},
    {659, { -7.35733e-05}},
    {660, { -0.000249073}},
    {661, { -9.53595e-05}},
    {662, { -0.000329189}},
    {663, { -0.000105603}},
    {672, { -0.000646987}},
    {673, { -0.000174889}},
    {674, { -0.000144187}},
    {675, { -5.12304e-05}},
    {678, { -0.000271289}},
    {679, { -8.1025e-05}},
    {680, { -0.00156718}},
    {681, { -0.000531057}},
    {688, { -0.000237107}},
    {689, { -8.32099e-05}},
    {690, { -0.00044744}},
    {691, { -0.000111042}},
    {692, { -0.000526614}},
    {693, { -0.000366962}},
    {694, { -0.000201312}},
    {695, { -0.000182487}},
    {1106, { -0.000307416}},
    {1107, { -0.000842238}},
    {1110, { -0.000170757}},
    {1111, { -7.87715e-05}},
    {1120, { -0.000550474}},
    {1121, { -0.000263102}},
    {1124, { -0.00221484}},
    {1125, { -0.000832968}},
    {1128, { -0.00412186}},
    {1129, { -0.00143769}},
    {1170, { -0.0018125}},
    {1171, { -0.000491958}},
    {1172, { -0.0002625}},
    {1173, { -0.000105266}},
    {1174, { -0.000614662}},
    {1175, { -0.000181533}},
    {1176, { -0.000354024}},
    {1177, { -0.000109895}},
    {1204, { -0.0002728}},
    {1205, { -0.000126739}},
    {1208, { -0.00160325}},
    {1209, { -0.000957904}},
    {1232, { -0.00110103}},
    {1233, { -0.000457535}},
    {1236, { -0.000268919}},
    {1237, { -8.19155e-05}},
    {1298, { -0.000135463}},
    {1299, { -7.64056e-05}},
    {1302, { -0.000206873}},
    {1303, { -0.000123421}},
    {1330, { -0.0034676}},
    {1331, { -0.00127309}},
    {1332, { -0.000262577}},
    {1333, { -0.000113139}},
  };
  else if (dsNum == 6) DCR = {
    {584, { -0.000263984}},
    {585, { -7.12888e-05}},
    {592, { -7.42875e-05}},
    {593, { -2.30239e-05}},
    {598, { -0.000111049}},
    {599, { -3.47586e-05}},
    {608, { -0.000164862}},
    {609, { -4.91191e-05}},
    {610, { -6.8112e-05}},
    {611, { -2.21775e-05}},
    {614, { -8.33984e-05}},
    {615, { -3.09699e-05}},
    {624, { -0.000402589}},
    {625, { -0.000126487}},
    {626, { -6.22942e-05}},
    {627, { -2.02905e-05}},
    {628, { -0.000419635}},
    {629, { -0.00020861}},
    {632, { -0.000123581}},
    {633, { -3.63953e-05}},
    {640, { -0.000191935}},
    {641, { -5.83928e-05}},
    {648, { -0.000312826}},
    {649, { -8.15326e-05}},
    {658, { -6.69234e-05}},
    {659, { -2.23254e-05}},
    {660, { -7.23117e-05}},
    {661, { -2.65569e-05}},
    {662, { -0.000151654}},
    {663, { -4.32854e-05}},
    {672, { -0.000297603}},
    {673, { -8.06414e-05}},
    {678, { -0.000129287}},
    {679, { -3.6422e-05}},
    {680, { -0.000742073}},
    {681, { -0.000256085}},
    {688, { -7.44675e-05}},
    {689, { -2.47416e-05}},
    {690, { -0.000160127}},
    {691, { -4.49544e-05}},
    {694, { -8.2047e-05}},
    {695, { -4.76435e-05}},
    {1106, { -6.28865e-05}},
    {1107, { -0.000104125}},
    {1110, { -6.29379e-05}},
    {1111, { -1.96907e-05}},
    {1120, { -0.000160123}},
    {1121, { -0.000106706}},
    {1124, { -0.000644804}},
    {1125, { -0.000312793}},
    {1128, { -0.00155569}},
    {1129, { -0.000576559}},
    {1170, { -0.000723294}},
    {1171, { -0.000217594}},
    {1172, { -8.26165e-05}},
    {1173, { -2.86757e-05}},
    {1174, { -0.000224992}},
    {1175, { -7.50881e-05}},
    {1176, { -0.000132927}},
    {1177, { -3.8541e-05}},
    {1204, { -6.98473e-05}},
    {1205, { -2.31012e-05}},
    {1208, { -0.000516761}},
    {1209, { -0.000407714}},
    {1232, { -0.000954393}},
    {1233, { -0.000324427}},
    {1298, { -5.8686e-05}},
    {1299, { -1.97332e-05}},
    {1302, { -0.000112913}},
    {1303, { -2.87259e-05}},
    {1330, { -0.00119008}},
    {1331, { -0.000501533}},
    {1332, { -9.04815e-05}},
    {1333, { -2.72784e-05}},
  };
  else return 0;

  // Calculate DCR only if we have trapMax and an "isGood" detector.
  if (trapMax == 0) return 0;
  else if (DCR.find(chan) == DCR.end()) return nlcblrwfSlope/trapMax;
  double dcr90val = GetDCR90(chan, nlcblrwfSlope, trapMax, dsNum, run);
  return dcr90val + DCR[chan][0];
}


double GetDCR999(int chan, double nlcblrwfSlope, double trapMax, int dsNum, int run)
{
  map<int,vector<double>> DCR;
  if (dsNum == 0) {
    DCR = {
      {576, { -0.000765814}},
      {577, { -0.00025953}},
      {592, { -0.00435177}},
      {593, { -0.00207691}},
      {594, { -0.00369575}},
      {595, { -0.0014506}},
      {598, { -0.00509284}},
      {599, { -0.00236614}},
      {600, { -0.00197861}},
      {601, { -0.000679333}},
      {608, { -0.00300428}},
      {609, { -0.000907619}},
      {610, { -0.00121734}},
      {611, { -0.000361907}},
      {624, { -0.000500616}},
      {625, { -0.000174714}},
      {626, { -0.000633613}},
      {627, { -0.000253539}},
      {640, { -0.00238726}},
      {641, { -0.00107494}},
      {644, { -0.000607567}},
      {645, { -0.000193784}},
      {646, { -0.00356154}},
      {647, { -0.00116622}},
      {656, { -0.000630574}},
      {657, { -0.000194304}},
      {662, { -0.000649482}},
      {663, { -0.000119253}},
      {664, { -0.00203539}},
      {665, { -0.00068946}},
      {674, { -0.00126433}},
      {675, { -0.000357646}},
      {688, { -0.000543755}},
      {689, { -0.00019646}},
      {690, { -0.00122708}},
      {691, { -0.000392264}},
      {692, { -0.00114612}},
      {693, { -0.000440134}},
      {696, { -0.000947163}},
      {697, { -0.000396597}},
    };
    if (run < 4909){
      DCR = {
        {576, { -0.00066536}},
        {577, { -0.000217995}},
        {592, { -0.00465728}},
        {593, { -0.00198593}},
        {594, { -0.00353443}},
        {595, { -0.00146174}},
        {598, { -0.00470021}},
        {599, { -0.00236657}},
        {600, { -0.00220266}},
        {601, { -0.000717539}},
        {608, { -0.00284301}},
        {609, { -0.00087799}},
        {610, { -0.00116253}},
        {611, { -0.000334735}},
        {624, { -0.000613562}},
        {625, { -0.000182946}},
        {626, { -0.0008092}},
        {627, { -0.00024504}},
        {640, { -0.00059385}},
        {641, { -0.000175413}},
        {644, { -0.00056369}},
        {645, { -0.000156636}},
        {646, { -0.0036175}},
        {647, { -0.00118769}},
        {656, { -0.00060745}},
        {657, { -0.00020034}},
        {662, { -0.000762863}},
        {663, { -0.000128091}},
        {664, { -0.00233429}},
        {665, { -0.00074432}},
        {674, { -0.00134028}},
        {675, { -0.000387548}},
        {688, { -0.000343965}},
        {689, { -0.000124876}},
        {690, { -0.00107304}},
        {691, { -0.000327051}},
        {692, { -0.000788913}},
        {696, { -0.00074774}},
      };
    }
  }
  else if (dsNum == 1) {
    DCR = {
      {578, { -0.00115439 }},
      {579, { -0.00039335 }},
      {580, { -0.000369795 }},
      {581, { -0.000121651 }},
      {582, { -0.00088081 }},
      {592, { -0.00120843 }},
      {593, { -0.000502593 }},
      {598, { -0.000836268 }},
      {599, { -0.000242355 }},
      {600, { -0.00349981 }},
      {601, { -0.00108243 }},
      {608, { -0.000736219 }},
      {609, { -0.000205838 }},
      {610, { -0.000312403 }},
      {611, { -0.000119375 }},
      {626, { -0.000731402 }},
      {627, { -0.000222335 }},
      {632, { -0.000769094 }},
      {633, { -0.000210707 }},
      {640, { -0.00168283 }},
      {641, { -0.000510534 }},
      {648, { -0.00152108 }},
      {649, { -0.000432926 }},
      {664, { -0.00101131 }},
      {665, { -0.000287739 }},
      {672, { -0.000610992 }},
      {673, { -0.000202449 }},
      {690, { -0.00152859 }},
      {691, { -0.000460178 }},
      {692, { -0.00290822 }},
      {693, { -0.00150128 }},
    };
    if (run < 12809){
      DCR = {
        {578, { -0.000880184}},
        {579, { -0.000250007}},
        {580, { -0.000387362}},
        {581, { -0.000119546}},
        {582, { -0.000931203}},
        {592, { -0.00107116}},
        {593, { -0.000503441}},
        {598, { -0.000729833}},
        {599, { -0.000207759}},
        {600, { -0.00389551}},
        {601, { -0.00120703}},
        {608, { -0.000687286}},
        {609, { -0.000273835}},
        {610, { -0.00038344}},
        {611, { -0.000121138}},
        {626, { -0.000790547}},
        {627, { -0.000243319}},
        {632, { -0.00101239}},
        {633, { -0.000305076}},
        {640, { -0.000851736}},
        {641, { -0.0002709}},
        {648, { -0.00154949}},
        {649, { -0.000435219}},
        {664, { -0.00100407}},
        {665, { -0.000284963}},
        {672, { -0.000776112}},
        {673, { -0.00022273}},
        {690, { -0.00141607}},
        {691, { -0.000389954}},
        {692, { -0.00279169}},
        {693, { -0.00136277}},
      };
    }
  }
  else if (dsNum == 2) DCR = {
    {578, { -0.000178415}},
    {579, { -4.38802e-05}},
    {580, { -0.000121841}},
    {581, { -4.23228e-05}},
    {582, { -0.000427085}},
    {592, { -0.000468771}},
    {593, { -0.000141011}},
    {594, { -0.000192354}},
    {598, { -0.000311888}},
    {599, { -8.76266e-05}},
    {600, { -0.00174322}},
    {601, { -0.00052515}},
    {608, { -0.000292434}},
    {609, { -9.16979e-05}},
    {610, { -0.000176053}},
    {611, { -4.88627e-05}},
    {626, { -0.000188702}},
    {627, { -6.062e-05}},
    {632, { -0.000224144}},
    {633, { -6.47366e-05}},
    {640, { -0.000494899}},
    {641, { -0.000154377}},
    {648, { -0.000674351}},
    {649, { -0.0001866}},
    {664, { -0.000463179}},
    {665, { -0.000125136}},
    {672, { -0.000185297}},
    {673, { -5.35007e-05}},
    {690, { -0.000635987}},
    {691, { -0.000193309}},
    {692, { -0.000935706}},
    {693, { -0.000509892}},
  };
  else if (dsNum == 3) DCR = {
    {578, { -0.000876925}},
    {579, { -0.000229172}},
    {580, { -0.000370282}},
    {581, { -0.000121006}},
    {582, { -0.00095984}},
    {592, { -0.00101}},
    {593, { -0.000518636}},
    {594, { -0.000628392}},
    {598, { -0.000781346}},
    {599, { -0.000220498}},
    {600, { -0.00353823}},
    {601, { -0.00109592}},
    {608, { -0.000737339}},
    {609, { -0.000220736}},
    {610, { -0.000361026}},
    {611, { -0.000132049}},
    {614, { -0.00289663}},
    {615, { -0.00207602}},
    {624, { -0.00284523}},
    {625, { -0.000941203}},
    {626, { -0.000665542}},
    {627, { -0.000179028}},
    {632, { -0.000384308}},
    {633, { -0.000159101}},
    {640, { -0.00083211}},
    {641, { -0.00036422}},
    {648, { -0.0013866}},
    {649, { -0.000404347}},
    {664, { -0.000915022}},
    {665, { -0.000275578}},
    {672, { -0.000844783}},
    {673, { -0.000291287}},
    {678, { -0.000573963}},
    {679, { -0.000180565}},
    {690, { -0.00149354}},
    {691, { -0.000416278}},
    {692, { -0.00336517}},
    {693, { -0.00146023}},
    {694, { -0.0017887}},
    {695, { -0.00131061}},
  };
  else if (dsNum == 4) DCR = {
    {1106, { -0.00575937}},
    {1107, { -0.00321913}},
    {1136, { -0.00401632}},
    {1137, { -0.00136993}},
    {1144, { -0.00529648}},
    {1145, { -0.00206565}},
    {1170, { -0.00246882}},
    {1171, { -0.00071662}},
    {1172, { -0.000773708}},
    {1173, { -0.00022307}},
    {1174, { -0.00228915}},
    {1176, { -0.00124801}},
    {1177, { -0.000524852}},
    {1204, { -0.000878579}},
    {1205, { -0.000284815}},
    {1232, { -0.00376707}},
    {1233, { -0.00122602}},
    {1236, { -0.000578973}},
    {1237, { -0.000174229}},
    {1296, { -0.00924896}},
    {1297, { -0.00367613}},
    {1298, { -0.000192324}},
    {1299, { -8.70007e-05}},
    {1330, { -0.0050622}},
    {1331, { -0.00188644}},
    {1332, { -0.000389751}},
    {1333, { -0.000135758}},
  };
  else if (dsNum == 5) DCR = {
    {584, { -0.00101803}},
    {585, { -0.000276944}},
    {592, { -0.000786229}},
    {593, { -0.00022412}},
    {598, { -0.000655837}},
    {599, { -0.000198108}},
    {608, { -0.000660289}},
    {609, { -0.000220196}},
    {610, { -0.000366201}},
    {611, { -0.000126773}},
    {614, { -0.00198276}},
    {615, { -0.000932427}},
    {624, { -0.00278469}},
    {625, { -0.000910142}},
    {626, { -0.000657968}},
    {627, { -0.000210745}},
    {628, { -0.0059322}},
    {629, { -0.00241567}},
    {632, { -0.000723523}},
    {633, { -0.000204366}},
    {640, { -0.000851778}},
    {641, { -0.00029946}},
    {648, { -0.00157086}},
    {649, { -0.000432811}},
    {658, { -0.000576906}},
    {659, { -0.000200519}},
    {660, { -0.000360739}},
    {661, { -0.000136325}},
    {662, { -0.000988206}},
    {663, { -0.00023917}},
    {672, { -0.0011337}},
    {673, { -0.000501676}},
    {674, { -0.000475453}},
    {675, { -0.000141002}},
    {678, { -0.000658027}},
    {679, { -0.000216642}},
    {680, { -0.00372303}},
    {681, { -0.00106351}},
    {688, { -0.00236843}},
    {689, { -0.000840375}},
    {690, { -0.00167746}},
    {691, { -0.000437238}},
    {692, { -0.00329405}},
    {693, { -0.00205305}},
    {694, { -0.00193885}},
    {695, { -0.00131487}},
    {1106, { -0.00606965}},
    {1107, { -0.00332065}},
    {1110, { -0.000597139}},
    {1111, { -0.000168757}},
    {1120, { -0.00338139}},
    {1121, { -0.00124217}},
    {1124, { -0.00526988}},
    {1125, { -0.00165249}},
    {1128, { -0.00648871}},
    {1129, { -0.00258884}},
    {1170, { -0.0028826}},
    {1171, { -0.000835448}},
    {1172, { -0.000516687}},
    {1173, { -0.000163202}},
    {1174, { -0.00197327}},
    {1175, { -0.000572556}},
    {1176, { -0.0015858}},
    {1177, { -0.000550821}},
    {1204, { -0.00169468}},
    {1205, { -0.000489486}},
    {1208, { -0.0055949}},
    {1209, { -0.00201549}},
    {1232, { -0.00417697}},
    {1233, { -0.0013014}},
    {1236, { -0.000700126}},
    {1237, { -0.000190743}},
    {1298, { -0.000240394}},
    {1299, { -0.000134698}},
    {1302, { -0.000639544}},
    {1303, { -0.000223672}},
    {1330, { -0.00557022}},
    {1331, { -0.00210885}},
    {1332, { -0.000437818}},
    {1333, { -0.000169946}},
  };
  else if (dsNum == 6) DCR = {
    {584, { -0.000476906}},
    {585, { -0.000139107}},
    {592, { -0.000181861}},
    {593, { -5.1717e-05}},
    {598, { -0.000233964}},
    {599, { -6.87939e-05}},
    {608, { -0.000405582}},
    {609, { -0.000132045}},
    {610, { -0.000166848}},
    {611, { -4.797e-05}},
    {614, { -0.000419805}},
    {615, { -0.000634182}},
    {624, { -0.0012436}},
    {625, { -0.000357723}},
    {626, { -0.000160375}},
    {627, { -4.76574e-05}},
    {628, { -0.00181291}},
    {629, { -0.000834801}},
    {632, { -0.000253771}},
    {633, { -7.10052e-05}},
    {640, { -0.000367793}},
    {641, { -0.000119663}},
    {648, { -0.000541841}},
    {649, { -0.000153486}},
    {658, { -0.000201416}},
    {659, { -8.01568e-05}},
    {660, { -0.000107431}},
    {661, { -3.92006e-05}},
    {662, { -0.000422104}},
    {663, { -0.000122718}},
    {672, { -0.000468825}},
    {673, { -0.000136193}},
    {678, { -0.000274224}},
    {679, { -7.875e-05}},
    {680, { -0.00186445}},
    {681, { -0.000590665}},
    {688, { -0.00105998}},
    {689, { -0.000315298}},
    {690, { -0.000684481}},
    {691, { -0.000171667}},
    {694, { -0.000546755}},
    {695, { -0.000595689}},
    {1106, { -0.00194092}},
    {1107, { -0.00140087}},
    {1110, { -0.000209289}},
    {1111, { -5.98083e-05}},
    {1120, { -0.0017038}},
    {1121, { -0.000669071}},
    {1124, { -0.00206887}},
    {1125, { -0.000738942}},
    {1128, { -0.00261209}},
    {1129, { -0.00101501}},
    {1170, { -0.00116776}},
    {1171, { -0.000353612}},
    {1172, { -0.000203885}},
    {1173, { -5.56364e-05}},
    {1174, { -0.000911732}},
    {1175, { -0.000273975}},
    {1176, { -0.000366096}},
    {1177, { -0.000111288}},
    {1204, { -0.000329078}},
    {1205, { -0.000114476}},
    {1208, { -0.00229144}},
    {1209, { -0.000889782}},
    {1232, { -0.00196476}},
    {1233, { -0.000628778}},
    {1298, { -0.000134382}},
    {1299, { -3.68526e-05}},
    {1302, { -0.000205602}},
    {1303, { -6.3206e-05}},
    {1330, { -0.0020285}},
    {1331, { -0.00084874}},
    {1332, { -0.000206061}},
    {1333, { -5.6232e-05}},
  };
  else return 0;

  // Calculate DCR only if we have trapMax and an "isGood" detector.
  if (trapMax == 0) return 0;
  else if (DCR.find(chan) == DCR.end()) return nlcblrwfSlope/trapMax;
  double dcr90val = GetDCR90(chan, nlcblrwfSlope, trapMax, dsNum, run);
  return dcr90val + DCR[chan][0];
}


bool GetLNRunCoverage(int dsNum, int run) {
  // Requested by Jason at the internal 0nbb review, 30 Aug. 2017.
  // Given a run and DS number, verify that this run is covered by the most recent LN Fill Tag.
  // This function MUST be updated manually when 'LoadLNFillTimes1/2' are updated.

  // LN tag was most recently run on 20 Jul 2017, for DS0-5.
  if (dsNum==0 && run >= 2580 && run <= 6963) return true;
  if (dsNum==1 && run >= 9422 && run <= 14502)  return true;
  if (dsNum==2 && run >= 14503 && run <= 15892) return true;
  if (dsNum==3 && run >= 16797 && run <= 17980) return true;
  if (dsNum==4 && run >= 60000802 && run <= 60001888) return true;
  if (dsNum==5 && run >= 18623 && run < 25671) return true;
  if (dsNum==6) return false;
  return false;
}


void LoadDS4MuonList(vector<int> &muRuns, vector<double> &muRunTStarts,
  vector<double> &muTimes,vector<int> &muTypes, vector<double> &muUncert)
{
  // Created by "GenerateDS4MuonList" in $GATDIR/mjd-veto/skim-veto.cc

  vector<int> ds4muRuns = {60000804, 60000804, 60000804, 60000804, 60000804, 60000805, 60000806, 60000807, 60000807, 60000807, 60000808, 60000809, 60000810, 60000810, 60000810, 60000810, 60000811, 60000811, 60000813, 60000814, 60000814, 60000815, 60000816, 60000816, 60000817, 60000818, 60000819, 60000819, 60000820, 60000821, 60000827, 60000828, 60000830, 60000851, 60000851, 60000855, 60000858, 60000858, 60000858, 60000859, 60000859, 60000861, 60000862, 60000869, 60000870, 60000871, 60000872, 60000873, 60000873, 60000874, 60000875, 60000875, 60000876, 60000876, 60000877, 60000877, 60000878, 60000881, 60000882, 60000883, 60000883, 60000883, 60000884, 60000884, 60000885, 60000885, 60000886, 60000887, 60000887, 60000887, 60000890, 60000890, 60000892, 60000893, 60000893, 60000894, 60000894, 60000894, 60000895, 60000896, 60000896, 60000897, 60000897, 60000899, 60000900, 60000900, 60000902, 60000902, 60000902, 60000902, 60000903, 60000903, 60000903, 60000903, 60000903, 60000904, 60000905, 60000906, 60000908, 60000909, 60000909, 60000910, 60000910, 60000910, 60000912, 60000913, 60000914, 60000914, 60000915, 60000915, 60000915, 60000916, 60000917, 60000917, 60000919, 60000919, 60000919, 60000919, 60000922, 60000928, 60000929, 60000929, 60000929, 60000929, 60000929, 60000930, 60000930, 60000930, 60000930, 60000931, 60000931, 60000932, 60000933, 60000937, 60000937, 60000937, 60000938, 60000938, 60000940, 60000940, 60000941, 60000942, 60000942, 60000953, 60000970, 60000971, 60000972, 60000972, 60000973, 60000974, 60000974, 60000976, 60000976, 60000976, 60000976, 60000977, 60000977, 60000977, 60000977, 60000978, 60000979, 60000979, 60000979, 60000980, 60000982, 60000985, 60000985, 60000986, 60000986, 60000987, 60000988, 60000989, 60000989, 60000990, 60000992, 60000992, 60000993, 60000994, 60000994, 60000994, 60000995, 60000995, 60000996, 60000997, 60000997, 60000997, 60000998, 60000998, 60000998, 60000999, 60000999, 60000999, 60001000, 60001001, 60001001, 60001001, 60001002, 60001002, 60001002, 60001003, 60001004, 60001004, 60001004, 60001005, 60001006, 60001008, 60001008, 60001010, 60001033, 60001034, 60001035, 60001035, 60001037, 60001037, 60001037, 60001038, 60001038, 60001038, 60001039, 60001039, 60001040, 60001042, 60001042, 60001042, 60001043, 60001043, 60001045, 60001046, 60001048, 60001050, 60001050, 60001051, 60001052, 60001052, 60001052, 60001053, 60001053, 60001053, 60001054, 60001054, 60001055, 60001056, 60001056, 60001056, 60001057, 60001058, 60001058, 60001058, 60001059, 60001059, 60001060, 60001061, 60001061, 60001063, 60001063, 60001065, 60001065, 60001066, 60001066, 60001066, 60001068, 60001069, 60001069, 60001069, 60001070, 60001070, 60001070, 60001072, 60001072, 60001074, 60001074, 60001075, 60001075, 60001075, 60001077, 60001078, 60001078, 60001078, 60001078, 60001078, 60001079, 60001082, 60001082, 60001082, 60001083, 60001084, 60001084, 60001084, 60001085, 60001086, 60001086, 60001086, 60001088, 60001089, 60001089, 60001089, 60001091, 60001091, 60001092, 60001092, 60001093, 60001093, 60001094, 60001094, 60001096, 60001097, 60001097, 60001097, 60001098, 60001098, 60001100, 60001100, 60001100, 60001100, 60001100, 60001100, 60001101, 60001101, 60001102, 60001102, 60001103, 60001104, 60001104, 60001104, 60001107, 60001107, 60001107, 60001108, 60001108, 60001110, 60001111, 60001112, 60001112, 60001114, 60001114, 60001115, 60001115, 60001116, 60001117, 60001120, 60001121, 60001121, 60001122, 60001122, 60001123, 60001123, 60001165, 60001167, 60001168, 60001168, 60001169, 60001169, 60001169, 60001170, 60001170, 60001172, 60001175, 60001176, 60001177, 60001177, 60001177, 60001178, 60001178, 60001184, 60001184, 60001185, 60001188, 60001188, 60001189, 60001189, 60001190, 60001191, 60001191, 60001192, 60001192, 60001192, 60001193, 60001193, 60001193, 60001193, 60001194, 60001194, 60001194, 60001194, 60001195, 60001197, 60001197, 60001197, 60001198, 60001198, 60001199, 60001201, 60001203, 60001203, 60001203, 60001203, 60001204, 60001204, 60001205, 60001308, 60001308, 60001309, 60001310, 60001310, 60001311, 60001312, 60001313, 60001313, 60001313, 60001313, 60001315, 60001317, 60001317, 60001317, 60001318, 60001319, 60001330, 60001330, 60001330, 60001332, 60001333, 60001333, 60001333, 60001334, 60001334, 60001335, 60001335, 60001336, 60001337, 60001337, 60001338, 60001338, 60001339, 60001341, 60001341, 60001342, 60001342, 60001342, 60001342, 60001343, 60001343, 60001344, 60001344, 60001344, 60001345, 60001345, 60001346, 60001346, 60001346, 60001346, 60001347, 60001348, 60001350, 60001379, 60001379, 60001380, 60001381, 60001381, 60001381, 60001382, 60001382, 60001385, 60001386, 60001386, 60001387, 60001387, 60001387, 60001388, 60001389, 60001390, 60001390, 60001390, 60001391, 60001391, 60001391, 60001392, 60001394, 60001395, 60001397, 60001399, 60001399, 60001400, 60001403, 60001405, 60001405, 60001406, 60001406, 60001407, 60001408, 60001410, 60001410, 60001410, 60001410, 60001411, 60001412, 60001412, 60001413, 60001414, 60001415, 60001415, 60001416, 60001416, 60001417, 60001417, 60001418, 60001418, 60001418, 60001418, 60001419, 60001420, 60001420, 60001421, 60001421, 60001421, 60001424, 60001424, 60001426, 60001426, 60001427, 60001428, 60001429, 60001430, 60001430, 60001430, 60001431, 60001431, 60001432, 60001432, 60001433, 60001433, 60001434, 60001435, 60001435, 60001435, 60001436, 60001436, 60001437, 60001439, 60001463, 60001464, 60001465, 60001466, 60001467, 60001469, 60001470, 60001471, 60001471, 60001471, 60001472, 60001472, 60001473, 60001475, 60001475, 60001475, 60001475, 60001476, 60001477, 60001477, 60001478, 60001478, 60001478, 60001479, 60001480, 60001481, 60001482, 60001482, 60001482, 60001482, 60001483, 60001483, 60001484, 60001485, 60001485, 60001485, 60001487, 60001487, 60001488, 60001489, 60001491, 60001491, 60001491, 60001491, 60001492, 60001493, 60001493, 60001497, 60001497, 60001500, 60001500, 60001501, 60001501, 60001501, 60001501, 60001502, 60001502, 60001502, 60001503, 60001503, 60001504, 60001504, 60001505, 60001506, 60001507, 60001507, 60001507, 60001523, 60001523, 60001524, 60001524, 60001524, 60001524, 60001525, 60001525, 60001525, 60001525, 60001527, 60001527, 60001528, 60001529, 60001531, 60001532, 60001534, 60001535, 60001535, 60001536, 60001536, 60001537, 60001537, 60001537, 60001538, 60001538, 60001539, 60001541, 60001541, 60001541, 60001547, 60001548, 60001550, 60001553, 60001553, 60001553, 60001554, 60001554, 60001554, 60001555, 60001555, 60001559, 60001559, 60001560, 60001561, 60001562, 60001562, 60001564, 60001564, 60001565, 60001565, 60001567, 60001567, 60001568, 60001568, 60001568, 60001568, 60001572, 60001572, 60001572, 60001573, 60001575, 60001575, 60001576, 60001576, 60001594, 60001595, 60001596, 60001597, 60001597, 60001597, 60001597, 60001597, 60001599, 60001600, 60001600, 60001601, 60001602, 60001603, 60001603, 60001604, 60001605, 60001605, 60001606, 60001607, 60001607, 60001608, 60001610, 60001610, 60001610, 60001611, 60001612, 60001612, 60001613, 60001614, 60001616, 60001616, 60001616, 60001617, 60001617, 60001618, 60001618, 60001618, 60001619, 60001620, 60001621, 60001621, 60001622, 60001622, 60001623, 60001624, 60001625, 60001625, 60001627, 60001628, 60001629, 60001630, 60001631, 60001631, 60001632, 60001632, 60001633, 60001633, 60001633, 60001633, 60001633, 60001634, 60001635, 60001635, 60001635, 60001635, 60001637, 60001637, 60001640, 60001641, 60001642, 60001643, 60001643, 60001645, 60001645, 60001646, 60001646, 60001647, 60001647, 60001647, 60001648, 60001648, 60001649, 60001649, 60001650, 60001650, 60001652, 60001652, 60001653, 60001654, 60001655, 60001655, 60001655, 60001655, 60001657, 60001657, 60001658, 60001658, 60001659, 60001660, 60001661, 60001661, 60001662, 60001663, 60001664, 60001664, 60001666, 60001667, 60001668, 60001668, 60001668, 60001669, 60001669, 60001670, 60001671, 60001671, 60001671, 60001672, 60001672, 60001673, 60001674, 60001674, 60001674, 60001675, 60001675, 60001676, 60001676, 60001677, 60001678, 60001680, 60001681, 60001682, 60001682, 60001682, 60001683, 60001684, 60001686, 60001686, 60001690, 60001690, 60001690, 60001690, 60001691, 60001692, 60001692, 60001694, 60001695, 60001695, 60001695, 60001695, 60001695, 60001695, 60001695, 60001696, 60001696, 60001698, 60001701, 60001702, 60001702, 60001704, 60001704, 60001704, 60001704, 60001704, 60001705, 60001706, 60001706, 60001706, 60001706, 60001707, 60001708, 60001709, 60001709, 60001711, 60001711, 60001712, 60001713, 60001734, 60001734, 60001734, 60001734, 60001734, 60001734, 60001735, 60001735, 60001738, 60001739, 60001739, 60001739, 60001740, 60001740, 60001740, 60001740, 60001741, 60001742, 60001742, 60001744, 60001744, 60001744, 60001747, 60001748, 60001749, 60001750, 60001750, 60001750, 60001753, 60001753, 60001756, 60001757, 60001757, 60001758, 60001758, 60001759, 60001759, 60001760, 60001760, 60001762, 60001763, 60001764, 60001765, 60001765, 60001766, 60001767, 60001767, 60001768, 60001769, 60001769, 60001770, 60001770, 60001771, 60001771, 60001771, 60001771, 60001773, 60001773, 60001774, 60001774, 60001774, 60001775, 60001777, 60001777, 60001778, 60001779, 60001779, 60001780, 60001781, 60001783, 60001784, 60001785, 60001788, 60001789, 60001789, 60001789, 60001789, 60001789, 60001789, 60001789, 60001789, 60001790, 60001791, 60001792, 60001793, 60001793, 60001794, 60001794, 60001794, 60001795, 60001795, 60001796, 60001797, 60001798, 60001798, 60001799, 60001800, 60001800, 60001800, 60001800, 60001801, 60001801, 60001802, 60001802, 60001802, 60001803, 60001804, 60001805, 60001805, 60001805, 60001806, 60001806, 60001807, 60001810, 60001810, 60001810, 60001812, 60001812, 60001812, 60001813, 60001813, 60001814, 60001815, 60001816, 60001817, 60001819, 60001819, 60001820, 60001820, 60001820, 60001821, 60001821, 60001821, 60001822, 60001823, 60001824, 60001824, 60001827, 60001828, 60001828, 60001828, 60001829, 60001830, 60001831, 60001831, 60001831, 60001832, 60001833, 60001833, 60001834, 60001834, 60001835, 60001837, 60001838, 60001839, 60001840, 60001841, 60001841, 60001843, 60001843, 60001845, 60001846, 60001848, 60001848, 60001849, 60001850, 60001850, 60001851, 60001874, 60001877, 60001877, 60001879, 60001880, 60001880, 60001881, 60001881, 60001884, 60001884, 60001885, 60001885, 60001886, 60001886, 60001886, 60001887, 60001888, 60001888, 60001888};

  vector<int> ds4muTypes = {1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1};

  vector<double> ds4muRunTStarts = {1472176844, 1472176844, 1472176844, 1472176844, 1472176844, 1472180445, 1472184046, 1472187647, 1472187647, 1472187647, 1472191248, 1472194849, 1472198450, 1472198450, 1472198450, 1472198450, 1472202051, 1472202051, 1472209253, 1472212854, 1472212854, 1472216455, 1472220132, 1472220132, 1472223734, 1472227335, 1472230936, 1472230936, 1472234537, 1472238138, 1472248439, 1472252041, 1472260415, 1472281685, 1472281685, 1472285849, 1472290926, 1472290926, 1472290926, 1472294527, 1472294527, 1472301731, 1472305333, 1472319709, 1472323311, 1472326912, 1472330512, 1472334113, 1472334113, 1472337714, 1472341314, 1472341314, 1472344915, 1472344915, 1472348516, 1472348516, 1472352117, 1472362920, 1472366522, 1472370124, 1472370124, 1472370124, 1472373726, 1472373726, 1472377327, 1472377327, 1472380928, 1472384529, 1472384529, 1472384529, 1472392234, 1472392234, 1472399436, 1472403037, 1472403037, 1472406638, 1472406638, 1472406638, 1472410239, 1472413840, 1472413840, 1472417441, 1472417441, 1472424643, 1472428244, 1472428244, 1472435445, 1472435445, 1472435445, 1472435445, 1472439046, 1472439046, 1472439046, 1472439046, 1472439046, 1472442647, 1472446248, 1472449849, 1472457060, 1472460662, 1472460662, 1472464263, 1472464263, 1472464263, 1472471467, 1472475069, 1472478671, 1472478671, 1472482272, 1472482272, 1472482272, 1472485872, 1472489474, 1472489474, 1472496677, 1472496677, 1472496677, 1472496677, 1472507480, 1472516318, 1472519919, 1472519919, 1472519919, 1472519919, 1472519919, 1472523521, 1472523521, 1472523521, 1472523521, 1472527123, 1472527123, 1472530725, 1472534328, 1472548733, 1472548733, 1472548733, 1472552335, 1472552335, 1472559538, 1472559538, 1472563140, 1472566750, 1472566750, 1472587788, 1472598175, 1472601776, 1472605377, 1472605377, 1472608978, 1472612579, 1472612579, 1472619780, 1472619780, 1472619780, 1472619780, 1472623382, 1472623382, 1472623382, 1472623382, 1472626544, 1472630145, 1472630145, 1472630145, 1472633747, 1472640949, 1472651752, 1472651752, 1472655353, 1472655353, 1472658954, 1472662555, 1472666156, 1472666156, 1472669758, 1472680927, 1472680927, 1472684528, 1472688129, 1472688129, 1472688129, 1472691730, 1472691730, 1472695331, 1472698932, 1472698932, 1472698932, 1472702534, 1472702534, 1472702534, 1472706135, 1472706135, 1472706135, 1472709736, 1472713337, 1472713337, 1472713337, 1472716939, 1472716939, 1472716939, 1472720540, 1472724141, 1472724141, 1472724141, 1472727744, 1472731344, 1472738547, 1472738547, 1472742831, 1472764639, 1472768240, 1472771841, 1472771841, 1472779043, 1472779043, 1472779043, 1472782644, 1472782644, 1472782644, 1472786245, 1472786245, 1472789846, 1472797048, 1472797048, 1472797048, 1472800649, 1472800649, 1472807851, 1472811452, 1472818654, 1472825857, 1472825857, 1472829458, 1472833060, 1472833060, 1472833060, 1472836662, 1472836662, 1472836662, 1472841171, 1472841171, 1472845579, 1472847120, 1472847120, 1472847120, 1472850721, 1472854322, 1472854322, 1472854322, 1472857923, 1472857923, 1472861524, 1472865126, 1472865126, 1472872327, 1472872327, 1472879530, 1472879530, 1472883131, 1472883131, 1472883131, 1472890334, 1472893935, 1472893935, 1472893935, 1472897536, 1472897536, 1472897536, 1472904738, 1472904738, 1472911942, 1472911942, 1472915544, 1472915544, 1472915544, 1472922750, 1472926351, 1472926351, 1472926351, 1472926351, 1472926351, 1472929953, 1472940755, 1472940755, 1472940755, 1472944356, 1472947957, 1472947957, 1472947957, 1472951558, 1472955159, 1472955159, 1472955159, 1472959093, 1472962694, 1472962694, 1472962694, 1472969898, 1472969898, 1472973499, 1472973499, 1472977102, 1472977102, 1472980703, 1472980703, 1472987906, 1472991508, 1472991508, 1472991508, 1472995109, 1472995109, 1473002314, 1473002314, 1473002314, 1473002314, 1473002314, 1473002314, 1473005915, 1473005915, 1473009516, 1473009516, 1473013117, 1473016717, 1473016717, 1473016717, 1473027521, 1473027521, 1473027521, 1473031122, 1473031122, 1473038324, 1473041925, 1473045526, 1473045526, 1473052727, 1473052727, 1473056329, 1473056329, 1473059930, 1473063532, 1473072692, 1473076295, 1473076295, 1473079896, 1473079896, 1473083497, 1473083497, 1473119190, 1473126392, 1473129994, 1473129994, 1473133595, 1473133595, 1473133595, 1473137196, 1473137196, 1473144398, 1473155201, 1473158802, 1473162403, 1473162403, 1473162403, 1473166004, 1473166004, 1473186282, 1473186282, 1473189884, 1473197655, 1473197655, 1473201256, 1473201256, 1473204857, 1473208458, 1473208458, 1473212059, 1473212059, 1473212059, 1473215660, 1473215660, 1473215660, 1473215660, 1473219260, 1473219260, 1473219260, 1473219260, 1473222861, 1473230062, 1473230062, 1473230062, 1473233664, 1473233664, 1473237266, 1473244468, 1473251671, 1473251671, 1473251671, 1473251671, 1473255274, 1473255274, 1473258875, 1473308230, 1473308230, 1473311832, 1473315433, 1473315433, 1473319035, 1473322636, 1473326236, 1473326236, 1473326236, 1473326236, 1473333439, 1473340642, 1473340642, 1473340642, 1473344244, 1473347845, 1473372321, 1473372321, 1473372321, 1473379523, 1473383124, 1473383124, 1473383124, 1473386726, 1473386726, 1473390327, 1473390327, 1473393928, 1473397530, 1473397530, 1473401131, 1473401131, 1473404734, 1473411937, 1473411937, 1473415537, 1473415537, 1473415537, 1473415537, 1473419138, 1473419138, 1473422739, 1473422739, 1473422739, 1473426340, 1473426340, 1473429941, 1473429941, 1473429941, 1473429941, 1473433542, 1473437145, 1473444346, 1473485455, 1473485455, 1473489057, 1473492659, 1473492659, 1473492659, 1473496261, 1473496261, 1473505796, 1473509397, 1473509397, 1473512998, 1473512998, 1473512998, 1473516599, 1473520201, 1473523803, 1473523803, 1473523803, 1473527404, 1473527404, 1473527404, 1473531005, 1473538207, 1473541808, 1473549009, 1473556212, 1473556212, 1473559813, 1473570615, 1473577818, 1473577818, 1473581420, 1473581420, 1473585021, 1473588622, 1473594188, 1473594188, 1473594188, 1473594188, 1473597790, 1473601391, 1473601391, 1473604992, 1473608594, 1473612196, 1473612196, 1473615798, 1473615798, 1473619399, 1473619399, 1473623000, 1473623000, 1473623000, 1473623000, 1473626601, 1473630202, 1473630202, 1473633803, 1473633803, 1473633803, 1473644607, 1473644607, 1473651809, 1473651809, 1473655410, 1473659011, 1473662614, 1473666216, 1473666216, 1473666216, 1473669818, 1473669818, 1473673419, 1473673419, 1473677021, 1473677021, 1473680623, 1473684225, 1473684225, 1473684225, 1473687826, 1473687826, 1473691427, 1473698629, 1473718354, 1473721956, 1473725557, 1473729159, 1473732761, 1473739963, 1473743564, 1473747166, 1473747166, 1473747166, 1473750768, 1473750768, 1473754371, 1473761574, 1473761574, 1473761574, 1473761574, 1473765175, 1473768776, 1473768776, 1473772378, 1473772378, 1473772378, 1473775979, 1473779580, 1473783181, 1473786782, 1473786782, 1473786782, 1473786782, 1473790383, 1473790383, 1473793985, 1473797587, 1473797587, 1473797587, 1473804790, 1473804790, 1473808391, 1473811992, 1473819019, 1473819019, 1473819019, 1473819019, 1473822620, 1473826221, 1473826221, 1473840627, 1473840627, 1473851431, 1473851431, 1473855032, 1473855032, 1473855032, 1473855032, 1473858635, 1473858635, 1473858635, 1473862239, 1473862239, 1473865840, 1473865840, 1473869443, 1473873044, 1473876645, 1473876645, 1473876645, 1473888082, 1473888082, 1473891683, 1473891683, 1473891683, 1473891683, 1473895284, 1473895284, 1473895284, 1473895284, 1473902487, 1473902487, 1473906088, 1473909688, 1473916890, 1473920493, 1473926698, 1473930302, 1473930302, 1473933904, 1473933904, 1473937507, 1473937507, 1473937507, 1473941108, 1473941108, 1473944709, 1473951912, 1473951912, 1473951912, 1473960766, 1473964367, 1473971571, 1473982376, 1473982376, 1473982376, 1473985977, 1473985977, 1473985977, 1473989579, 1473989579, 1474003984, 1474003984, 1474007585, 1474011186, 1474014790, 1474014790, 1474021992, 1474021992, 1474025593, 1474025593, 1474032796, 1474032796, 1474036397, 1474036397, 1474036397, 1474036397, 1474044816, 1474044816, 1474044816, 1474048418, 1474055621, 1474055621, 1474059221, 1474059221, 1474065319, 1474068923, 1474072525, 1474074859, 1474074859, 1474074859, 1474074859, 1474074859, 1474082062, 1474085663, 1474085663, 1474089264, 1474092865, 1474096467, 1474096467, 1474100069, 1474103671, 1474103671, 1474107271, 1474110873, 1474110873, 1474114474, 1474121677, 1474121677, 1474121677, 1474125278, 1474128879, 1474128879, 1474132480, 1474136081, 1474143283, 1474143283, 1474143283, 1474146884, 1474146884, 1474149949, 1474149949, 1474149949, 1474153551, 1474157152, 1474160754, 1474160754, 1474164354, 1474164354, 1474167955, 1474171556, 1474175158, 1474175158, 1474182361, 1474185964, 1474189567, 1474193169, 1474196770, 1474196770, 1474200371, 1474200371, 1474203972, 1474203972, 1474203972, 1474203972, 1474203972, 1474207574, 1474211176, 1474211176, 1474211176, 1474211176, 1474218379, 1474218379, 1474229183, 1474232784, 1474236385, 1474239986, 1474239986, 1474247189, 1474247189, 1474250790, 1474250790, 1474254391, 1474254391, 1474254391, 1474257993, 1474257993, 1474260369, 1474260369, 1474263752, 1474263752, 1474270959, 1474270959, 1474274564, 1474278206, 1474281809, 1474281809, 1474281809, 1474281809, 1474289015, 1474289015, 1474292616, 1474292616, 1474296220, 1474299821, 1474303425, 1474303425, 1474307028, 1474310629, 1474314232, 1474314232, 1474321517, 1474325139, 1474328780, 1474328780, 1474328780, 1474332421, 1474332421, 1474336062, 1474339706, 1474339706, 1474339706, 1474343308, 1474343308, 1474346911, 1474350513, 1474350513, 1474350513, 1474354118, 1474354118, 1474357724, 1474357724, 1474361326, 1474364931, 1474370662, 1474374303, 1474377947, 1474377947, 1474377947, 1474381590, 1474385211, 1474392453, 1474392453, 1474406911, 1474406911, 1474406911, 1474406911, 1474410513, 1474414115, 1474414115, 1474421319, 1474424920, 1474424920, 1474424920, 1474424920, 1474424920, 1474424920, 1474424920, 1474428541, 1474428541, 1474435806, 1474446717, 1474450358, 1474450358, 1474457607, 1474457607, 1474457607, 1474457607, 1474457607, 1474461212, 1474464813, 1474464813, 1474464813, 1474464813, 1474468415, 1474472017, 1474475618, 1474475618, 1474482216, 1474482216, 1474485818, 1474486399, 1474499979, 1474499979, 1474499979, 1474499979, 1474499979, 1474499979, 1474503584, 1474503584, 1474514393, 1474517997, 1474517997, 1474517997, 1474521601, 1474521601, 1474521601, 1474521601, 1474525206, 1474528809, 1474528809, 1474536015, 1474536015, 1474536015, 1474545851, 1474546879, 1474550482, 1474554086, 1474554086, 1474554086, 1474564896, 1474564896, 1474569225, 1474572830, 1474572830, 1474576433, 1474576433, 1474580037, 1474580037, 1474583639, 1474583639, 1474590845, 1474594448, 1474598051, 1474601654, 1474601654, 1474605258, 1474608861, 1474608861, 1474612465, 1474616068, 1474616068, 1474619671, 1474619671, 1474623273, 1474623273, 1474623273, 1474623273, 1474630479, 1474630479, 1474634082, 1474634082, 1474634082, 1474637685, 1474644891, 1474644891, 1474648496, 1474652099, 1474652099, 1474655702, 1474659305, 1474666513, 1474670116, 1474673720, 1474683074, 1474686679, 1474686679, 1474686679, 1474686679, 1474686679, 1474686679, 1474686679, 1474686679, 1474690281, 1474693885, 1474697487, 1474701090, 1474701090, 1474704693, 1474704693, 1474704693, 1474708296, 1474708296, 1474711899, 1474715503, 1474719106, 1474719106, 1474722710, 1474726313, 1474726313, 1474726313, 1474726313, 1474729916, 1474729916, 1474733520, 1474733520, 1474733520, 1474737122, 1474740725, 1474744329, 1474744329, 1474744329, 1474747932, 1474747932, 1474751535, 1474762346, 1474762346, 1474762346, 1474769552, 1474769552, 1474769552, 1474773154, 1474773154, 1474776758, 1474780361, 1474783964, 1474787571, 1474793092, 1474793092, 1474796695, 1474796695, 1474796695, 1474800299, 1474800299, 1474800299, 1474803902, 1474807506, 1474811109, 1474811109, 1474821918, 1474823730, 1474823730, 1474823730, 1474827334, 1474830937, 1474834540, 1474834540, 1474834540, 1474838143, 1474841746, 1474841746, 1474845349, 1474845349, 1474848952, 1474856160, 1474859764, 1474863368, 1474866973, 1474870577, 1474870577, 1474877785, 1474877785, 1474884992, 1474888595, 1474895802, 1474895802, 1474897535, 1474901139, 1474901139, 1474901428, 1474918559, 1474923561, 1474923561, 1474930770, 1474934374, 1474934374, 1474937977, 1474937977, 1474947514, 1474947514, 1474951117, 1474951117, 1474954721, 1474954721, 1474954721, 1474958325, 1474961929, 1474961929, 1474961929};

  vector<double> ds4muTimes = {14090.6928, 14413.317, 15250.998, 15402.3958, 16672.4568, 20029.0779, 23566.6963, 25605.3344, 26847.4427, 27064.0812, 31530.6061, 33515.1272, 36659.7223, 37569.4994, 37835.5516, 38956.0274, 40769.6902, 41598.0485, 47319.1676, 51041.9251, 51872.3649, 55585.1139, 59602.4781, 60281.0847, 64423.0964, 65083.4762, 69143.3324, 71339.0597, 73536.4157, 75708.4268, 1378.07532, 7207.20368, 2971.69907, 875.62852, 1024.21635, 741.163976, 297.197919, 1040.1246, 1630.39812, 1272.46366, 2736.77085, 2344.70223, 1506.84099, 1918.87128, 2684.88964, 2774.29481, 3287.71035, 2786.16315, 3404.72909, 655.285321, 1830.27018, 2400.20898, 1195.79778, 2091.0218, 3044.18166, 3153.83269, 1629.82778, 253.675146, 3228.92992, 620.311386, 2728.45972, 3536.12599, 2737.89796, 3058.84947, 295.487015, 1242.48882, 2834.51018, 380.911355, 2072.76663, 3104.6503, 554.749486, 1642.00438, 320.353931, 2964.88073, 2985.72939, 135.423048, 1195.69035, 3497.52078, 2986.03585, 1634.63881, 3598.37369, 471.092773, 936.866675, 1490.64478, 2101.04842, 2411.68358, 212.458611, 910.519846, 2062.17392, 2714.52624, 615.613476, 1213.70019, 2634.84865, 2673.33795, 2852.60191, 3475.10193, 252.525339, 1182.99197, 1883.34671, 541.667566, 3381.46426, 427.207784, 1172.54153, 2133.7566, 1607.1951, 1051.62941, 511.674175, 1808.77499, 329.289519, 1160.84962, 1167.54084, 1348.61195, 1367.90291, 1936.64755, 574.209551, 1639.9613, 1663.00451, 1689.1927, 234.800713, 74.0867071, 921.111348, 1056.53962, 1361.26857, 1434.85846, 1573.05761, 327.921078, 1245.59692, 2033.54491, 2244.29929, 796.098042, 1987.37298, 2234.50722, 720.295647, 1616.66347, 2625.9623, 2686.026, 1217.10018, 2265.83328, 272.962801, 384.650976, 2013.91193, 274.485635, 2212.62332, 527.199539, 3539.7236, 4207.50307, 8996.71574, 9002.11609, 12082.3838, 16235.6427, 17196.7083, 23004.4167, 24492.4007, 24521.8547, 25035.9656, 25855.4043, 27063.3724, 27783.0041, 28494.2352, 28871.7982, 32273.8303, 32600.0639, 34574.2757, 36830.6766, 46588.4293, 54810.4209, 56117.2952, 59860.5362, 60631.2594, 64297.9289, 66088.3834, 68570.7223, 70983.4115, 75194.9297, 3216.85876, 3231.87321, 6553.36501, 8785.84176, 10990.5976, 11017.0195, 11557.2384, 13081.5608, 17882.5317, 18961.9851, 20634.0309, 21110.2022, 23236.2915, 23480.326, 24066.5031, 27837.852, 27838.0753, 28307.4749, 31580.4216, 33226.6454, 35335.2374, 35776.2715, 37436.1441, 37607.5225, 39782.1999, 42345.8143, 43724.4241, 44141.3471, 45615.2702, 47111.9116, 50773.8385, 58358.4873, 60909.3802, 748.599006, 25287.3202, 27485.329, 29558.571, 31923.1407, 37183.8349, 39070.6956, 39295.7597, 41915.0901, 42019.8839, 42909.4036, 44435.9346, 45847.8618, 48285.6046, 55100.2874, 55439.6979, 56769.7914, 58855.9005, 59100.5408, 66392.8939, 71364.007, 79144.4755, 84058.3949, 84140.3297, 87368.2246, 91476.8175, 92334.6522, 93896.1922, 94357.5711, 95688.9357, 96133.4997, 99517.2272, 101238.964, 102758.676, 105353.001, 106993.469, 107004.849, 108271.348, 112423.092, 115237.713, 115313.936, 115683.135, 118171.066, 121289.829, 123291.513, 125050.983, 130507.162, 132476.177, 137207.828, 137897.597, 140949.35, 141391.422, 142033.697, 147909.892, 151682.187, 153125.97, 154205.701, 157948.145, 158185.764, 158338.952, 162256.819, 163199.202, 169686.788, 171916.989, 175263.052, 175573.466, 176575.395, 182024.794, 184458.633, 185400.606, 185857.578, 186714.174, 186820.288, 189076.862, 200136.702, 200483.848, 201596.84, 204306.973, 205577.165, 208355.966, 208818.288, 209106.016, 213114.063, 215324.601, 215929.318, 217137.22, 220362.265, 220397.487, 220400.725, 228419.414, 229436.454, 231187.229, 231896.646, 234786.471, 238061.775, 239396.295, 241064.51, 248190.423, 249590.504, 250203.362, 251907.68, 253687.841, 254695.075, 260705.189, 261178.434, 261516.561, 262012.517, 262624.843, 263104.889, 264023.446, 265169.672, 267837.539, 268372.035, 272711.161, 274731.7, 275435.351, 277685.525, 285358.523, 286652.78, 287188.867, 288766.902, 290832.619, 297033.915, 299947.286, 305268.494, 305492.868, 311206.246, 311264.354, 314711.491, 316907.644, 317703.663, 323487.669, 330951.826, 334253.715, 337178.69, 339015.395, 339952.828, 341424.467, 344008.931, 379892.911, 387048.266, 389058.446, 390757.841, 392494.389, 393176.146, 393339.139, 395676.319, 396287.824, 401948.416, 414568.478, 417312.28, 420101.212, 420896.869, 422105.012, 424681.137, 425073.64, 2180.72953, 3656.70478, 4784.12084, 13233.2608, 13292.6107, 16094.0108, 16760.0279, 20289.9608, 23757.7789, 23803.7264, 26605, 27350.3428, 29130.1995, 29996.4127, 30082.0808, 30437.5977, 33308.0863, 33555.0909, 35587.9684, 36001.3024, 36486.1874, 38776.9334, 44699.7194, 44835.6971, 46036.5338, 49292.3695, 49299.0603, 52936.7235, 58683.9977, 66134.2875, 67844.9546, 68597.8095, 68612.8928, 71236.9293, 71834.5968, 75054.3767, 1011.35478, 1476.2924, 7860.43879, 10531.8408, 11825.026, 12044.5304, 18362.0784, 19447.9712, 19465.249, 21672.5045, 22105.5115, 28022.3541, 34078.1765, 34476.9525, 36853.1532, 37621.2525, 43575.5277, 983.435867, 2926.93122, 3596.99728, 8968.93053, 11268.8748, 11798.0519, 12737.3995, 17734.4201, 18115.8818, 20089.5031, 21511.1531, 25010.7949, 26638.411, 27717.677, 32014.6366, 32102.6929, 34937.5743, 41304.0822, 41823.1864, 45592.4044, 46732.9159, 46804.72, 47046.8851, 48128.249, 50292.4334, 51491.2152, 51606.6579, 52688.9315, 54726.1815, 56582.1201, 60135.6499, 60535.3772, 61122.1127, 61400.1635, 63379.4705, 66906.7571, 72627.045, 889.185668, 2666.32428, 6670.44985, 9154.78726, 10221.8827, 10421.5305, 12459.4083, 13627.3099, 6129.7199, 7627.30328, 10587.4779, 11231.9859, 12208.015, 12348.8636, 14930.3408, 21129.3886, 22923.2837, 23054.0347, 23643.2705, 25545.5089, 27714.9149, 28411.3223, 30948.2537, 39087.8456, 43029.4229, 50165.2737, 55713.681, 55840.5965, 61009.6109, 70344.7916, 76725.8992, 77537.9679, 81839.1159, 82411.8499, 86052.2298, 86786.853, 92264.9254, 93149.61, 93419.7588, 94582.4346, 97912.4786, 102090.093, 102835.751, 105929.925, 109409.997, 111172.556, 112090.867, 115825.927, 116513.927, 117671.259, 119405.152, 122688.679, 124049.746, 124168.929, 124403.703, 124840.612, 129290.37, 131500.189, 133139.13, 133815.899, 134663.246, 144839.522, 145268.571, 152279.436, 153122.128, 156154.992, 158399.842, 163228.097, 164634.287, 164667.359, 166555.491, 168998.047, 170321.858, 174357.617, 174389.31, 175925.322, 176556.971, 179735.574, 182302.925, 183481.085, 183621.91, 186148.002, 186428.567, 189674.058, 197124.573, 216396.066, 221122.918, 225715.905, 230439.701, 231607.547, 239216.286, 244552.647, 245427.262, 247431.361, 247916.486, 249059.361, 249797.249, 255171.809, 259888.088, 260530.796, 261089.659, 262758.846, 266012.749, 266959.124, 268386.3, 270999.824, 272288.7, 273908.168, 274186.376, 280968.129, 283426.479, 286160.172, 286592.929, 287628.782, 288094.797, 289474.979, 291834.009, 293513.726, 296142.44, 297223.749, 298474.634, 303048.754, 303152.949, 308646.086, 310960.821, 317195.502, 318022.959, 319284.085, 319590.912, 321876.17, 326394.429, 326671.054, 338764.166, 340912.089, 350946.465, 351486.977, 353196.759, 353380.591, 353806.507, 354615.955, 359127.575, 359547.298, 359583.144, 360512.843, 361585.54, 365948.04, 366652.534, 367590.444, 372429.669, 375528.296, 376700.049, 377876.8, 386138.714, 387761.363, 389813.167, 390594.882, 391401.966, 391510.987, 395182.566, 395503.668, 395622.321, 396070.496, 400905.713, 403673.679, 407479.371, 410994.174, 416563.052, 421498.413, 425675.041, 429176.559, 431220.524, 433659.931, 434103.555, 437039.963, 437749.418, 437990.209, 440745.611, 442384.135, 443723.162, 451436.57, 453404.24, 453408.752, 5957.1314, 9734.50089, 17505.8329, 25554.6169, 26862.2633, 26917.3341, 29704.244, 30223.2319, 31775.6891, 32968.5789, 34698.2774, 48299.4889, 49570.3775, 53735.893, 55032.8791, 58928.941, 59252.4392, 66076.0222, 66825.2194, 69622.1735, 70656.9829, 76492.2458, 78764.7077, 81591.9195, 81643.4614, 82774.9549, 82959.084, 87877.6469, 87929.3883, 89810.2636, 93411.1452, 98866.9578, 99533.8237, 102764.684, 103644.825, 2010.44933, 5056.25459, 9589.66064, 793.165382, 810.691732, 1344.13225, 1591.08005, 1808.56659, 8134.53605, 11324.0891, 13231.3444, 18045.3624, 18725.6973, 23570.1753, 23862.0912, 25695.9599, 30932.7204, 31854.0573, 32787.9364, 38610.547, 38661.3756, 43017.0665, 48964.3866, 49527.8106, 50605.4922, 52532.8357, 56698.9665, 56732.4126, 60111.0817, 63877.0332, 69770.8552, 71316.4802, 71529.4057, 73509.6777, 74725.7796, 77447.5342, 78386.1834, 78670.9484, 82238.3154, 85175.3594, 88698.9843, 89631.0652, 90984.015, 91704.8995, 93704.1515, 97234.8365, 102538.904, 103643.991, 108860.352, 113996.548, 116955.217, 121983.46, 122148.958, 124470.884, 128715.45, 128798.543, 131113.433, 131674.208, 131731.643, 132213.829, 132863.88, 135154.211, 137113.839, 138611.98, 138681.448, 138701.491, 145544.212, 147117.523, 156039.85, 158380.341, 163848.771, 165510.268, 167427.655, 173014.246, 174382.772, 178643.628, 179651.482, 180241.85, 180544.639, 180776.941, 183841.957, 185185.566, 187039.82, 187602.086, 191158.284, 192237.918, 198721.4, 199446.781, 202647.699, 203804.393, 207705.091, 208418.877, 209488.13, 210242.844, 217413.939, 217725.108, 218232.502, 219112.292, 223172.982, 225890.721, 231668.759, 232216.411, 232480.685, 236722.766, 241720.299, 242615.726, 247392.376, 250533.696, 254447.841, 256024.082, 256554.592, 258577.57, 260300.18, 264283.741, 265263.293, 265792.311, 266083.481, 269186.492, 272026.9, 275331.747, 277450.868, 278115.728, 278432.187, 280353.013, 280364.86, 284013.545, 286662.742, 290221.103, 290392.386, 298316.358, 302806.25, 305788.403, 305817.764, 306230.482, 308129.051, 312203.054, 319861.417, 320329.493, 332953.995, 333719.56, 333797.219, 335861.701, 336768.923, 339593.426, 340127.001, 347668.321, 350296.844, 350882.428, 351745.878, 352278.442, 352592.442, 353246.432, 353521.031, 354081.993, 356299.79, 363854.411, 373120.456, 376375.048, 379209.074, 383474.462, 384054.437, 384711.518, 384742.734, 385981.572, 387341.239, 390850.667, 391692.142, 392468.16, 393148.097, 395732.319, 398663.437, 402739.737, 403921.163, 409406.336, 410913.532, 411584.657, 414209.595, 4213.38465, 4250.08771, 6181.72695, 6882.01216, 7346.45605, 7359.40139, 8022.25136, 9688.22674, 21175.8124, 24748.3765, 25012.959, 25217.7753, 25826.0785, 26186.275, 27689.1228, 29053.3228, 32994.9583, 35354.5348, 35363.4794, 40636.2123, 41656.8115, 43163.2338, 50026.6913, 51561.6018, 57943.3351, 60457.7936, 61269.2751, 61270.6964, 69989.203, 71758.7005, 4960.37388, 5827.62031, 8506.13884, 9660.10574, 10010.0586, 12553.1336, 13966.5242, 18736.4258, 19321.9224, 23855.586, 29236.7892, 32994.4471, 36377.3921, 36667.7197, 37622.0765, 41489.91, 41740.4291, 47550.7681, 48851.7507, 49211.17, 52198.1637, 54150.4279, 56402.4396, 57855.1772, 57983.7338, 58269.6534, 63762.2712, 65330.6524, 67193.8806, 67855.4819, 69676.5147, 70144.8018, 77081.1166, 79116.1206, 81900.6988, 87194.2677, 87275.5425, 88857.4083, 93446.9199, 98819.7311, 105653.838, 108856.132, 117369.394, 118865.962, 119220.822, 120093.537, 120316.051, 120418.178, 121597.882, 121827.231, 121856.919, 122773.976, 129022.054, 129839.467, 134499.913, 136078.669, 139053.429, 139244.252, 139991.432, 140491.866, 141409.258, 144933.972, 149006.259, 151571.658, 152734.641, 156992.153, 158930.801, 159281.572, 160581.256, 162066.287, 165041.475, 165195.269, 166366.88, 166551.765, 168918.631, 172241.312, 174958.842, 176930.915, 177852.131, 178779.746, 181138.299, 182712.584, 186314.497, 194664.302, 194707.169, 195931.235, 202781.885, 205266.722, 205327.084, 206660.968, 207087.529, 209727.306, 215351.299, 219138.043, 221323.121, 226105.317, 228371.323, 229976.271, 230235.656, 232009.172, 232676.023, 234146.207, 235049.85, 236787.306, 243068.678, 244113.225, 245169.107, 254988.309, 1571.72449, 1733.77469, 2589.89207, 7046.80534, 9502.36281, 11535.1521, 11810.5306, 12007.4167, 16769.3459, 18786.5677, 18898.754, 22282.9659, 23479.9755, 28444.2516, 33676.3068, 36913.3072, 40211.1729, 46048.2468, 47109.7725, 50402.6678, 55769.8034, 56853.8822, 63507.5313, 68113.0699, 72448.5872, 73207.5436, 698.161396, 3970.17528, 4014.75755, 7443.40891, 433.676892, 4316.17489, 7103.46332, 12228.521, 15051.6557, 15464.0524, 18881.0968, 20499.5458, 30423.1152, 30964.7085, 31526.0525, 31529.2395, 36179.4738, 37332.0493, 38234.6411, 41761.8318, 43084.877, 43911.7165, 44925.0957};

  vector<double> ds4muUncert = {1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41517957, 1.41517957, 1.41464767, 1.41469465, 1.4151331, 1.41454142, 1.41682765, 1.41471324, 1.41471324, 1.41531558, 1.41743307, 1.41743307, 1.41508561, 1.41495329, 1.41495329, 1.41422639, 1.4149068, 1.41421404, 1.41436032, 1.41430506, 1.41453006, 1.4148291, 1.4148291, 1.41428475, 1.41449095, 1.41449095, 1.41701902, 1.41701902, 1.4143248, 1.4143248, 1.4146146, 1.41480289, 1.41425027, 1.41521071, 1.41521071, 1.41521071, 1.41427577, 1.41427577, 1.41448173, 1.41448173, 1.42187277, 1.4143046, 1.4143046, 1.4143046, 1.41468114, 1.41468114, 1.41455951, 1.41477975, 1.41477975, 1.4147421, 1.4147421, 1.41421357, 1.41421357, 1.41476452, 1.41719631, 1.41719631, 1.41719631, 1.41453123, 1.4142218, 1.4142218, 1.41463124, 1.41463124, 1.41463124, 1.41463124, 1.41454165, 1.41454165, 1.41454165, 1.41454165, 1.41454165, 1.41663212, 1.41663212, 1.41423632, 1.41524809, 1.41436202, 1.41490808, 1.41490808, 1.41490808, 1.41490808, 1.41450789, 1.41437994, 1.41541461, 1.41541461, 1.41690776, 1.41690776, 1.41690776, 1.41433257, 1.41449896, 1.41449896, 1.41716042, 1.41716042, 1.41716042, 1.41716042, 1.41650973, 1.41472528, 1.41423109, 1.41423109, 1.41423109, 1.41423109, 1.41423109, 1.41429451, 1.41429451, 1.41429451, 1.41429451, 1.41784027, 1.41784027, 1.41422206, 1.4163161, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41473689, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41781855, 1.4158292, 1.41587682, 1.41587682, 1.41691982, 1.41691982, 1.41691982, 1.41433906, 1.41433906, 1.41433906, 1.41508564, 1.41508564, 1.41954927, 1.41424952, 1.41424952, 1.41424952, 1.4142725, 1.4142725, 1.41441754, 1.4323748, 1.41462717, 1.41437726, 1.41437726, 1.41465541, 1.41572302, 1.41572302, 1.41572302, 1.4155392, 1.4155392, 1.4155392, 1.4215984, 1.4215984, 1.42073368, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421367, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41457954, 1.41457954, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41600257, 1.41600257, 1.41421357, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41661264, 1.41828786, 1.41828786, 1.41545, 1.41545, 1.41545, 1.41445022, 1.41539197, 1.41539197, 1.41771812, 1.41771812, 1.41421356, 1.41421356, 1.4148451, 1.41500724, 1.41500724, 1.41422375, 1.41494702, 1.41494702, 1.41482395, 1.41482395, 1.41482395, 1.41482395, 1.41482395, 1.41570933, 1.41570933, 1.41570933, 1.41497115, 1.41497115, 1.41738401, 1.41779489, 1.41779489, 1.41779489, 1.41779489, 1.42031221, 1.4165463, 1.41450298, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41425798, 1.41425798, 1.41425798, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421357, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41422257, 1.41422257, 1.41422257, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421379, 1.41421379, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41423386, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421357, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41468949, 1.41468949, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41552494, 1.41454081, 1.41862425, 1.41862425, 1.42875259, 1.4248037, 1.4248037, 1.41426335, 1.41426335, 1.41426335, 1.41426335, 1.42375687, 1.42375687, 1.42375687, 1.42375687, 1.41429627, 1.41429627, 1.41749124, 1.41710311, 1.42061097, 1.41424724, 1.41464421, 1.41424422, 1.41424422, 1.4193972, 1.4193972, 1.41457282, 1.41457282, 1.41457282, 1.41474387, 1.41474387, 1.4164222, 1.4145351, 1.4145351, 1.4145351, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421357, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41437266, 1.41437266, 1.41437266, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41443214, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41424129, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41438208, 1.41438208, 1.41438208, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421759, 1.41421759, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.4143305, 1.4143305, 1.4143305, 1.4143305, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41429944, 1.41429944, 1.41429944, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41426771, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.41421356, 1.4142223, 1.41421356, 1.41421356, 1.41421356};

  // Copy vectors into the ones used by skim_mjd_data
  muRuns = ds4muRuns;
  muRunTStarts = ds4muRunTStarts;
  muTimes = ds4muTimes;
  muTypes = ds4muTypes;
  muUncert = ds4muUncert;
}


void LoadLNFillTimes1(vector<double>& lnFillTimes1, int dsNum)
{
  if (dsNum == 0)
    lnFillTimes1 = {
      1435720848, 1435721208, 1435870160, 1436020533, 1436168622, 1436316362, 1436463827, 1436464128, 1436614832,
      1436759402, 1436908966, 1437058884, 1437060627, 1437061093, 1437204895, 1437205196, 1437350621, 1437350981,
      1437638022, 1437638383, 1437781652, 1437782012, 1437926383, 1438070819, 1438121812, 1438212611, 1438352837,
      1438496004, 1438496305, 1438639835, 1438640196, 1438782282, 1438782583, 1438932169, 1439080850, 1439081151,
      1439226624, 1439226984, 1439371591, 1439371951, 1439514291, 1439657247, 1439657607, 1439801649, 1439802009,
      1439944622, 1440080091, 1440192295, 1440335863, 1440477294, 1440618411, 1440618712, 1440759782, 1440760142,
      1440902658, 1440902959, 1441046730, 1441187019, 1441187320, 1441325878, 1441326239, 1441462000, 1441462301,
      1441600116, 1441600417, 1441741779, 1441742080, 1441883940, 1441884241, 1442027368, 1442027669, 1442169713,
      1442170094, 1442312599, 1442312900, 1442453920, 1442595578, 1442595879, 1442737259, 1442737560, 1442879000,
      1442879301
    };
  else if (dsNum == 1)
    lnFillTimes1 = {
      1452655867, 1452791415, 1452791716, 1453541032, 1453541393, 1453670314, 1453670675, 1453800137, 1453800498,
      1453929779, 1453937178, 1453998125, 1453998906, 1454000591, 1454002035, 1454002456, 1454002757, 1454014971,
      1454107981, 1454108282, 1454219392, 1454219753, 1454332307, 1454332608, 1454332909, 1454447212, 1454559953,
      1454560314, 1454560615, 1454679496, 1454769079, 1454882301, 1454882662, 1454946492, 1454951907, 1454952930,
      1454954012, 1454955958, 1455225161, 1455225462, 1455228289, 1455440690, 1455568585, 1455568886, 1455696789,
      1455697090, 1455822149, 1455822450, 1455952573, 1456082166, 1456082467, 1456206057, 1456206358, 1456333236,
      1456460237, 1456460538, 1456588495, 1456588796, 1456717776, 1456718077, 1456846882, 1456943983, 1456944465,
      1456981934, 1457110918, 1457111219, 1457238098, 1457238399, 1457365179, 1457491997, 1457492298, 1457619662,
      1457619963, 1457747884, 1457874684, 1458001143, 1458001444, 1458130495, 1458130796, 1458259402, 1458259703,
      1458387930, 1458388231, 1458515657, 1458639685, 1458640046, 1458767518, 1458767879, 1458896260, 1458896561,
      1459023862, 1459150863, 1459151164, 1459275989, 1459276290, 1459402548, 1459402849, 1459529663, 1459530023,
      1459654930, 1459655231, 1459785212, 1459912507, 1459912808, 1460042708, 1460043009, 1460169429, 1460169730,
      1460297779, 1460298080, 1460426527, 1460426828, 1460552742, 1460678641, 1460808916, 1460809217, 1460939150,
      1461064619, 1461064920, 1461189868, 1461318559, 1461318860, 1461443967, 1461444268, 1461569658, 1461569959,
      1461695992, 1461824752, 1461825053, 1461952713, 1461953014, 1462258909, 1462314666, 1462371538, 1462426019,
      1462462316, 1462462617, 1462462918, 1462463219, 1462588708, 1462715136, 1462840823, 1462841124, 1462966744,
      1462967045, 1463093301, 1463093602, 1463220332, 1463220636, 1463346237, 1463346558, 1463472892, 1463473193,
      1463599111, 1463599412, 1463694217
    };
  else if(dsNum == 2)
    lnFillTimes1 = {
      1465002657, 1465002958, 1465128881, 1465129182, 1465254829, 1465255130, 1465379929, 1465380230, 1465501071,
      1465593608, 1465593929, 1465722641, 1465723002, 1466024056, 1466078698, 1466095128, 1466095429, 1466095731,
      1466221253, 1466221573, 1466345919, 1466472151, 1466472452, 1466596048, 1466596349, 1466719933, 1466720234,
      1466804031, 1466930672, 1466930973, 1467051375, 1467178832, 1467179136, 1467302530, 1467302831, 1467426540,
      1467426841, 1467550116, 1467550477, 1467674708, 1467675009, 1467802799, 1467803101, 1467929293, 1467929594,
      1468057309, 1468057610, 1468180299, 1468180600
    };
  else if(dsNum == 3)
    lnFillTimes1 = {
      1472268007, 1472404916, 1472545253, 1472545554, 1472683456, 1472683757, 1472822134, 1472961379, 1473096880,
      1473097181, 1473236517, 1473236818, 1473369324, 1473369625, 1473510316, 1473635684, 1473635985, 1473771858,
      1473772159, 1473909355, 1473909657, 1474045268, 1474182801, 1474183102, 1474319605, 1474319906, 1474457662,
      1474457964, 1474569273, 1474705001, 1474705302, 1474842466
    };
  else if (dsNum == 5)
    lnFillTimes1 = {
      1476453399, 1476453700, 1476590095, 1476590396, 1476725368, 1476725669, 1476860943, 1476988923, 1476989224,
      1477126392, 1477126693, 1477263085, 1477398722, 1477399042, 1477535486, 1477535787, 1477673729, 1477810060,
      1477943283, 1478078740, 1478079044, 1478213569, 1478349968, 1478350270, 1478485711, 1478486012, 1478635187,
      1478635488, 1478773172, 1478773473, 1478908905, 1479037406, 1479037707, 1479169196, 1479169497, 1479304674,
      1479304975, 1479418735, 1479553573, 1479553876, 1479685756, 1479686057, 1479816678, 1479816979, 1479949240,
      1479949541, 1480084329, 1480084630, 1480216536, 1480477171, 1480477472, 1480610478, 1480744620, 1480874159,
      1480874460, 1481003415, 1481136272, 1481270528, 1481270834, 1481321467, 1481457733, 1481458036, 1481591390,
      1481591691, 1481722238, 1481722539, 1481835467, 1481967769, 1482099573, 1482099874, 1482230832, 1482363183,
      1482363484, 1482490692, 1482490995, 1482621593, 1482621953, 1482751715, 1482883864, 1482884165, 1483015618,
      1483015919, 1483142973, 1483143274, 1483273444, 1483273745, 1483406229, 1483534897, 1483535198, 1483737070,
      1483868828, 1483869149, 1483994327, 1483994628, 1484126706, 1484127007, 1484257208, 1484257509, 1484391758,
      1484392179, 1484526418, 1484526719, 1484690034, 1484690337, 1484823414, 1484823715, 1484870562, 1484943990,
      1485076303, 1485076605, 1485204746, 1485205107, 1485338033, 1485338334, 1485465730, 1485466031, 1485599009,
      1485599310, 1485728280, 1485728641, 1485852829, 1485853130, 1485984256, 1485984557, 1486111924, 1486153947,
      1486359948, 1486360249, 1486494611, 1486494912, 1486625386, 1486625687, 1486759864, 1486760165, 1486898541,
      1486898842, 1487029529, 1487029889, 1487155174, 1487155534, 1487290720, 1487291080, 1487427167, 1487427525,
      1487561271, 1487561631, 1487694477, 1487828422, 1487828723, 1487864401, 1488002374, 1488002675, 1488129971,
      1488130273, 1488264928, 1488265229, 1488395270, 1488395571, 1488527853, 1488528154, 1488653319, 1488653620,
      1488781734, 1488782037, 1488913613, 1488913914, 1489046971, 1489047332, 1489048234, 1489048898, 1489049439,
      1489050041, 1489050462, 1489071062, 1489072269, 1489072810, 1489297040, 1489297341, 1489430768, 1489431069,
      1489560237, 1489560538, 1489690781, 1489691082
    };
}


void LoadLNFillTimes2(vector<double>& lnFillTimes2, int dsNum)
{
  if (dsNum == 4)
    lnFillTimes2 = {
      1472169706, 1472283139, 1472283440, 1472392397, 1472392698, 1472508671, 1472509032, 1472626749, 1472627052,
      1472749055, 1472750741, 1472848201, 1472848502, 1472959270, 1472959571, 1473069251, 1473069554, 1473180721,
      1473181022, 1473291137, 1473291438, 1473369625, 1473485389, 1473485730, 1473594355, 1473594656, 1473702993,
      1473703294, 1473815615, 1473815919, 1473926807, 1473927167, 1474040572, 1474040873, 1474150140, 1474150441,
      1474260642, 1474261003, 1474370902, 1474371262, 1474482449, 1474482750, 1474569695, 1474679736, 1474680037,
      1474789636, 1474789937, 1474901605, 1474901906
    };
  else if (dsNum == 5)
    lnFillTimes2 = {
      1476438165, 1476438466, 1476474106, 1476589193, 1476589554, 1476700835, 1476701136, 1476812498, 1476812799,
      1476927295, 1476927596, 1476989828, 1477055763, 1477056064, 1477123926, 1477192974, 1477193275, 1477261802,
      1477262103, 1477325805, 1477326166, 1477459278, 1477459579, 1477686549, 1477686850, 1477800402, 1477800703,
      1477911061, 1477911362, 1478027274, 1478027577, 1478144219, 1478144522, 1478256013, 1478256314, 1478376006,
      1478376366, 1478489342, 1478489645, 1478604014, 1478604315, 1478712990, 1478713291, 1478822383, 1478822684,
      1478932948, 1478933249, 1479043427, 1479043728, 1479155203, 1479155504, 1479269432, 1479269733, 1479385115,
      1479385436, 1479420059, 1479530408, 1479530709, 1479644357, 1479644658, 1479758177, 1479758478, 1479875036,
      1479875337, 1479990557, 1479990861, 1480104123, 1480104424, 1480217981, 1480218302, 1480325906, 1480326227,
      1480440487, 1480440848, 1480550916, 1480551217, 1480619639, 1480734801, 1480735104, 1480842825, 1480843126,
      1480952106, 1480952407, 1481067058, 1481067419, 1481178211, 1481178514, 1481288176, 1481288477, 1481321507,
      1481435047, 1481435368, 1481551179, 1481551480, 1481665221, 1481665522, 1481780658, 1481780959, 1481836309,
      1481945846, 1481946147, 1482060754, 1482061075, 1482174422, 1482174723, 1482288906, 1482289207, 1482419766,
      1482420107, 1482533028, 1482533329, 1482647683, 1482648004, 1482761763, 1482813843, 1482814144, 1482928158,
      1482928479, 1483041177, 1483041480, 1483150257, 1483150618, 1483263614, 1483263915, 1483375931, 1483376235,
      1483486995, 1483487296, 1483596540, 1483596842, 1483708518, 1483708819, 1483722724, 1483735806, 1483738818,
      1483844443, 1483844803, 1483955996, 1483956297, 1484000769, 1484069674, 1484070396, 1484153420, 1484153721,
      1484240112, 1484325801, 1484326106, 1484438136, 1484438437, 1484549308, 1484549609, 1484681327, 1484681668,
      1484793262, 1484793583, 1484904014, 1484904315, 1485013552, 1485013853, 1485124164, 1485124467, 1485232620,
      1485232921, 1485343512, 1485343813, 1485454351, 1485454652, 1485566625, 1485566926, 1485677147, 1485677448,
      1485787152, 1485787453, 1485896831, 1485897132, 1486007973, 1486008274, 1486116439, 1486116799, 1486154148,
      1486263023, 1486263343, 1486373311, 1486373612, 1486485400, 1486485761, 1486597618, 1486597919, 1486655179,
      1486765820, 1486766124, 1486876700, 1486877001, 1486991129, 1486991432, 1487104592, 1487104952, 1487221958,
      1487222321, 1487334442, 1487334822, 1487446410, 1487446787, 1487557663, 1487558031, 1487669815, 1487670155,
      1487780781, 1487781431, 1487862530, 1487862831, 1487976474, 1487976775, 1488091110, 1488091470, 1488204162,
      1488204483, 1488317724, 1488318025, 1488429357, 1488429659, 1488543167, 1488543468, 1488657835, 1488658136,
      1488770654, 1488770957, 1488882113, 1488882414, 1488994865, 1488995166, 1489071062, 1489104062, 1489104423,
      1489216551, 1489326545, 1489326846, 1489440424, 1489440725, 1489551743, 1489552044, 1489662244, 1489662545
    };
}

